[
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/develop/build-source/",
	"title": "Build from source",
	"tags": [],
	"description": "Instructions if you want to build WebLogic Remote Console from source",
	"content": "Prerequisites Before you can build the WebLogic Remote Console, you need to install the following software in your local build environment:\nJava SE 11 Maven 3.6.1+ nodejs 14.16+ This download includes npm. Oracle JET 13.0.0 client libraries To install the required Oracle JET software, run npm install --location=global @oracle/ojet-cli@~13.0.0. On Linux and macOS, you will need to use sudo. You can verify you\u0026rsquo;ve installed the correct versions of the listed software by running the following commands:\njava -version mvn --version node -v ojet --version Build from source Clone the repository at https://github.com/oracle/weblogic-remote-console. In a command window, navigate to the home directory of the cloned repository. Run mvn clean install. When the build is successful, a console.zip file is created in the console-backend/installer/target directory. You can now install and run the Remote Console as described in Install the WebLogic Remote Console.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/setup/console/",
	"title": "Explore the WebLogic Remote Console",
	"tags": [],
	"description": "An overview of the WebLogic Remote Console and its differences with the Oracle WebLogic Administration Console.",
	"content": "The WebLogic Remote Console offers an alternative option for administering WebLogic Server domains. It not only allows you to edit Administration Servers, but also build WebLogic Deploy Tooling (WDT) model files and property lists.\nWhile the WebLogic Remote Console shares many features with the Administration Console, its functionality is slightly different. See Differences with the Administration Console for more information.\nBasic layout The WebLogic Remote Console presents a simple user interface that varies slightly across different providers. Broadly, it\u0026rsquo;s arranged into the following areas:\nKiosk - manage the details of your current project, its providers and their connection details. You can also import and export project files here. On Administration Server providers, the Kiosk also includes the Shopping Cart which contains the Change Manager, as well as any changes youâ€™ve made to the domain configuration. You can commit (or discard) changes directly from the Shopping Cart.\nIf you have the console extension, console-rest-ext-2.0.war, installed, you can see the specific pending changes for your domain.\nNavStrip - toggle the visibility of the navigation tree () and, in an Administration Server provider, move between perspectives.\nNavigation Tree - delve into the domain structure, expanding each top-level node to see more information. The Navigation Tree varies depending on your currently active provider.\nContent Pane - explore and edit the properties of the active provider.\nYou can see the connection status of the current provider in the upper right corner of the console.\nAdministration Server connections are either Green (connected) or Red (not connected). WDT model files, WDT composite models, and property lists are always Yellow (offline). The WebLogic Remote Console automatically detects and matches the language of your operating system. In the browser-based application however, this setting is overridden by the language settings of your browser.\nPerspectives Each provider type has at least one perspective - a representation of the data supplied by the provider. In providers with multiple perspectives, each perspective prioritizes distinct aspects of the provider.\nProvider Type Perspectives Administration Server Edit Tree: an editable representation of the WebLogic Server domain. Enter this perspective when you want to make and commit changes to the domain. Configuration Tree: a read-only representation of the WebLogic Server domain. Enter this perspective if you want to see the current settings of the domain, without making any changes. Changes made in the Edit Tree perspective won't appear in the Configuration Tree perspective until you commit them, or for non-dynamic changes, until you restart the server. Monitoring Tree: an overview of the runtime statistics for the running domain. You can view statistics by server or aggregated across servers. For example, applications running on Server1 vs. applications running on one or more servers. The Monitoring Tree also provides some control operations such as starting or stopping servers or applications. Security Data Tree: an editable overview of the users and groups in the default authentication provider of the security realm. You add, edit, and delete users and groups. Property List Property List Editor: an editable list of key-value pairs. WDT Model File WDT Model Tree: an editable representation of a WDT model for a WebLogic Server domain. WDT Composite Model WDT Composite Model Tree: a read-only representation of multiple, merged WDT model files for a WebLogic Server domain. Navigate the domain In the WebLogic Remote Console, you can travel through the structure of a WebLogic domain in multiple ways:\nNavigation Tree - expand the nodes and drill down until you reach the information you\u0026rsquo;re interested in.\nBreadcrumbs - review the hierarchical path of your current page and jump back or across to a related page in a different perspective. For example, from Domain/Servers in the Edit Tree, you can jump to Environment/Servers in the Monitoring Tree from the breadcrumb trail.\nSearch - enter a search term in the bar and see all the beans that match your search term. You can find previous searches in the Recent Searches node at the bottom of the Navigation Tree. Searches and search history are only performed within a perspective and provider.\nTool bar icons These icons appear along the top of the content pane:\n: Home - returns you to the provider home page with its list of perspectives\n: Landing page - returns you to the landing page of the current perspective\n: Navigation History - displays a menu with a list of clickable links to the pages you have visited. This history is perspective-scoped.\n: Help - shows reference information about the attributes displayed on the page.\n: Reload - reloads the form or table once if no auto reload interval is set. This icon changes to active () when the reload interval is set. Click the icon to toggle the auto reload on and off.\nAuto Reload Interval - sets or clears a specified time interval, in seconds, for automatic reload of the form or table. If you select a different tab, or move to another page, automatic page reload stops.\n/ : Shopping Cart - indicates the status of changes to an Administration Server. A full shopping cart icon () indicates pending changes to the domain. Click to view, discard, or commit the changes.\nCustomizable tables You can choose which columns to show or hide in tables so you can focus on the important details and ignore the irrelevant ones.\nClick the Customize Table option that appears above all tables in the WebLogic Remote Console to view a list of all the possible columns you can add to the table and see information for. Move the columns back and forth between Available Columns and Selected Columns until you\u0026rsquo;ve assembled a set of columns that works for your needs and then, click Apply.\nTo return the table to its default set of columns, click Reset.\nThe list of options under Available Columns changes depending on the table; not all columns are applicable to all tables. Additionally, any changes to table columns will apply to that specific table across all applicable providers - if you change the table columns for Server Templates in wdt-model_1, those changes will also affect the Server Templates table in wdt-model_2 and admin-server_1 (Configuration Tree). Changes will also persist after you stop and start the WebLogic Remote Console.\nFind help The WebLogic Remote Console provides several types of online help on each page.\nUse the ? icon to the left of each field to access summary and detailed help for the field. If you hover over the ?, a summary help description displays. Click the ? icon to display a more detailed help description, if available. Click the ? icon in the top right of the content pane to toggle the view of the reference information for all of the fields displayed on the page. Supplemental customization While you should perform all configuration of the WebLogic Remote Console from within its graphical user interface, occasionally there are circumstances where that\u0026rsquo;s not possible. In those cases, you can view some of the data files upon which the WebLogic Remote Console builds its customizations.\nThese files are located in the following directories:\nLinux: $HOME/.config/weblogic-remote-console/ macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/ Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\ File name Purpose auto-prefs.json Describes the user interface of the WebLogic Remote Console, including its dimensions, projects and providers. config.json Describes the connection settings for the WebLogic Remote Console. You will need to create this file manually. See Customize connection settings for more information. dashboards.json Records the details of existing dashboards. See Generate dashboards for more information. out.log Collects log entries for the current session of the WebLogic Remote Console. There is also an out-1.log file which holds a copy of the previous session\u0026rsquo;s log entries. See Check log files for more information. recent-searches.json Lists the search terms for any searches that you\u0026rsquo;ve executed. See Search for more information. table-customizations.json Describes any table customizations you\u0026rsquo;ve saved. See Customizable tables for more information. If you introduce an error into one of these files, it may affect the behavior of the WebLogic Remote Console and you may need to wipe or delete the file to recover. The WebLogic Remote Console will lose all saved data for that file, resetting it to its defaults. For example, if you have to erase dashboards.json, all your dashboards will be deleted.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/reference/faqs/",
	"title": "Frequently asked questions",
	"tags": [],
	"description": "Frequently asked questions about the WebLogic Remote Console",
	"content": "This section provides answers to frequently asked questions about the WebLogic Remote Console.\nCan I connect the WebLogic Remote Console to domains running in WebLogic on Oracle Cloud Infrastructure? Yes, you can. First, make sure that the domain\u0026rsquo;s administration server is publicly accessible so the WebLogic Remote Console can establish a connection to the administration server. Then, in the WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nCan I connect the WebLogic Remote Console to domains running on other cloud providers such as Amazon Web Services, Google Cloud, Microsoft Azure and so on? Yes, you can connect to other cloud providers. You\u0026rsquo;ll need to make sure the domain\u0026rsquo;s administration server is publicly accessible to allow a connection between the WebLogic Remote Console and the cloud provider. Then, in the WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nVisit your cloud providers\u0026rsquo; documentation for more specific instructions on how to expose the endpoint of the WebLogic Server.\nCan I connect the WebLogic Remote Console to domains using the WebLogic Kubernetes Operator? Yes. For details on how to set up access to WebLogic Server domains running on Kubernetes, see Use the WebLogic Remote Console in the WebLogic Kubernetes Operator User Guide.\nCan I use both the WebLogic Remote Console and the WebLogic Server Administration Console? Yes. The WebLogic Remote Console uses the same configuration mechanisms used by the WebLogic Server Administration Console. You can make changes to your domain using any of these methods: Administration Console, WebLogic Remote Console, JMX, REST, WLST, and so on - they\u0026rsquo;re all compatible. However, it\u0026rsquo;s not recommended that you use multiple methods simultaneously since that may cause conflicts and unexpected behavior.\nWhich versions of WebLogic Server can I use with WebLogic Remote Console? You can use WebLogic Remote Console with WebLogic Server 12.2.1.3, 12.2.1.4, or 14.1.1.0.\nDo I need to upgrade my installation of WebLogic Remote Console whenever I upgrade or patch WebLogic Server? It\u0026rsquo;s recommended that you keep WebLogic Remote Console up to date as it is updated to work with the latest versions of WebLogic Server, including patches. However, it\u0026rsquo;s not required. Older versions of the WebLogic Remote Console will continue to work with newer versions WebLogic Server.\nNote that if new fields or new beans were added as part of the WebLogic Server update, outdated versions of the WebLogic Remote Console will not detect those fields.\nAre there any security risks associated with the WebLogic Remote Console? No, the WebLogic Remote Console accesses the WebLogic Administration Server through its standard REST API, which is available out of the box. However, since your desktop will be accessing potentially sensitive data, you need to make sure it is protected and secure - just like the WebLogic Administration Console.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/setup/",
	"title": "Get started",
	"tags": [],
	"description": "Installing and basic configuration for the WebLogic Remote Console",
	"content": "You can install and run the WebLogic Remote Console as either a desktop application or a browser application. Both options are valid choices but they function slightly differently.\nWe recommend that you use the desktop application over the browser application whenever possible. Certain features, such as editing WDT model files, work more effectively in the desktop application.\nReview system requirements The WebLogic Remote Console supports the following platforms:\nLinux (64 bit only) Ubuntu 14.04 and later Fedora 24 and later Oracle Linux 8 and later Debian 8 and later macOS macOS 10.11 (El Capitan) or later (64-bit Intel) Windows (64 bit only) Windows 7 and later Additionally, the WebLogic Remote Console browser application requires the use of a modern internet browser:\nApple Safari Google Chrome Microsoft Edge Mozilla Firefox The WebLogic Remote Console desktop application is based on the Electron framework.\nInstall the WebLogic Remote Console Desktop application Uninstall any previous versions of the WebLogic Remote Console from your computer. Download the WebLogic Remote Console. Go to https://github.com/oracle/weblogic-remote-console/releases and download the installer applicable for your operating system. Run the installer. Optional: Install the WebLogic Remote Console extension in the WebLogic Server domain. The WebLogic Remote Console extension adds additional functionality when using the WebLogic Remote Console. Create a management-services-ext directory under the domain home. Download the console-rest-ext-2.0.war from https://github.com/oracle/weblogic-remote-console/releases and save it inside the management-services-ext directory you created in the previous step. If you previously downloaded an earlier version of the extension, delete it and replace it with the latest version. Reboot the Administration Server if it is already running. Launch the WebLogic Remote Console application. Browser application Your computer must have Java SE 11 or later installed. To check your Java version, enter java -version at the command line.\nDownload the WebLogic Remote Console. Go to https://github.com/oracle/weblogic-remote-console/releases and download console.zip. Extract the ZIP archive to a directory of your choice. Once its contents are extracted, it creates a console directory that includes: The console executable file console.jar The libraries required to use the console in the libs subdirectory The console extension, console-rest-ext-2.0.war, that you install in the WebLogic Server domain Optional: Install the WebLogic Remote Console extension in the WebLogic Server domain. The WebLogic Remote Console extension adds additional functionality when using the WebLogic Remote Console. Create a management-services-ext directory under the domain home. Download the console-rest-ext-2.0.war from https://github.com/oracle/weblogic-remote-console/releases and save it in the management-services-ext directory you created in the previous step. If you previously downloaded an earlier version of the extension, delete it and replace it with the latest version. Reboot the Administration Server if it is already running. Open a command window and on the command line, enter java -jar \u0026lt;console_home\u0026gt;/console.jar where \u0026lt;console_home\u0026gt; is the directory where you unzipped the installer. Open a browser window and enter http://localhost:8012 in the address bar. Connect to a provider The WebLogic Remote Console supports providers that connect to WebLogic Server Administration Servers and providers that edit WebLogic Deploy Tooling (WDT) model files and property lists.\nOpen the WebLogic Remote Console in the desktop application or the browser.\nAdd a provider from the Startup Tasks dialog box. Or, if it doesn\u0026rsquo;t appear, expand the Kiosk and click â‹®. The following providers are available:\nAdd Admin Server Connection Provider (the Administration Server must be running) Add WDT Model File Provider Add WDT Composite Model File Provider Add Property List Provider Create Provider for New WDT Model File Create Provider for New Property List See Provider types for more information.\nIn the desktop application, you can organize providers into Projects that persist when you close and reopen the application. See Projects for more information.\nAdd more providers to the project. Click â‹® beside the project name and select a provider type.\nSelect a provider from the Kiosk.\nStart reviewing or editing the domain configuration.\nNext steps Familiarize yourself with the WebLogic Remote Console. Edit your providers. Customize your connection settings. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/projects/",
	"title": "Projects",
	"tags": [],
	"description": "How to connect to a WebLogic domain or deploy tooling model.",
	"content": "A project is a group of providers connections to WebLogic Administration Servers, WebLogic Deploy Tooling (WDT) models, WDT composite models, or property lists.\nCreate a project Open File \u0026gt; New Project.\nEnter a name for the project and click OK. The new project will appear in the Kiosk. Next, you\u0026rsquo;ll add a provider to the project.\nExpand the Kiosk and beside the project name, click â‹®. Select one of the following options to add provider:\nAdd Admin Server Connection Provider Add WDT Model File Provider Add WDT Composite Model File Provider Add Property List Provider Create Provider for New WDT Model File Create Provider for New Property List Visit Provider types for more information on each of the providers.\nFill in the required details.\nClick OK to save add the provider to your project.\nAdd more providers to your project.\nYou can add as many providers to a project as you want. You can also create multiple projects to intelligently organize providers as needed. Furthermore, you can add the same providers into different projects if you need to.\nIf you plan to edit WDT model files, it\u0026rsquo;s recommended that you use the desktop application over the browser.\nSwitch between projects You can create multiple projects in the WebLogic Remote Console, each with different domain connections or WDT model files, or both.\nTo switch to another project, open the File menu and select Switch to project. Choose the project you want to switch to.\nEdit a project You can edit a project and its connections at any time.\nTo add connections to a project, expand the Kiosk and click â‹®.\nTo rename a project, open the File menu and select Rename current-project.\nTo edit the details of a connection, expand the Kiosk and select the icon beside the connection you want to edit.\nExport a project If you\u0026rsquo;re using the WebLogic Remote Console across several computers, exporting a project is a convenient way to share a project across multiple computers.\nIf your project contains a WDT model file, make sure the location of the WDT model file is accessible to all the computers where this project will be imported to.\nCreate a project with all the desired connections. In the Kiosk, click â‹® and select Export Providers as Project. Enter a name for the exported project. This is the name that will be used when it is imported into another WebLogic Remote Console instance. Enter a name for the file of the exported project. Click OK and choose a file location to save the exported project file. WebLogic Remote Console creates a JSON file with the project details that you can import into other instances of WebLogic Remote Console\nImport a project You can import the project details of a previously created project to rapidly ramp up productivity in a new installation of WebLogic Remote Console.\nExport a project and save the file to the computer where you want to import it. On the computer where you want to import the file, start WebLogic Remote Console. Open the Kiosk menu and click â‹®. Select Import Project. Click and browse to the exported project file. Click Import. The imported project will automatically become the current project loaded in the WebLogic Remote Console.\nDelete a project To delete a project, open the File menu and select Delete Project. Choose the project you want to delete.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/providers/",
	"title": "Provider types",
	"tags": [],
	"description": "The different provider types available to configure in the WebLogic Remote Console",
	"content": "Provider types The WebLogic Remote Console lets you manage a variety of WebLogic Server configuration tools, called providers. Each provider type offers a different approach for configuring your WebLogic Server domains.\nProvider Type Description Administration Server Add connections to WebLogic Administration Servers and edit domain configurations in real-time. An alternative to the WebLogic Administration Console. Property List Create and edit lists of key-value pairs. You can connect property lists to WDT model files as WDT variables to simplify the use of WDT model tokens. WDT Model File Create and edit abstract representations of WebLogic Server domains that you can use to quickly build live domains. WDT Composite Model File View the combined details of multiple WDT model files at once. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/",
	"title": "User guide",
	"tags": [],
	"description": "Basic usage of the WebLogic Remote Console",
	"content": "User Guide The User Guide provides detailed information about using the WebLogic Remote Console.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/providers/administration-server/",
	"title": "Administration Servers",
	"tags": [],
	"description": "How to configure WebLogic Administration Servers in the WebLogic Remote Console",
	"content": "The WebLogic Remote Console can connect directly to a WebLogic Administration Server to view and edit its domain, much like the WebLogic Server Administration Console, though there are some differences.\nYou can save the connection details for multiple WebLogic Administration Servers, making it easy to switch between domains with a click.\nConnect to a WebLogic Administration Server Start the WebLogic Administration Server. Expand the Kiosk and beside the project name, click â‹®. Select Add Admin Server Connection Provider. Enter a name for the Administration Server connection. This is the name that will appear in the Project list of providers so you can identify which provider youâ€™re working on. Enter a username and password for a user account with editing privileges in the selected Administration Server. As with the Administration Console, your management capabilities will be limited depending on the level of access granted to your user account. See Understand access discrepancies for more information. You can choose to have multiple connections to the same Administration Server with different users. Enter the URL for the Administration Server. Click OK to connect the WebLogic Remote Console to the WebLogic Administration Server. The WebLogic Remote Console is now connected to a WebLogic Administration Server. You can make changes to the domain as desired.\nEdit a WebLogic Administration Server Editing a domain in the WebLogic Remote Console is similar in process to the Administration Console. When you start editing a domain, a configuration lock is created that blocks other users from making simultaneous changes. Once you\u0026rsquo;re satisfied with your changes, you can activate these changes and perpetuate them to the Administration and Management Servers.\nCertain areas and actions in the WebLogic Remote Console are hidden from non-administrations. For example, users with the Operator role cannot see the Edit Tree at all. For more information on what each user role can (or cannot) access, see Understand Access Discrepancies.\nExpand the Kiosk and select the Administration Server you want to edit. Click the Edit Tree perspective and make your changes to the domain configuration. Fields marked with require a server restart. Click Save on every page after making your changes. If you have the extension installed, expand the Kiosk and select Shopping Cart to view your changes. Commit your changes. In the upper right corner of the content pane, click and then Commit Changes. Restart your server if necessary. Check if any servers require a restart on the Monitoring Tree perspective \u0026gt; Environment \u0026gt; Servers page. You can restore fields to their default value. Right-click on a field and click Restore to default.\nShopping cart The Shopping Cart (equivalent to the Change List in the WebLogic Server Administration Console) holds all the pending changes for the current session in the WebLogic Remote Console. In the shopping cart, you can see if any changes are pending, commit those changes or discard them entirely.\nIf you installed the console extension, console-rest-ext-2.0.war, you can also see the specific changes you\u0026rsquo;ve made and the status of the lock in the Change Manager. If you need to undo a change, you must discard all shopping cart contents or manually revert the change in the Edit Tree perspective.\nThe configuration change lock does not prevent you from making conflicting configuration edits using the same administrator user account. For example, if you obtain a configuration change lock in the WebLogic Remote Console, and then use the Administration Console or WebLogic Scripting Tool (WLST) with the same user account, you will access the same edit session that you opened in the WebLogic Remote Console and you will not be blocked from making changes with the other tools.\nWe recommend against making changes using multiple tools because when one of the sessions activates their changes, it releases the lock and the other session will not be able to save or activate their changes.\nSome changes can be activated immediately (dynamic) while other changes require a server start to activate (non-dynamic). When you need to activate non-dynamic changes, navigate to the Environment \u0026gt; Servers node in the Monitoring perspective to see which servers need a restart.\nEdit the connection details of a WebLogic Administration Server Expand the Kiosk and beside the WebLogic Administration Server connection that you want to edit, click the icon. Edit the details of the WebLogic Administration Server. You can change its name in WebLogic Remote Console, switch user accounts or update the URL. Click OK to save your changes. View the connection details of a WebLogic Administration Server It\u0026rsquo;s easy to view the details of a WebLogic Server Connection.\nExpand the Kiosk and beside the WebLogic Administration Server, click the icon. A list of connection details will appear, including:\nProvider ID Domain Name Domain URL Domain Version Username Role Delete a connection to a WebLogic Administration Server This will only delete the WebLogic Remote Console access to the WebLogic Administration Server. The domain itself will be unaffected.\nExpand the Kiosk and beside the WebLogic Administration Server, click the icon. Control Operations The WebLogic Remote Console provides control operations for the Administration Server in the Monitoring perspective.\nChange server state Server state indicates the specific condition of a server in the life cycle management.\nExpand the Kiosk and select a WebLogic Administration Server connection. Choose the Monitoring perspective from the home page. Go to Environment \u0026gt; Servers Choose the action for the server(s): Start Resume Suspend Shutdown Restart SSL Choose when to initiate the action: When work completes Force shutdown now In the dialog box, move the servers whose state you want to change from Available to Chosen. Initiate the action. Start or stop an application Expand the Kiosk and select a WebLogic Administration Server connection. Choose the Monitoring perspective from the home page. Go to Deployments \u0026gt; App Deployment Runtimes. Choose the action for the application: Start Stop In the dialog box, move the applications whose state you want to change from Available to Chosen. Initiate the change. Create MBeans The WebLogic Remote Console includes simplified wizards for deploying applications and creating JDBC system resources.\nIn most other cases, when you create a new MBean on a page, you are prompted to fill in a few key properties, such as Name, then click Create. Unlike the WebLogic Server Administration Console, the WebLogic Remote Console does not guide you through configuring other properties that you typically need to complete the configuration. Instead, it displays the new bean\u0026rsquo;s pages where you can click through the tabs to finish configuring the bean.\nWhen you configure a bean property that references another bean, you must first create the other bean. For example, if you want to assign Server1 to Cluster1, you need to create Cluster1 first, unlike in the WebLogic Server Administration Console where you can choose to create Cluster1 during server creation.\nManaging users and groups You can easily manage the WebLogic Server users and groups that are configured as part of the default authentication provider (WebLogic Authentication Provider) within a security realm. Only the default authentication provider is supported. If you\u0026rsquo;re not using the default authentication provider, you\u0026rsquo;ll need to manage its users and groups through its own external tools.\nUsers and groups are managed in the Security Data Tree perspective. You must be logged in as a user with the Admin role and have the WebLogic Remote Console extension installed to access this perspective. See Install the WebLogic Remote Console for instructions.\nAny changes you make to users and groups are immediate - you don\u0026rsquo;t need to commit or reboot the server to apply your changes.\nCreate a user In the Security Data Tree perspective, expand Realms. Select the Security Realm to which you want to add users. Expand the Authentication Provider node and then select the authentication provider to which you want to add users. Expand Users and click New. Enter a Name, Description and Password for this user. User names must be unique in the security realm and passwords must be eight characters or longer. Click Create. Create groups In the Security Data Tree perspective, expand Realms. Select the Security Realm to which you want to add groups. Expand the Authentication Provider node and then select the authentication provider to which you want to add groups. Expand Groups and click New. Enter a Name and Description for this group. Group names must be unique in the security realm. Click Create. Edit users In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Authentication Providers \u0026gt; providerName \u0026gt; Users. Click the user that you want to edit. Move through the various tabs to update the properties of the user. You cannot edit the name of a user - you must delete and create a new user. You can add users to groups. Under the Membership tab, select any Available group to which you want to add the user and move them over to Chosen. Click Save. Edit groups In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Authentication Providers \u0026gt; providerName \u0026gt; Groups. Click the group that you want to edit. You can modify the group description or, under the Membership tab, nest the current group under other groups. You cannot edit the name of a group - you must delete and create a new group. Click Save. Delete users In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Authentication Providers \u0026gt; providerName \u0026gt; Users. Beside the user that you want to delete, click the trash icon . Delete groups Deleting a group will not delete the users within that group.\nIn the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Authentication Providers \u0026gt; providerName \u0026gt; Groups. Beside the group that you want to delete, click the trash icon . "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/develop/contribute/",
	"title": "Contribute to WebLogic Remote Console",
	"tags": [],
	"description": "How to contribute to the WebLogic Remote Console.",
	"content": "We welcome contributions to this repository from anyone.\nIf you want to submit a pull request to fix a bug or enhance an existing feature, please first open an issue and link to that issue when you submit your pull request.\nIf you have any questions about a possible submission, feel free to open an issue too.\nContributing to the WebLogic Remote Console repository Pull requests can be made under The Oracle Contributor Agreement (OCA).\nFor pull requests to be accepted, the bottom of your commit message must have the following line using your name and e-mail address as it appears in the OCA Signatories list.\nSigned-off-by: Your Name \u0026lt;you@example.org\u0026gt; This can be automatically added to pull requests by committing with:\ngit commit --signoff Only pull requests from committers that can be verified as having signed the OCA can be accepted.\nPull request process Fork this repository Create a branch in your fork to implement the changes. We recommend using the issue number as part of your branch name, e.g. 1234-fixes Ensure that any documentation is updated with the changes that are required by your fix. Ensure that any samples are updated if the base image has been changed. Submit the pull request. Do not leave the pull request blank. Explain exactly what your changes are meant to do and provide simple steps on how to validate your changes. Ensure that you reference the issue you created as well. We will assign the pull request to 2-3 people for review before it is merged. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/develop/",
	"title": "Development",
	"tags": [],
	"description": "Entry point for developer information on the WebLogic Remote Console",
	"content": "Development With the open source nature of the WebLogic Remote Console, you are free and encouraged to alter and adapt the source code of the console to suit your needs.\nNote that any changes you implement may affect the functionality of the WebLogic Remote Console in unexpected ways.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/reference/known_issues/",
	"title": "Known issues",
	"tags": [],
	"description": "Known issues and limitations for the WebLogic Remote Console",
	"content": "This page lists the limitations and known issues (and their workarounds if available) of the WebLogic Remote Console.\nLimitations In the current release of WebLogic Remote Console, you are unable to:\nManage the security data from WebLogic Server security providers that is external to the WebLogic configuration, such as users, groups, roles, policies, credential maps, and so on.\nRecord WLST scripts while you configure WebLogic Server using the WebLogic Remote Console.\nJNDI tree viewer\n(On macOS) Run multiple WebLogic Remote Console applications at a time. This does not include the WebLogic Remote Console instance running within the WebLogic Kubernetes Toolkit UI - you can run the WebLogic Remote Console and WKT UI simultaneously.\nMinimum web browser viewport size Issue The font sizes in the WebLogic Remote Console are governed by the Oracle JET Redwood style. They are larger than the ones used in the WebLogic Server Administration Console, and the entry fields are a bit larger in height and width. As a result, the overall viewing area inside your web browser\u0026rsquo;s viewport (the portion where all the web content appears), needs to be of a minimum size to have an enjoyable experience using the WebLogic Remote Console.\nWe have determined that the recommended minimum web browser viewport size is 1592 x 900 pixels. If you resize your web browser to be smaller than 1592 x 900 pixels, then scroll bars appear when the mouse hovers over certain areas. However, some form data may still not be visible until the web browser\u0026rsquo;s viewport height is at least 900 pixels.\nWorkaround Ensure that the browser viewport is set to the recommended minimum. If those values are not available, you can also adjust the Zoom setting to 80%.\nLimited MBean property support The WebLogic Remote Console includes the vast majority of the MBean properties that the WebLogic Server Administration Console supports. However, because of limitations in the WebLogic REST API, some are missing, including some that are deprecated. If you notice that there is an MBean property that you require that is not available in the WebLogic Remote Console, please let us know.\nUnable to reorder collections such as security providers Issue There are separate lists for each type of security provider (such as authentication providers, role mapping providers, authorization providers, and so on). When you have more than one security provider in a list, WebLogic Server invokes them in the order that they appear in the list. Sometimes the order is important (for example, you want the server to try the local fast authentication provider before the slow remote one).\nCurrently, the WebLogic Remote Console doesn\u0026rsquo;t explicitly let you reorder the lists.\nWorkaround To reorder providers, you can delete and recreate them. For example, if the list of authentication providers has A then B, and you want to switch it to B then A, delete A and recreate it. New providers are always added to the end of the list.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/dashboards/",
	"title": "Generate dashboards",
	"tags": [],
	"description": "How to generate dashboards",
	"content": "Dashboards let you quickly assess the state of your WebLogic Server domain. With dashboards, you can assemble a set of criteria (or \u0026lsquo;filters\u0026rsquo;) and WebLogic Remote Console will match them against any bean in your domain and return the results. Because you control the filters of the dashboard, you control what you see and can determine the importance of the results, updating the dashboard as needed.\nDashboards are only available for Administration Server providers (in the Monitoring Tree perspective).\nFilters Filters in dashboards are the criteria that you use to curate your results. Each filter consists of a name or property from the domain, a value, and an operator.\nWebLogic Remote Console limits which filters are available to a dashboard depending on where you are in the WebLogic Remote Console. For example, if you create a dashboard from the Environment/Servers node, the property filters are based on the properties in the columns of the Servers table, whereas the property filters in the Deployments/Application Runtimes node are based on the properties in the columns of the Application Runtime table.\nValues may be in text, numeric or Boolean form depending on the name or property. You cannot add a text value into a numeric filter. Boolean values are displayed as toggles. Set the toggle to On for True, Off for False.\nOperators control how a value is assessed. You can filter values using the following operators: Any, Equals, Not Equals, Contains, Less Than, Less Than or Equals, Greater Than, Greater Than or Equals. Only the operators that are applicable to a name or property appear as options. By default, all filters are set to Any to provide the broadest search parameters.\nYou only need to add values to the filters that matter to your dashboard. Additionally, filters are cumulative - beans must match ALL of the defined filters to be returned as a result.\nCreate a dashboard In the Monitoring Tree perspective of an Administration Server provider, expand a node in the Navigation Tree related to the type of content you want to see. For example, if you want to learn about servers, open the Environment/Servers node. Click New Dashboard. Enter a name for your new dashboard and then begin specifying the filters that will populate the results of the dashboard. Click Create to generate the dashboard. Click Customize Table to show or hide relevant columns in the dashboard.\nClick on an entry in the View table to open that bean in the Content Pane.\nAny changes to beans will not be reflected in the dashboard until you refresh the page. Click Reload to update the results. You can also click Auto Reload Interval to set the dashboard to regularly reload and update the results.\nYou can return to this dashboard at any time. Previously created dashboards appear under the Dashboards node in the Navigation Tree.\nEdit a dashboard In the Navigation Tree, expand Dashboards and select the dashboard that you want to edit. In the Content Pane, select the Edit tab. Update the filters to match your new requirements. Click Save. Delete a dashboard In the Navigation Tree, select Dashboards. Beside the dashboard that you want to delete, click the delete icon. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/providers/property-list/",
	"title": "Property lists",
	"tags": [],
	"description": "How to configure property lists in the WebLogic Remote Console",
	"content": "Property lists are an editable set of key-value pairs.\nYou can add property lists to WDT model files as WDT variables, which streamline the configuration of WDT model files. Once connected to a WDT model file, you can insert a property into the WDT model file as a WDT model token and edit token values from within the property list.\nWe recommend that you use the desktop application over the browser application when working with property list files.\nCreate a new property list Expand the Kiosk and beside the project name, click â‹®. Select Create Provider for New Property List. Enter a name for the property list provider. This is the name that will appear in the Project list of providers so you can identify which provider you\u0026rsquo;re working on. Enter a name for the property list file in the Property List Filename field. Include .properties or .props at the end of the file name. Click and browse to the directory where you want to save the new property list file. Click OK to create the file. Upload an existing property list If you\u0026rsquo;ve already created a property list file, you can upload it to WebLogic Remote Console where you can continue to edit it.\nProperty lists are generally .properties or .props files though the WebLogic Remote Console supports other text file formats. In any case, each key-value pair must be on a new line and names and values must be separated by =, :, or spaces. For example, key=value / key:value / key value. See Properties (JDK 17) for more information on Java property list formatting.\nExpand the Kiosk and beside the project name, click â‹®. Select Add Property List Provider. Enter a name for the property list provider. This is the name that will appear in the Project list of providers so you can identify which provider you\u0026rsquo;re working on. Click and browse to the property list file. Click OK to upload the file. Edit a property list The browser application behaves differently than the desktop application. While changes to the property list file are still saved automatically as you move around the console, they are not saved to your computer. This means that once you\u0026rsquo;re satisfied with your changes, you must click Download File to download the updated property list file to your computer.\nDo not refresh the browser page or you will lose all your changes.\nIf the property list you edit is connected to a WDT model file as a WDT variable, any changes you make to a property name will not be reflected in the WDT model file. The WDT model file assumes you\u0026rsquo;ve added an entirely new property and the former WDT variable becomes a standalone WDT model token that\u0026rsquo;s not associated with the property list.\nExpand the Kiosk and select the property list you want to edit. Click Property List Editor and then the Properties node. Click the + in the table header row to add a new row to the table. Enter a new property name and property value. To delete a row, click beside the property row that you want to delete. You can also reorder the properties alphabetically (or reverse-alphabetically) by clicking the arrows in the title bar. Click Save Now (Download File in the browser application) to save your changes to the property list file. Delete a property list This will only remove the property list from the WebLogic Remote Console. The file will remain in the location designated on your computer. However, if you are using the browser application (and want to keep this property list file), make sure to download the file before deleting it in WebLogic Remote Console.\nIf you delete a property list that\u0026rsquo;s connected to a WDT model file, the WDT model file will remain unchanged but all WDT variables are converted to standalone WDT model tokens.\nExpand the Kiosk and beside the property list you want to delete, click the icon. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/advanced-settings/",
	"title": "Customize connection settings",
	"tags": [],
	"description": "A description of the various settings you can configure when connecting with the WebLogic Remote Console.",
	"content": "You can customize the default connection settings of the WebLogic Remote Console by modifying its Java system properties.\nEdit Java system properties in the desktop application Edit Java system properties in the browser-based application Java system properties Some possible customizations:\nConnect to a WebLogic domain using SSL/TLS Specify a listen address for the WebLogic Remote Console host Change the network timeout settings for the server Disable host name verification in the connections to the WebLogic domain Set the SameSite cookie attribute if required for web browser support Connect to a WebLogic domain running on kubernetes Edit Java system properties in the desktop application If you installed the WebLogic Remote Console desktop application, you can edit a config.json file with your preferred settings before launching the application.\nThe config.json file is located in:\nLinux: $HOME/.config/weblogic-remote-console/config.json macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/config.json Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\config.json Any Windows file paths entered in config.json must be properly escaped. For example, enter C:\\Users\\Jane\\myTrust.jks as C:\\\\Users\\\\Jane\\\\myTrust.jks. You may need to create the config.json file manually.\nFor example, to set the WebLogic Remote Console to listen on a host other than localhost (IP address 127.0.0.1):\nIn the config.json file, enter:\n{\u0026#34;server.host\u0026#34;: \u0026#34;0.0.0.0\u0026#34;} Edit Java system properties in the browser-based application If you installed the WebLogic Remote Console browser version, you set the Java system properties at the command line whenever you launch the WebLogic Remote Console.\nFor example, to set the WebLogic Remote Console to listen on a host other than localhost (IP address 127.0.0.1):\nAt the command line, enter:\njava -Dserver.host=0.0.0.0 -jar \u0026lt;console_home\u0026gt;/console.jar Java system properties Property Default config.json System Property console.disableHostnameVerification false console.disableHostnameVerification -Dconsole.disableHostnameVerification console.enableSameSiteCookieValue false console.enableSameSiteCookieValue -Dconsole.enableSameSiteCookieValue console.valueSameSiteCookie Lax console.valueSameSiteCookie -Dconsole.valueSameSiteCookie console.readTimeoutMillis 20000 console.readTimeoutMillis -Dconsole.readTimeoutMillis console.connectTimeoutMillis 10000 console.connectTimeoutMillis -Dconsole.connectTimeoutMillis server.host 127.0.0.1 server.host -Dserver.host server.port 8012 server.port -Dserver.port javax.net.ssl.trustStore \u0026lt;java-home\u0026gt;/lib/security/jssecacerts or \u0026lt;java-home\u0026gt;/lib/security/cacerts javax.net.ssl.trustStore -Djavax.net.ssl.trustStore javax.net.ssl.trustStoreType jks javax.net.ssl.trustStoreType -Djavax.net.ssl.trustStoreType Connect to a WebLogic domain using SSL/TLS If you specify HTTPS for the domain URL in the Connect to WebLogic Domain window, then the WebLogic Remote Console uses SSL/TLS to communicate with the WebLogic domain.\nThe SSL/TLS connection requires trust in the WebLogic domain, where the trust configuration is handled by the underlying JDK JSSE support. By default, the JDK uses the cacerts truststore provided with the JDK. If the WebLogic domain requires additional trust, separate trust, or is using the WebLogic demo trust (demotrust.jks), then you can use the JDK system properties when starting the Remote Console.\nYou can configure SSL/TLS trust with the JDK using one of these options:\nImport the required trust certificates into the cacerts truststore supplied with the JDK using the keytool command.\nUpdate the JDK Java system properties for JSSE support at the command line (browser only). For example:\njava -Djavax.net.ssl.trustStore=\u0026#34;/home/user/mytrust.jks\u0026#34; -Djavax.net.ssl.trustStoreType=\u0026#34;JKS\u0026#34; -jar \u0026lt;console_home\u0026gt;/console.jar In this command, \u0026lt;console_home\u0026gt; is the directory where you unzipped the installer.\nUpdate the JDK Java system properties for JSSE support in a properties file to configure the location and type of truststore (application only).\nCreate a file named config.json and save it in the applicable location for your operating system. Add the following properties. { \u0026#34;javax.net.ssl.trustStore\u0026#34;: \u0026#34;/home/user/mytrust.jks\u0026#34;, \u0026#34;javax.net.ssl.trustStoreType\u0026#34;: \u0026#34;JKS\u0026#34; } On Windows the path character \\ must be escaped, for example: { \u0026#34;javax.net.ssl.trustStore\u0026#34;: \u0026#34;C:\\\\Users\\\\user\\\\mytrust.jks\u0026#34;, \u0026#34;javax.net.ssl.trustStoreType\u0026#34;: \u0026#34;JKS\u0026#34; } Save your changes and open the Remote Console application. Specify a listen address for the WebLogic Remote Console host To connect to a WebLogic Remote Console that is not running on the same computer as the browser, you can specify non-default values for the Remote Console host and port using Java system properties. The process differs depending on whether you are using the Remote Console through console.zip or the desktop application.\nBrowser (console.zip) To specify a listen address when running console.zip:\nOn the host where the Remote Console is installed, open a command window.\nOn the command line, set these Java system properties when starting the Remote Console:\n-Dserver.host=\u0026lt;host-address\u0026gt; to have the Remote Console listen on a host other than localhost (IP address 127.0.0.1)\n-Dserver.port=\u0026lt;port-number\u0026gt; to have the Remote Console bind to a port other than 8012.\nFor example:\njava -Dserver.host=0.0.0.0 -Dserver.port=8092 -jar \u0026lt;console_home\u0026gt;/console.jar In this example, 0.0.0.0 specifies that the host is listening on all IP addresses on that computer and \u0026lt;console_home\u0026gt; represents the directory where you unzipped the installer.\nOn the local computer, open a browser window and enter:\nhttp://hostname:8092 In this example, hostname represents the computer where you started the Remote Console, and can be an IP address or a DNS name (such as myhost.example.com).\nWhen you connect to a Remote Console process running on a different computer, you risk exposing sensitive data over the network.\nIn the Connect to WebLogic Domain window, enter the Administrator user name, password, and the URL of the domain.\nWhen the Remote Console is not running on the same computer as the browser, the WebLogic domain URL must be accessible to the computer running the Remote Console process.\nDesktop application To specify a listen address when running the desktop application:\nOn the host where the Remote Console is installed, create a config.json file in the location applicable to your operating system.\nIn config.json, add the following properties, updating the values to reflect the hostname and port you want.\n{ \u0026#34;server.host\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;server.port\u0026#34;: \u0026#34;8092\u0026#34; } On the same computer, open a command window and enter the command applicable to your operating system:\nLinux: weblogic-remote-console --headless macOS: /Applications/WebLogic Remote Console.app/Contents/MacOS/WebLogic Remote Console --headless Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Local\\Programs\\weblogic-remote-console\\WebLogic Remote Console.exe --headless On your local computer, open a browser window and enter:\nhttp://hostname:8092 In this example, hostname represents the computer where you started the Remote Console, and can be an IP address or a DNS name (such as myhost.example.com).\nWhen you connect to a Remote Console process running on a different computer, you risk exposing sensitive data over the network.\nIn the Connect to WebLogic Domain window, enter the Administrator user name, password, and the URL of the domain.\nWhen the Remote Console is not running on the same computer as the browser, the WebLogic domain URL must be accessible to the computer running the Remote Console process.\nChange the network timeout settings for the server To change the defaults for the connection and read timeout settings used with a WebLogic domain from the Remote Console, change the following Java system properties:\nSet console.readTimeoutMillis=\u0026lt;millis\u0026gt; for the timeout when waiting on a response, Default: 20 seconds Set console.connectTimeoutMillis=\u0026lt;millis\u0026gt; for the timeout when waiting to connect, Default: 10 seconds For example:\njava -Dconsole.readTimeoutMillis=60000 -Dconsole.connectTimeoutMillis=30000 -jar \u0026lt;console_home\u0026gt;/console.jar In this example, \u0026lt;console_home\u0026gt; represents the directory where you unzipped the installer, and will result in the console waiting 60 seconds before giving up on a response from the WebLogic domain.\nor in config.json, add:\n{ \u0026#34;console.readTimeoutMillis\u0026#34;: \u0026#34;60000\u0026#34;, \u0026#34;console.connectTimeoutMillis\u0026#34;: \u0026#34;30000\u0026#34; } When changing network timeout settings, the primary impact will be the response time for Console threads, while the browser will show no data when a timeout occurs. Examples of where timeouts may happen include requests where WebLogic experiences longer initialization or execution times such as for runtime monitoring actions of servers.\nDisable host name verification in the connections to the WebLogic domain When using WebLogic demo trust to connect to the WebLogic domain, you may need to disable host name verification. Disabling host name verification causes the Remote Console to skip the verification check of ensuring that the host name in the URL to which a connection is made matches the host name in the digital certificate that the server sends back as part of the SSL connection.\nWe do not recommend using the demo certificates or turning off host name verification in production environments.\nTo disable host name verification, set the console.disableHostnameVerification property to true when required. The default is false.\nFor example, to connect to the domain using SSL/TLS with host name verification disabled:\njava -Dconsole.disableHostnameVerification=true -Djavax.net.ssl.trustStore=\u0026#34;/\u0026lt;path-to-wl-home\u0026gt;/server/lib/DemoTrust.jks\u0026#34; -Djavax.net.ssl.trustStoreType=\u0026#34;JKS\u0026#34; -jar \u0026lt;console_home\u0026gt;/console.jar or in the config.json file, add\n{ \u0026#34;console.disableHostnameVerification\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;javax.net.ssl.trustStore\u0026#34;: \u0026#34;/\u0026lt;path-to-wl-home\u0026gt;/server/lib/DemoTrust.jks\u0026#34;, \u0026#34;javax.net.ssl.trustStoreType\u0026#34;: \u0026#34;JKS\u0026#34; } On Windows, the path character \\ must be escaped, for example:\n{ \u0026#34;console.disableHostnameVerification\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;javax.net.ssl.trustStore\u0026#34;: \u0026#34;C:\\\\\u0026lt;path-to-wl-home\u0026gt;\\\\server\\\\lib\\\\DemoTrust.jks\u0026#34;, \u0026#34;javax.net.ssl.trustStoreType\u0026#34;: \u0026#34;JKS\u0026#34; } Set the SameSite cookie attribute if required for web browser support When the WebLogic Remote Console establishes a connection with the WebLogic Domain, a HTTP Cookie is established with the Web Browser session.\nFor security reasons, the SameSite attribute of the HTTP Cookie may need to be set for the Web Browser to accept the HTTP session Cookie. There are two settings that control the Remote Console behavior:\nSet console.enableSameSiteCookieValue=true to include the SameSite attribute in the HTTP Cookie, Default: false Set console.valueSameSiteCookie=\u0026quot;\u0026lt;value\u0026gt;\u0026quot; to specify the value of the SameSite attribute, Default: Lax For example:\njava -Dconsole.enableSameSiteCookieValue=true -jar \u0026lt;console_home\u0026gt;/console.jar or\n{\u0026#34;console.enableSameSiteCookieValue\u0026#34;: \u0026#34;true\u0026#34;} results in the HTTP session Cookie including the SameSite attribute with a value of Lax.\nConnect to a WebLogic domain running on kubernetes One of the benefits of the WebLogic Remote Console is the ability to connect to, and manage, a WebLogic Server domain running on Kubernetes. For details about how to setup access to WebLogic Server domains running on Kubernetes, see Use the Remote Console in the WebLogic Kubernetes Operator User Guide.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Chapter heading for reference material",
	"content": "Reference "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/reference/troubleshoot/",
	"title": "Troubleshoot issues",
	"tags": [],
	"description": "Common issues with simple troubleshooting steps.",
	"content": "This page provides guidelines to help troubleshoot console issues.\nCheck log files for errors The WebLogic Remote Console provides log files for both front and back end processes. For instructions on how to access these log files, see Check Log Files.\nDiagnose invalid WebLogic configuration issues Administration Server The WebLogic Remote Console catches most validation errors when you click Save, or when you commit the change using the shopping cart. If an error message displays, you need to identify and correct the problem that caused the error before you can activate the changes.\nIf you installed the console extension, you can view the contents of the shopping cart to see all of the pending changes. If you did not install the console extension, you can view the pending changes using the WebLogic Server Administration Console.\nIf the cause of the configuration error is not obvious:\nCheck the output from the WebLogic Remote Console and the domain Administration Server. Check the WebLogic Administration Server log. If you are unable to determine the cause of the error, cancel the edits and make the configuration changes again.\nWDT model files The WebLogic Remote Console does not validate WDT model file settings. As a result, the WebLogic Remote Console may accept changes or values that are invalid and which may present problems when the model file is used to build or update a domain. For example, adding integer values that are invalid or out of range for a specific setting, or removing a server or target but not updating the deployments to select a different server or target can cause issues.\nFor more information on acceptable values, refer to the WebLogic Deploy Tooling documentation.\nUnresponsive WebLogic Remote Console browser window If the WebLogic Remote Console running in the browser becomes unresponsive, verify that the Administration Server to which you are connected is still running. If the server is down, restart it, then refresh the browser window.\nError: Failure reading auto prefs If the WebLogic Remote Console desktop application shuts down unexpectedly with this error: Failure reading auto prefs, the auto-prefs.json file may be corrupted. auto-prefs.json saves state information about the WebLogic Remote Console and should not be modified by users unless it is corrupted.\nIf the file is corrupted, you can reset it but you will lose all data regarding your projects.\nTo reset the file, delete the auto-prefs.json file, then relaunch WebLogic Remote Console.\nauto-prefs.json is located in:\nLinux: $HOME/.config/weblogic-remote-console/auto-prefs.json macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/auto-prefs.json Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\auto-prefs.json The Edit Tree / start and stop buttons / create buttons / \u0026hellip; is missing Check the role of the user you used to log into the Administration Server. Only administrators have access to the full functionality of of WebLogic Remote Console. Users with other roles such as Deployers, Operators, or Monitors have limited access to areas outside the scope of their responsibility.\nFor an overview of what users in each role can view or do, see Understand Access Discrepancies.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/develop/alternative-logging/",
	"title": "Use an alternative logging configuration file",
	"tags": [],
	"description": "Instructions if you want to use an alternative logging.properties file",
	"content": "By default, the WebLogic Remote Console uses the logging.properties file inside the runnable/console-backend-server-{version}.jar file.\nIf the default configuration is sufficient, then you don\u0026rsquo;t need to do anything. However, if you want to tweak the logger configuration without regenerating the runnable/console-backend-server-{version}.jar file, you can pass the -Djava.util.logging.config.file=\u0026lt;path-to-logging.properties\u0026gt; Java system property when starting the console.\nFor example:\n-Djava.util.logging.config.file=runnable/etc/logging.properties If there is a problem using the specified path, then the logging.properties inside the runnable/console-backend-server-{version}.jar file is used. Either way, a log message is written to STDOUT stating which file was used:\nLogging configured using /gitlab-odx/weblogic/console-backend/runnable/etc/logging.properties or\nLogging configured using /logging.properties For examples of entries that can be placed into the custom logging.properties specified above, see the repository source file located at server/src/main/resources/logging.properties.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/develop/docs-contribute/",
	"title": "Contribute to the documentation",
	"tags": [],
	"description": "How to contribute to the WebLogic Server documentation",
	"content": "The WebLogic Remote Console documentation is produced using the Hugo static site generator. The webpages are created in markdown and hosted within the same repository as the WebLogic Remote Console. This makes it easy to suggest edits and improvements directly to the documentation.\nTo make an update to the documentation:\nClone the repository.\n$ git clone https://github.com/oracle/weblogic-remote-console Create a new branch.\n$ git checkout -b \u0026lt;your-branch\u0026gt; Make your changes to the documentation. Edit the markdown source files in hugo/staging/content.\nBuild the site locally to view your changes.\ncd hugo/staging hugo server -b http://localhost:1313/weblogic-remote-console View the local site at http://localhost:1313/weblogic-remote-console/.\nWhen you are ready to submit your changes, push your branch to origin and submit a pull request. Remember to follow the guidelines in the Contribute to the WebLogic Remote Console document.\nMake sure that you only check in changes from the hugo/staging/content area. Do not build the site and try to commit the static files.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/reference/security-warnings/",
	"title": "Review security issues",
	"tags": [],
	"description": "Review and resolve potential security issues in your WebLogic Server domain",
	"content": "WebLogic Server regularly checks domains to ensure they comply with its recommended security policies. If a domain does not meet the recommendations, a security warning is logged and displayed in the WebLogic Remote Console.\nYou must have the July 2021 Patch Set Update (PSU) for WebLogic Server applied to your domain to receive security warnings.\nWhen there are active security warnings in your domain, a banner with red text appears at the top of the WebLogic Remote Console window. Click the banner to see the current security warnings. You can also get to the security warnings pages through Monitoring \u0026gt; Environment \u0026gt; Domain Security Runtime.\nSecurity policy violations that can trigger a warning include outdated TLS versions, patch updates, and certificates, among others. To protect your domain, resolve these warnings as soon as possible. The same issue can affect multiple servers within your domain simultaneously so make sure to fix the issue on every affected server. Depending on the problem and its resolution, you may need to restart servers to clear the security warnings.\nSome level of security validation occurs in all domain modes but is most strict in secured production mode and least strict in development mode.\nIf you think certain policies don\u0026rsquo;t apply to your environment or are not feasible to implement with your business needs, you can disable individual security checks (with the exception of the minimum JDK version check).\nSee Review Potential Security Issues in Securing a Production Environment for Oracle WebLogic Server for more information.\nDo not rely on the Security Warnings Report alone to determine the security of your domain. While these security configuration settings cover a broad set of potential security issues, other security issues that do not generate warnings may still exist in your domain.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/upgrade/",
	"title": "Upgrade the WebLogic Remote Console",
	"tags": [],
	"description": "Instructions for upgrading the WebLogic Remote Console",
	"content": "We encourage you to stay up to date with the latest version of the WebLogic Remote Console since it is regularly updated to work with the latest versions of WebLogic Server, including patches.\nThe WebLogic Remote Console extension is periodically updated to incorporate new functionality. When upgrading the WebLogic Remote Console, check to see if there\u0026rsquo;s a newer version of the extension available so you can enjoy all of the newest features.\nDelete and replace any previous versions of the extension. Keeping multiple versions of the extension installed can lead to unexpected behavior.\nThe current version is console-rest-ext-2.0.war.\nDesktop application To check for newer versions of the desktop application, go to Help \u0026gt; Check For Updates. If a newer version is available, a dialog box will open where you can choose to go to the GitHub webpage for the latest WebLogic Remote Console release. If you\u0026rsquo;re already on the latest version, no further action is required.\nIf you regularly use config.json to customize the default connection settings of the WebLogic Remote Console, consider backing up config.json in a separate location to easily restore it following the upgrade.\nDownload the latest version from https://github.com/oracle/weblogic-remote-console/releases. Close the WebLogic Remote Console. Run the installer for the new version of WebLogic Remote Console. Follow the instructions at Install WebLogic Remote Console. If you\u0026rsquo;re on Windows and upgrading from 2.2.0 or earlier, the upgrade may fail when attempting to uninstall the previous version. To fix it, edit the PATH environment variable to ensure that %SystemRoot%\\system32 is the first entry that contains the find command, then retry the upgrade.\nBrowser-based application Download the latest version from https://github.com/oracle/weblogic-remote-console/releases. Stop the WebLogic Remote Console. Delete the console home directory (where you extracted the files from console.zip). Follow the installation instructions at Install WebLogic Remote Console. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/providers/wdt-model/",
	"title": "WDT model files",
	"tags": [],
	"description": "How to configure WDT model files in the WebLogic Remote Console",
	"content": "WDT metadata models are descriptions of a WebLogic Server domain configuration, generally written in YAML but occasionally JSON. These models are not connected to a live domain and you edit them \u0026lsquo;offline\u0026rsquo; before using the WebLogic Deploy Tooling (WDT) to build or modify live domains from the models.\nSee the WebLogic Deploy Tooling documentation for more information.\nWe recommend that you use the desktop application over the browser application when working with WDT model files.\nAdditionally, the WebLogic Remote Console assumes WDT model files are in YAML format. If you upload a file with no file extension, the WebLogic Remote Console will convert it to YAML format after you save your changes.\nCreate a new WDT model file Expand the Kiosk and beside the project name, click â‹®. Select Create Provider for New WDT Model File. Enter a name for the WDT model file provider. This is the name that will appear in the Project list of providers so you can identify which provider you\u0026rsquo;re working on. Enter a name for the WDT model file in the WDT Model Filename field. Include .yaml or .json at the end of the file name. Click and browse to the directory where you want to save the new WDT model file. Optional: Enable Use Sparse Template to create a WDT model file which does not contain any references to an Administration Server. Optional: Choose a property list provider from the WDT Variables dropdown list. If you add WDT variables to your WDT model file, you can update the variables in your WDT model file from a single location - the property list provider. If you don\u0026rsquo;t have a property list provider yet, you can edit the WDT model file settings later to add or change the associated WDT variables. See WDT Model Tokens for more information. Click OK to create the file. Upload an existing WDT model file If you\u0026rsquo;ve already created a WDT model file, you can upload it to WebLogic Remote Console where you can continue to edit it.\nExpand the Kiosk and beside the project name, click â‹®. Select Add WDT Model File Provider. Enter a name for the model in the Model Name field. This is the name that will appear in the Project list of providers so you can identify which provider youâ€™re working on. Click and browse to the WDT model file (a YAML or JSON file). Optional: Choose a property list provider from the WDT Variables dropdown list. If you add WDT variables to your WDT model file, you can update the variables in your WDT model file from a single location - the property list provider. If you don\u0026rsquo;t have a property list provider yet, you can edit the WDT model file settings later to add or change the associated WDT variables. See WDT Model Tokens for more information. Click OK to upload the file. Edit a WDT model file Expand the Kiosk and select the WDT model file you want to edit.\nClick WDT Model Tree and make your changes to the domain configuration. Make sure to click if you want to enter a model token.\nOption Description Default (unset) Restore field to its default value. Select Value Select a reference to a component that exists in the current WDT model file. Enter Value Enter a fixed value. Enter Model Token Enter a WDT model token. Enter Unresolved Reference Enter a reference to a component that does not exist in the current WDT model file but will exist at a later point. Select Model Token Variable Select a model token variable from the list of available options. The WDT model file must be connected with a property list to see this option. Create Model Token Variable Enter a Variable Name and Variable Value to create a new model token variable. New model token variables are added to the connected property list. The WDT model file must be connected with a property list to see this option. The WebLogic Remote Console auto-saves any changes you make to the WDT model file. You don\u0026rsquo;t need to commit changes to WDT model files.\nAfter you finish making changes, you can click Save Now (in the desktop application) or Download File (in the browser) to ensure all changes are saved and downloaded to your computer.\nThe browser application behaves differently than the desktop application. While changes to the WDT model file are still saved automatically as you move around the console, they are not saved to your computer. This means that once you\u0026rsquo;re satisfied with your changes, you must click Download File to download the updated WDT model file to your computer.\nDo not refresh the browser page or you will lose all your changes.\nIf you want to restore fields to their default value, right-click on a field and click Restore to default.\nWDT model tokens WDT model tokens are variables that you can use to replace fixed values in WDT model files. With WDT model tokens, WDT model files become more versatile - you can create a single WDT model file with model tokens and when you build a domain from it, you only need to update the model token values, rather than create multiple, static WDT model files.\nThere are several types of model tokens including variable tokens, file tokens, and so on. Model tokens follow this format: @@TYPE:KEY@@, where TYPE is the model token type and KEY is the variable value. For example, you can declare a variable token by entering @@PROP:ABCDE@@ into a field.\nSee WDT Model Tokens in the WebLogic Deploy Tooling documentation for more information.\nWDT variables WDT variables make it even easier to manage WDT model tokens in the WebLogic Remote Console. When you add WDT variables to your WDT model file, you create a link between the WDT model file and a property list. You can then pull in properties from the property list and use them as WDT model tokens. Then, when you want to update a property value, just open the associated property list and make your changes there.\nYou can use both standalone WDT model tokens and WDT variables in a WDT model file, but only one property list provider per WDT model file. Multiple WDT model files can use the same property list.\nDelete a WDT model file This will only remove the WDT model file from the WebLogic Remote Console. It will remain in the location designated on your computer. However, if you are using the browser application (and want to keep this WDT model file), make sure to download the file before deleting it in WebLogic Remote Console.\nThis will not delete any associated property list providers.\nExpand the Kiosk and beside the WDT model file, click the icon. Build a WebLogic Server domain When you\u0026rsquo;re satisfied with the properties of your WDT model file, you can transform it into a live WebLogic Server domain with WebLogic Deploy Tooling (WDT).\nSave the WDT model file in WebLogic Remote Console. Make a note of the location of the YAML or JSON file on your computer. If you haven\u0026rsquo;t already, download WDT from its GitHub repository. Follow the instructions in the WDT Documentation for building a domain from a model. If WDT reports an error when opening the WDT model file from WebLogic Remote Console, upgrade your WDT to the latest available version and try again.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/logging/",
	"title": "Check log files",
	"tags": [],
	"description": "Instructions for the accessing log files for the WebLogic Remote Console",
	"content": "You can inspect log files to ensure that the WebLogic Remote Console is functioning correctly.\nFront end To view the log file for issues related to the front end of the WebLogic Remote Console:\nDesktop application Open View \u0026gt; Toggle Developer Tools and select the Console tab.\nBrowser application In the browser tab with WebLogic Remote Console, open the Developer Tools and select the Console tab.\nBack end To view the log file for issues related to the back end of the WebLogic Remote Console:\nDesktop application Open the out.log file in a text editor. The out.log file is located in:\nLinux: $HOME/.config/weblogic-remote-console/out.log macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/out.log Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\out.log out.log maintains log entries for the current session of the WebLogic Remote Console. Once you close your current session, those log entries are moved to out-1.log (in the same folder as out.log). out-1.log only keeps a copy of the most recently ended session\u0026rsquo;s log entries, not all previous sessions.\nThis feature is not supported in the browser application.\nIf you want to change the default logging configuration for back end log files, see Use an alternative logging configuration file.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/setup/admin-console-diff/",
	"title": "Differences with the Administration Console",
	"tags": [],
	"description": "An overview of the differences with the Oracle WebLogic Administration Console.",
	"content": "The WebLogic Remote Console is distinct from the WebLogic Server Administration Console that is deployed as part of your WebLogic domain. As you explore the WebLogic Remote Console, you\u0026rsquo;ll notice key differences between the two consoles:\nThe user interface has been completely redesigned to conform to the Oracle Redwood theme included with Oracle JET. The configuration and monitoring runtime content is separated into separate pages in the Remote Console. In the WebLogic Server Administration Console, the configuration and runtime information is presented on one page. The Change Center is now expressed as a shopping cart. Instead of logging directly into the Administration Console deployed in a WebLogic domain, the Remote Console connects to the Administration Server in a WebLogic domain, with the credentials supplied by the user, using WebLogic REST APIs. For information on the WebLogic Server Administration Console, see the online help for 12.2.1.3, 12.2.1.4, or 14.1.1.0.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/providers/wdt-composite/",
	"title": "WDT composite models",
	"tags": [],
	"description": "How to manage WDT composite models",
	"content": "WDT composite models are read-only representations of multiple, merged WDT model files.\nCreate a WDT composite model Create or upload two or more WDT model files to the WebLogic Remote Console.\nExpand the Kiosk and beside the project name, click â‹®. Select Add WDT Composite Model File Provider.\nEnter a name for the WDT Composite Model. This is the name that will appear in the Project list of providers so you can identify which provider youâ€™re working on.\nClick inside the WDT Models field to see a list of available WDT Models. Select the WDT models that you want to appear in the WDT Composite Model in the order that you want them to appear. Only WDT model files in the current project will appear.\nPay attention to the order that the WDT model files are added - each subsequent WDT model file overrides the properties of the previous file. That is, if there are any conflicting properties, the properties of the last WDT model file added to the composite takes precedence.\nClick OK to create the WDT composite model.\nEdit a WDT composite model You can add or remove WDT model files from a WDT composite model as necessary.\nExpand the Kiosk and beside the WDT composite model file provider that you want to edit, click the icon. Edit the WDT composite model provider name if you want. Add or remove WDT model files. Click OK to save your changes. View the details of a WDT composite model It\u0026rsquo;s easy to check which WDT model files are contained within a WDT composite model.\nExpand the Kiosk and beside the WDT composite model file provider, click the icon. A list of the WDT models within that WDT composite model appears. The provider ID is also shown.\nDelete a WDT composite model This will not delete the individual WDT models contained within the WDT composite model.\nExpand the Kiosk and beside the WDT composite model file provider that you want to delete, click the icon. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/userguide/role-access/",
	"title": "Understand access discrepancies",
	"tags": [],
	"description": "How user roles affect what you see in the WebLogic Remote Console",
	"content": "The WebLogic Remote Console restricts what non-administrator users can see or do. Users with the roles Deployer, Monitor, or Operator are only shown the areas and features necessary for their role. These restrictions range from broad (hiding the entire Edit Tree perspective from users in the Monitor role) to narrow (hiding Create buttons on some pages). For full access to all the functionality of the WebLogic Remote Console, log in as an administrator.\nThe scope of these restrictions is too extensive to list comprehensively but the table below provides some examples.\nThese restrictions are based on the default security policies assigned to each role. If you customize the policies to add or remove access beyond the default, those changed permissions will not be reflected in the WebLogic Remote Console. It will continue to hide or show functionality based on the default security policies.\nSee Users, Groups, and Security Roles in Securing Resources Using Roles and Policies for Oracle WebLogic Server for more information. You may also find Default Security Policies for MBeans in WebLogic Server MBean Reference helpful.\nRole Limitations Administrator No limitations. Administrators have full access to all functionality in the WebLogic Remote Console. Deployer Can view but not edit server or domain configurations; Can modify areas related to application deployment including some JDBC and JMS resources. Monitor Read-only access to the WebLogic Remote Console. Operator Can start and stop servers but cannot see the Edit Tree perspective. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/",
	"title": "WebLogic Remote Console",
	"tags": [],
	"description": "An introduction to the WebLogic Remote Console.",
	"content": "WebLogic Remote Console The WebLogic Remote Console is a lightweight, open source console that you can use to manage domain configurations of WebLogic Server Administration Servers or WebLogic Deploy Tooling (WDT) metadata models.\nThe advantage of the WebLogic Remote Console is that it does not need to be colocated with the WebLogic Server domain. You can install and run the WebLogic Remote Console from one computer and connect to a domain running anywhere: a physical or virtual machine, in a container, Kubernetes, or in the Oracle Cloud. The WebLogic Remote Console connects to your domain using WebLogic REST APIs.\nAs for the WDT metadata models, they are descriptions of a WebLogic Server domain configuration, generally written in YAML but occasionally JSON. These models are not connected to a live domain and you edit them \u0026lsquo;offline\u0026rsquo; before using the WebLogic Deploy Tooling (WDT) to build or modify live domains from the models. See the WebLogic Deploy Tooling documentation for more information.\nSimply launch the desktop application and connect to an Administration Server or WDT model. Or, you can start the console in a browser and then connect to the Administration Server.\nThe WebLogic Remote Console is fully supported with WebLogic Server 12.2.1.3, 12.2.1.4, and 14.1.1.0.\nKey features of the WebLogic Remote Console The WebLogic Remote Console provides an alternative WebLogic Server administration GUI that enables REST-based access to WebLogic management information, in alignment with current cloud-native trends. When connected to a WebLogic domain or model using the WebLogic Remote Console, you can:\nConfigure WebLogic Server instances and clusters Create or modify WDT metadata models Create or modify property lists Configure WebLogic Server services, such as database connectivity (JDBC), and messaging (JMS) Deploy and undeploy applications Start and stop servers and applications Monitor server and application performance For detailed information on the fields and procedures of the WebLogic Remote Console, you can often reference the online help of the WebLogic Administration Console: 12.2.1.3, 12.2.1.4, or 14.1.1.0.\nHowever, although the WebLogic Remote Console and the WebLogic Administration Console are similar, there are differences between them. See Differences for details on how they differ.\nGet started Whether you choose the desktop application or the browser-based tool, it\u0026rsquo;s simple to install the WebLogic Remote Console and get up and running within moments. See Install WebLogic Remote Console for instructions.\nWhat\u0026rsquo;s new The current release of the WebLogic Remote Console is 2.4.1. This release was published in October 2022.\nNew features\nMinor bug fixes Upgrades JET to 13.0.0 Previous Releases Documentation for prior releases of the WebLogic Remote Console:\n2.4.0 2.3.0 2.2.0 2.1.0 2.0.0 1.1.0 Need more help? Have a suggestion? Come and say, \u0026ldquo;Hello!\u0026rdquo; We have a public Slack channel where you can get in touch with us to ask questions about using the WebLogic Remote Console or give us feedback or suggestions about what features and improvements you would like to see. We would love to hear from you. To join our channel, please visit this site to get an invitation. The invitation email will include details of how to access our Slack workspace. After you are logged in, please come to #remote-console and say, \u0026ldquo;hello!\u0026rdquo;\nRelated Projects WebLogic Deploy Tooling WebLogic Kubernetes Toolkit User Interface "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.1/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]