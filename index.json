[
{
	"uri": "https://oracle.github.io/weblogic-remote-console/develop/build-source/",
	"title": "Build from source",
	"tags": [],
	"description": "Instructions if you want to build WebLogic Remote Console from source",
	"content": "Prerequisites Before you can build the WebLogic Remote Console, you need to install the following software in your local build environment:\n Java SE 11+ Maven 3.6.1+ Node.js 18.0.0+ This download includes npm. Oracle JET 15.1.0 client libraries To install the required Oracle JET software, run npm install --location=global @oracle/ojet-cli@~15.1.0. On Linux and macOS, you will need to use sudo.  You can verify you\u0026rsquo;ve installed the correct versions of the listed software by running the following commands:\n java -version mvn --version node -v ojet --version Build from source  Clone the repository at https://github.com/oracle/weblogic-remote-console. Open a command window and navigate to the home directory of the cloned repository. Run mvn clean install. After the build finishes, confirm that /installer/target/console.zip was created. From the home directory of the repository, run the build-electron.sh script.  The WebLogic Remote Console executable file is created under /electron/dist/.\nTo install the WebLogic Remote Console, follow the instructions at Get Started.\n  It\u0026#39;s also possible, though not recommended, to use console.zip to run the WebLogic Remote Console as a browser application.   The browser application has significant limitations in terms of both security and functionality. It should be used for development purposes only.\n  After running mvn clean install, extract the contents of /installer/target/console.zip to a new directory. Open a command window and navigate to the new directory. Run java -jar console.jar. Open a browser window and enter http://localhost:8012 in the address bar.    "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/setup/console/",
	"title": "Explore the WebLogic Remote Console",
	"tags": [],
	"description": "An overview of the WebLogic Remote Console and its differences with the Oracle WebLogic Administration Console.",
	"content": "The WebLogic Remote Console offers an alternative option for administering WebLogic Server domains. It not only allows you to edit Administration Servers, but also build WebLogic Deploy Tooling (WDT) model files and property lists.\nWhile the WebLogic Remote Console shares many features with the Administration Console, its functionality is slightly different. See Differences with the Administration Console  for more information.\nBasic layout The WebLogic Remote Console presents a simple user interface that varies slightly across different providers. Broadly, it\u0026rsquo;s arranged into the following areas:\n  Providers drawer - manages the details of your current project, its providers and their connection details. You can also import and export project files here.\n  NavStrip - toggles the visibility of the navigation tree () and, in an Administration Server provider, permits movement between perspectives.\n  Navigation Tree - traverses the domain structure. Expand each top-level node to see more information. The Navigation Tree varies depending on your currently active provider.\n  Content Pane - explore and edit the properties of the active provider.\n  The WebLogic Remote Console automatically detects and matches the language of your operating system.\nNavigate the domain In the WebLogic Remote Console, you can travel through the structure of a WebLogic domain in multiple ways:\n  Navigation Tree - expand the nodes and drill down until you reach the information you\u0026rsquo;re interested in.\n  Breadcrumbs - review the hierarchical path of your current page and jump back or across to a related page in a different perspective. For example, from Domain/Servers in the Edit Tree, you can jump to Environment/Servers in the Monitoring Tree from the breadcrumb trail.\n  Search - enter a search term in the bar and see all the beans that match your search term. You can find previous searches in the Recent Searches node at the bottom of the Navigation Tree. Searches and search history are only performed within a perspective and provider.\n  Modify console preferences You can change the behavior of the WebLogic Remote Console to suit your needs.\n In the WebLogic Remote Console, go to File \u0026gt; Preferences. (WebLogic Remote Console \u0026gt; Application Preferences on macOS). Choose a section tab and make your changes as needed. Close the Preferences dialog box to apply your changes.  Tool bar icons These icons appear along the top of the content pane:\n  : Home - returns you to the provider home page with its list of perspectives\n  : Landing page - returns you to the landing page of the current perspective\n  : Navigation History - displays a menu with a list of clickable links to the pages you have visited. This history is perspective-scoped.\n  : Help - shows reference information about the attributes displayed on the page.\n  : Reload - reloads the form or table once if no auto reload interval is set. This icon changes to active () when the reload interval is set. Click the icon to toggle the auto reload on and off.\n  Auto Reload Interval - sets or clears a specified time interval, in seconds, for automatic reload of the form or table. If you select a different tab, or move to another page, automatic page reload stops.\n  / : Shopping Cart - indicates the status of changes to an Administration Server. A full shopping cart icon () indicates pending changes to the domain. Click to view, discard, or commit the changes.\n  Customizable tables You can choose which columns to show or hide in tables so you can focus on the important details and ignore the irrelevant ones.\nClick the Customize Table option that appears above all tables in the WebLogic Remote Console to view a list of all the possible columns you can add to the table and see information for. Move the columns back and forth between Available Columns and Selected Columns until you\u0026rsquo;ve assembled a set of columns that works for your needs and then, click Apply.\nTo return the table to its default set of columns, click Reset.\nThe list of options under Available Columns changes depending on the table; not all columns are applicable to all tables. Additionally, any changes to table columns will apply to that specific table across all applicable providers - if you change the table columns for Server Templates in wdt-model_1, those changes will also affect the Server Templates table in wdt-model_2 and admin-server_1 (Configuration Tree). Changes will also persist after you stop and start the WebLogic Remote Console.\nYou can easily copy text from the various tables throughout the WebLogic Remote Console. Right-click on a table cell and select either Copy Column Cell to Clipboard or Copy Row Data to Clipboard and the data from that table cell or its row is automatically saved to your computer\u0026rsquo;s clipboard.\n Find help The WebLogic Remote Console provides several types of online help on each page.\n Use the ? icon to the left of each field to access summary and detailed help for the field. If you hover over the ?, a summary help description displays. Click the ? icon to display a more detailed help description, if available. Click the ? icon in the top right of the content pane to toggle the view of the reference information for all of the fields displayed on the page.  WebLogic Remote Console extension The WebLogic Remote Console extension is a complementary component that you can add to your WebLogic domain to enhance the functionality of the WebLogic Remote Console when managing domains.\nAfter you install the extension, you\u0026rsquo;ll be able to:\n View pending changes in the Shopping Cart Manage security data stored in the embedded LDAP server (users, groups, roles, policies, credential mappings) Inspect the JNDI table Manage JMS messages and JTA transactions  To install the extension:\n  Create a management-services-ext directory under the domain home.\n  Download the latest WebLogic Remote Console extension, console-rest-ext-8.0.war, from https://github.com/oracle/weblogic-remote-console/releases and save it inside the management-services-ext directory you created in the previous step.\nNote: Do not try to deploy console-rest-ext-8.0.war as an application in your domain.\n  Restart the Administration Server if it is already running.\n  In the WebLogic Remote Console, disconnect, then re-connect to the Administration Server.\n  Supplemental customization While you should perform all configuration of the WebLogic Remote Console from within its graphical user interface, occasionally there are circumstances where that\u0026rsquo;s not possible. In those cases, you can view some of the data files upon which the WebLogic Remote Console builds its customizations.\nThese files are located in the following directories:\n Linux: $HOME/.config/weblogic-remote-console/ macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/ Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\     File name Purpose     auto-prefs.json Describes the user interface of the WebLogic Remote Console.   config.json Describes settings for the WebLogic Remote Console. We do not recommend modifying this file; use the Settings dialog box to edit settings instead. See Customize settings for more information.   dashboards.json Records the details of existing dashboards. See Generate dashboards for more information.   out.log Collects log entries for the current session of the WebLogic Remote Console. At the start of each session, log entries from the previous session are moved to a new file marked by date: out-yyyy-mm-dd. See Check log files for more information.   recent-searches.json Lists the search terms for any searches that you\u0026rsquo;ve executed. See Search for more information.   table-customizations.json Describes any table customizations you\u0026rsquo;ve saved. See Customizable tables for more information.    If you introduce an error into one of these files, it may affect the behavior of the WebLogic Remote Console and you may need to wipe or delete the file to recover. The WebLogic Remote Console will lose all saved data for that file, resetting it to its defaults. For example, if you have to erase dashboards.json, all your dashboards will be deleted.\n Multi-window support You can open multiple instances of the WebLogic Remote Console to increase your productivity. Whether you want multiple windows to compare different views of the same provider or to work with distinct projects simultaneously, you can open a set of console windows that caters to your needs. Select New Window from the File menu to open a new WebLogic Remote Console window.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/reference/faqs/",
	"title": "Frequently asked questions",
	"tags": [],
	"description": "Frequently asked questions about the WebLogic Remote Console",
	"content": "This section provides answers to frequently asked questions about the WebLogic Remote Console.\nCan I connect the WebLogic Remote Console to domains running in WebLogic on Oracle Cloud Infrastructure? Yes, you can. First, make sure that the domain\u0026rsquo;s administration server is publicly accessible so the WebLogic Remote Console can establish a connection to the administration server. Then, in the WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nCan I connect the WebLogic Remote Console to domains running on other cloud providers such as Amazon Web Services, Google Cloud, Microsoft Azure and so on? Yes, you can connect to other cloud providers. You\u0026rsquo;ll need to make sure the domain\u0026rsquo;s administration server is publicly accessible to allow a connection between the WebLogic Remote Console and the cloud provider. Then, in the WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nVisit your cloud providers' documentation for more specific instructions on how to expose the management/* endpoint of the WebLogic Server.\nCan I connect the WebLogic Remote Console to domains using the WebLogic Kubernetes Operator? Yes. For details on how to set up access to WebLogic Server domains running on Kubernetes, see Use the WebLogic Remote Console in the WebLogic Kubernetes Operator User Guide.\nCan I use both the WebLogic Remote Console and the WebLogic Server Administration Console? Yes. The WebLogic Remote Console uses the same configuration mechanisms used by the WebLogic Server Administration Console. You can make changes to your domain using any of these methods: Administration Console, WebLogic Remote Console, JMX, REST, WLST, and so on - they\u0026rsquo;re all compatible. However, it\u0026rsquo;s not recommended that you use multiple methods simultaneously since that may cause conflicts and unexpected behavior.\nWhich versions of WebLogic Server can I use with WebLogic Remote Console? You can use WebLogic Remote Console with WebLogic Server 12.2.1.3, 12.2.1.4, or 14.1.1.0.\nDo I need to upgrade my installation of WebLogic Remote Console whenever I upgrade or patch WebLogic Server? It\u0026rsquo;s recommended that you keep WebLogic Remote Console up to date as it is updated to work with the latest versions of WebLogic Server, including patches. However, it\u0026rsquo;s not required. Older versions of the WebLogic Remote Console will continue to work with newer versions WebLogic Server.\nNote that if new fields or new beans were added as part of the WebLogic Server update, outdated versions of the WebLogic Remote Console will not detect those fields.\nHow do I know if an update is available? The WebLogic Remote Console checks if a newer version is available whenever it starts. If an update becomes available while the application is already running, you can open Help \u0026gt; Check for WebLogic Remote Console Updates and click Download and install it to download the update immediately. If you are running both the WebLogic Kubernetes Toolkit UI (which runs the WebLogic Remote Console in the background) and the standalone WebLogic Remote Console simultaneously, you may need to restart both applications to apply the update.\nAre there any security risks associated with the WebLogic Remote Console? No, the WebLogic Remote Console accesses the WebLogic Administration Server through its standard REST API, which is available out of the box. However, since your desktop will be accessing potentially sensitive data, you need to make sure it is protected and secure - just like the WebLogic Administration Console.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/setup/",
	"title": "Get started",
	"tags": [],
	"description": "Installing and basic configuration for the WebLogic Remote Console",
	"content": "Review system requirements The WebLogic Remote Console supports the following platforms:\n Linux (64 bit only)  Ubuntu 14.04 and later Fedora 24 and later  Oracle Linux 7 and later   Debian 8 and later   macOS  macOS 10.11 (El Capitan) or later (64-bit Intel)   Windows (64 bit only)  Windows 7 and later    The WebLogic Remote Console desktop application is based on the Electron framework.\nInstall the WebLogic Remote Console  Uninstall any previous versions of the WebLogic Remote Console from your computer. Download the WebLogic Remote Console. Go to https://github.com/oracle/weblogic-remote-console/releases and download the installer for your operating system. Run the installer. Optional: Install the WebLogic Remote Console extension in the WebLogic Server domain. The WebLogic Remote Console extension provides additional functionality when using the WebLogic Remote Console to manage WebLogic domains.   Create a management-services-ext directory under the domain home.\n  Download the latest WebLogic Remote Console extension, console-rest-ext-8.0.war, from https://github.com/oracle/weblogic-remote-console/releases and save it inside the management-services-ext directory you created in the previous step. If you have an earlier version of the extension already downloaded, delete it and replace it with the latest version.\nNote: Do not try to deploy console-rest-ext-8.0.war as an application in your domain.\n  Restart the Administration Server if it is already running.\n   Launch the WebLogic Remote Console application.  Connect to a provider The WebLogic Remote Console supports providers that connect to WebLogic Server Administration Servers and providers that edit WebLogic Deploy Tooling (WDT) model files and property lists.\n  Open the WebLogic Remote Console.\n  Add a provider from the Startup Tasks dialog box. Or, if it doesn\u0026rsquo;t appear, open the Providers drawer and click ⋮. The following providers are available:\n Add Admin Server Connection Provider (the Administration Server must be running) Add WDT Model File Provider Add WDT Composite Model File Provider Add Property List Provider Create Provider for New WDT Model File Create Provider for New Property List  See Provider types for more information.\nYou can organize providers into Projects that persist when you close and reopen the application. See Projects for more information.\n  Fill in the necessary connection details for the provider.\n  Select a provider to start reviewing or editing the domain configuration.\n  You can add as many providers to a project as needed.\nNext steps  Familiarize yourself with the WebLogic Remote Console. Edit your providers. Customize your settings.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/projects/",
	"title": "Projects",
	"tags": [],
	"description": "How to connect to a WebLogic domain or deploy tooling model.",
	"content": "A project is a group of providers connections to WebLogic Administration Servers, WebLogic Deploy Tooling (WDT) models, WDT composite models, or property lists.\nCreate a project   Open File \u0026gt; New Project.\n  Enter a name for the project and click OK. The new project will appear in the Providers drawer. Next, you can add a provider to the project.\n  Open the Providers drawer and beside the project name, click ⋮. Select one of the following options to add provider:\n Add Admin Server Connection Provider Add WDT Model File Provider Add WDT Composite Model File Provider Add Property List Provider Create Provider for New WDT Model File Create Provider for New Property List  Visit Provider types for more information on each of the providers.\n  Fill in the required details.\n  Click OK to save add the provider to your project.\n  Add more providers to your project.\n  You can add as many providers to a project as you want. You can also create multiple projects to intelligently organize providers as needed. Furthermore, you can add the same providers into different projects if you need to.\nSwitch between projects You can create multiple projects in the WebLogic Remote Console, each with different domain connections or WDT model files, or both.\nTo switch to another project, open the File menu and select Switch to project. Choose the project you want to switch to.\nEdit a project You can edit a project and its connections at any time.\nTo add connections to a project, open the Providers drawer and click ⋮.\nTo rename a project, open the File menu and select Rename current-project.\nTo edit the details of a connection, open the Providers drawer and select the icon beside the connection you want to edit.\nExport a project If you\u0026rsquo;re using the WebLogic Remote Console across several computers, exporting a project is a convenient way to share a project across multiple computers.\nIf your project contains a WDT model file, make sure the location of the WDT model file is accessible to all the computers where this project will be imported to.\n  Create a project with all the desired connections. In the Providers drawer, click ⋮ and select Export Providers as Project. Enter a name for the exported project. This is the name that will be used when it is imported into another WebLogic Remote Console instance. Enter a name for the file of the exported project. Click OK and choose a file location to save the exported project file.  WebLogic Remote Console creates a JSON file with the project details that you can import into other instances of WebLogic Remote Console\nImport a project You can import the project details of a previously created project to rapidly ramp up productivity in a new installation of WebLogic Remote Console.\n Export a project and save the file to the computer where you want to import it. On the computer where you want to import the file, start WebLogic Remote Console. Open the Providers drawer and click ⋮. Select Import Project. Click and browse to the exported project file. Click Import.  The imported project will automatically become the current project loaded in the WebLogic Remote Console.\nDelete a project To delete a project, open the File menu and select Delete Project. Choose the project you want to delete.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/providers/",
	"title": "Provider types",
	"tags": [],
	"description": "The different provider types available to configure in the WebLogic Remote Console",
	"content": "Provider types The WebLogic Remote Console lets you manage a variety of WebLogic Server configuration tools, called providers. Each provider type offers a different approach for configuring your WebLogic Server domains.\n   Provider Type Description     Administration Server Add connections to WebLogic Administration Servers and edit domain configurations in real-time. An alternative to the WebLogic Administration Console.   Property List Create and edit lists of key-value pairs. You can connect property lists to WDT model files as WDT variables to simplify the use of WDT model tokens.   WDT Model File Create and edit abstract representations of WebLogic Server domains that you can use to quickly build live domains.   WDT Composite Model File View the combined details of multiple WDT model files at once.    "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/",
	"title": "User guide",
	"tags": [],
	"description": "Basic usage of the WebLogic Remote Console",
	"content": "User Guide The User Guide provides detailed information about using the WebLogic Remote Console.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/providers/administration-server/",
	"title": "Administration Servers",
	"tags": [],
	"description": "How to configure WebLogic Administration Servers in the WebLogic Remote Console",
	"content": "The WebLogic Remote Console can connect directly to a WebLogic Administration Server to view and edit its domain, much like the WebLogic Server Administration Console, though there are some differences.\nYou can save the connection details for multiple WebLogic Administration Servers, making it easy to switch between domains with a click.\nConnect to a WebLogic Administration Server   Start the WebLogic Administration Server.\n  Open the Providers drawer and beside the project name, click ⋮. Select Add Admin Server Connection Provider.\n  Enter a name for the Administration Server connection. This is the name that will appear in the Project list of providers so you can identify which provider you’re working on.\n  Enter a username and password for a user account with editing privileges in the selected Administration Server. As with the Administration Console, your management capabilities will be limited depending on the level of access granted to your user account. See Understand access discrepancies for more information. You can choose to have multiple connections to the same Administration Server with different users.\n  Enter the URL for the Administration Server.\nNote: Make sure that the management/* endpoint of your administration server is accessible by the WebLogic Remote Console. If your administration server\u0026rsquo;s endpoints are behind a load balancer or otherwise externally unavailable, you will need to expose that endpoint manually.\n  Optional:\n If you want to force WebLogic Remote Console to connect to an Administration Server regardless of warnings about expired, untrusted, or missing certificates, enable the Insecure Connection checkbox. We strongly recommend that you only enable this setting for development or demonstration environments. If you want to facilitate communication between a WebLogic Server domain that resides in a different network and the WebLogic Remote Console, enter a proxy server address in the Proxy Override field. You can also set a proxy address globally that applies to all administration server connections.    Click OK to connect the WebLogic Remote Console to the WebLogic Administration Server.\n  The WebLogic Remote Console is now connected to a WebLogic Administration Server. You can make changes to the domain as desired.\nYou can use the WebLogic Remote Console to manage a WebLogic Server domain running on Kubernetes. For details about how to set up access to WebLogic Server domains running on Kubernetes, see Use the Remote Console in the WebLogic Kubernetes Operator User Guide.\n The Administration Server provider is split into multiple perspectives, each of which focuses on a different management area for a WebLogic domain:\n Edit Tree: an editable view of the WebLogic Server domain. Enter this perspective when you want to make and commit changes to the domain. Configuration Tree: a read-only view of the WebLogic Server domain. Enter this perspective if you want to see the current settings of the domain, without making any changes. Monitoring Tree: an overview of the runtime statistics for the running domain. You can view statistics by server or aggregated across servers. For example, applications running on Server1 vs. applications running on one or more servers. The Monitoring Tree also provides some control operations such as starting or stopping servers or applications. Security Data Tree: an editable view of the security providers' data in the security realm. This includes users, groups, policies, and so on.  While the Edit Tree and the Configuration Tree perspectives look similar, they are generated from two separate collections of configuration MBeans, which results in important and distinct nuances between the two perspectives:\n  Changes made in the Edit Tree perspective do not appear in the Configuration Tree perspective until you commit them, or for non-dynamic changes, until you restart the server.\n  Certain dynamically computed domain contents do not appear in the Edit Tree. For example,\n Dynamic clusters (and their servers) Situational configurations Changes made from the command line using system properties Changes to some production mode-related settings    For more information on the differences between editable Configuration MBeans and read-only Configuration MBeans, see Managing Configuration Changes in Understanding Domain Configuration for Oracle WebLogic Server.\n Edit a WebLogic Administration Server Editing a domain in the WebLogic Remote Console is similar in process to the Administration Console. When you start editing a domain, a configuration lock is created that blocks other users from making simultaneous changes. Once you\u0026rsquo;re satisfied with your changes, you can activate these changes and perpetuate them to the Administration and Management Servers.\nCertain areas and actions in the WebLogic Remote Console are hidden from non-administrators. For example, users with the Operator role cannot see the Edit Tree at all. For more information on what each user role can (or cannot) access, see Understand Access Discrepancies.\n  Open the Providers drawer and select the Administration Server you want to edit. Click the Edit Tree perspective and make your changes to the domain configuration. Fields marked with require a server restart. Click Save on every page after making your changes. If you have the extension installed, open the Providers drawer and select Shopping Cart to view your changes. Commit your changes. In the upper right corner of the content pane, click and then Commit Changes. Restart your server if necessary.  Check if any servers require a restart on the Monitoring Tree perspective \u0026gt; Environment \u0026gt; Servers page.    You can restore fields to their default value. Right-click on a field and click Restore to default.\n Shopping cart The Shopping Cart (equivalent to the Change List in the WebLogic Server Administration Console) holds all the pending changes for the current session in the WebLogic Remote Console. In the shopping cart, you can see if any changes are pending, commit those changes or discard them entirely.\nIf you installed the console extension, console-rest-ext-8.0.war, then you can also see the specific changes you\u0026rsquo;ve made and the status of the lock in the Change Manager.\nOpen the Shopping Cart menu and click View Changes to see your pending changes.\nSome changes can be activated immediately (dynamic) while other changes require a server restart to activate (non-dynamic). When you need to activate non-dynamic changes, navigate to the Environment \u0026gt; Servers node in the Monitoring perspective to see which servers need a restart.\nIf you need to undo a change, you must discard all Shopping Cart contents or manually revert the change in the Edit Tree perspective.\nThe configuration change lock does not prevent you from making conflicting configuration edits using the same administrator user account. For example, if you obtain a configuration change lock in the WebLogic Remote Console, and then use the Administration Console or WebLogic Scripting Tool (WLST) with the same user account, you will access the same edit session that you opened in the WebLogic Remote Console and you will not be blocked from making changes with the other tools.\nWe recommend against making changes using multiple tools because when one of the sessions activates their changes, it releases the lock and the other session will not be able to save or activate their changes.\n Edit the connection details of a WebLogic Administration Server  Open the Providers drawer and beside the WebLogic Administration Server connection that you want to edit, click the icon. Edit the details of the WebLogic Administration Server. You can change its name in WebLogic Remote Console, switch user accounts or update the URL. Click OK to save your changes.  View the connection details of a WebLogic Administration Server It\u0026rsquo;s easy to view the details of a WebLogic Server Connection.\n Open the Providers drawer and beside the WebLogic Administration Server, click the icon.  A list of connection details will appear, including:\n Provider ID Domain Name Domain URL Domain Version Username Role  Delete a connection to a WebLogic Administration Server This will only delete the WebLogic Remote Console access to the WebLogic Administration Server. The domain itself will be unaffected.\n Open the Providers drawer and beside the WebLogic Administration Server, click the icon.  Create a managed server  In the Edit Tree perspective, expand the Environment \u0026gt; Servers node. Click New. Enter a name for the new server. Optional: If you want to copy the settings from an existing server onto your new server, select a server from the Copy settings from another server dropdown. Only the server\u0026rsquo;s settings will be copied; children, such as channels, are not copied. Any settings that are not supported by the WebLogic Server REST API are also not copied. Click Create.  Control Operations The WebLogic Remote Console provides control operations for the Administration Server in the Monitoring perspective.\nChange server state Server state indicates the specific condition of a server in the life cycle management.\n Open the Providers drawer and select a WebLogic Administration Server connection. Choose the Monitoring perspective from the home page. Go to Environment \u0026gt; Servers Choose the action for the server(s):  Start Resume Suspend Shutdown Restart SSL   Choose when to initiate the action:  When work completes Force shutdown now   In the dialog box, move the servers whose state you want to change from Available to Chosen. Initiate the action.  Create MBeans The WebLogic Remote Console includes simplified wizards for deploying applications and creating JDBC system resources.\nIn most other cases, when you create a new MBean on a page, you are prompted to fill in a few key properties, such as Name, then click Create. Unlike the WebLogic Server Administration Console, the WebLogic Remote Console does not guide you through configuring other properties that you typically need to complete the configuration. Instead, it displays the new bean\u0026rsquo;s pages where you can click through the tabs to finish configuring the bean.\nWhen you configure a bean property that references another bean, you must first create the other bean. For example, if you want to assign Server1 to Cluster1, you need to create Cluster1 first, unlike in the WebLogic Server Administration Console where you can choose to create Cluster1 during server creation.\n Application Deployment You can use the WebLogic Remote Console to manage the deployment process for applications to WebLogic Server.\nFor more information on the general process for application deployment, see Deploying Applications to Oracle WebLogic Server.\nInstall an application When you install an application, you make its physical file or directory known to WebLogic Server. An application can be installed as an archived EAR file or as an exploded directory.\n In the Edit Tree, navigate to Deployments \u0026gt; App Deployments. Select New. Fill in the required fields. Click Create. Commit your changes.  Your new application appears under the App Deployment node. You can make additional changes to the application on this page.\nYou must start an application before it can process client requests.\nStart an application You need to start an application to make it available to WebLogic Server clients.\nWhen you start an application, you can make it immediately available to clients, or you can start it in Administration Mode to first ensure that it is working as you expect. Starting in Administration Mode allows you to perform final (\u0026ldquo;sanity\u0026rdquo;) checking of the distributed application directly in the production environment without disrupting clients.\n In the Monitoring Tree, navigate to Deployments \u0026gt; Application Management. Select the application that you want to start. Click Start and choose either:  Servicing all requests: to make the application immediately available to all clients. Servicing only administration request: to make the application available in Administration Mode only.    Stop an application When you stop an application, you can choose whether no clients can use it, or stop it in Administration Mode so that only administrative tasks can be performed.\nStopping an application does not remove its source files from the server; you can later redeploy a stopped application to make it available to WebLogic Server clients again.\n In the Monitoring Tree, navigate to Deployments \u0026gt; Application Management. Select the application that you want to stop. Click Stop and choose either:  When work completes: to allow the application to finish its work and for all currently connected users to disconnect. Force stop now: to stop the application immediately, regardless of the work that is being performed and the users that are connected. Servicing non-administration requests: to stop the application once all its work has finished, but to then put the application in Administration Mode so it remains accessible for administrative purposes.    Test application deployment After you deploy an application, you may want to confirm that it was deployed successfully.\n  In the Monitoring Tree, navigate to Environment \u0026gt; Servers \u0026gt; myServer \u0026gt; Deployments \u0026gt; Application Runtimes \u0026gt; myApp \u0026gt; Component Runtimes \u0026gt; myServer/myApp \u0026gt; Servlets.\n  Construct a URL using the target server address plus the ContextPath and Name values from the Servlets table. For example, for an application deployed on the Administration Server, a test URL might look like http://adminserver:7001/myapp/welcome.\nNote: Remember to consider any changes you made to network channels that may affect the application deployment. For example, the application may be on a different port.\n  Enter the URL into your browser. If the page loads correctly, then your application was deployed successfully.\n  View an application\u0026rsquo;s current state  In the Monitoring Tree, navigate to Deployments \u0026gt; Application Management and choose the application whose state you want to view.  Review an application\u0026rsquo;s runtime statistics  In the Monitoring Tree, navigate to Deployments \u0026gt; Application Runtime Data and choose the application for which you want to view runtime information. Explore the child nodes of the selected application to see its various runtime data.  Configure Deployment After you deploy an application, you can configure additional settings to meet the needs of your environment.\n  If you haven\u0026rsquo;t already, create a deployment plan for the application. You can view the default configuration settings but they are read-only until you create a deployment plan. For more information, see Deployment Plans.\nNote: You cannot create a deployment plan for applications that were auto-deployed.\n  In the Monitoring Tree, navigate to Deployments \u0026gt; Application Management and select your application.\n  Click Create Plan.\n  In the Plan Path field, enter a file path for the new deployment plan. You should create the new deployment plan for a single application within a plan/ subdirectory of the application\u0026rsquo;s root directory. Deployment plans must be in XML format and should be called plan.xml.\n  Click Done. WebLogic Server will create a basic deployment plan.\nNote: You can see the deployment plan for an application under Deployments \u0026gt; Application Management \u0026gt; myApplication \u0026gt; Deployment Plan (Advanced).\n    Go to Deployments \u0026gt; Application Management \u0026gt; myApplication \u0026gt; Configuration. Explore the Configuration node and its children to see the available deployment configuration options.\nNote: The contents of the Configuration node and its children differ based on application type. For example, web applications include settings for container descriptors while resource adapters include settings for outbound connection pools.\n  Click Save as you make changes. Any changes that you make to the Configuration node and its children are automatically reflected in the deployment plan.\n  Update and possibly redeploy your application to apply your changes. See Update or redeploy an application for instructions.\n  Update or redeploy an application If your changes are dynamic, then you only need to update the deployment plan. However, if your changes include non-dynamic changes, you must redeploy the application to propagate the changes from the deployment plan to the application.\nFor more information, see Overview of Redeployment Strategies in Deploying Applications to Oracle WebLogic Server.\nTo update or redeploy an application with an updated deployment settings.\n In the Monitoring Tree, navigate to Deployments \u0026gt; Application Management and select your application. Click Update/Redeploy. Choose one of the options:  Update with New Deployment Plan:  Deployment Plan on Server: Updates the application using a new deployment plan located on the server. This option only applies dynamic changes to the application. Deployment Plan on Local Machine: Updates the application using a new deployment plan located on the local machine and then uploads it to the Administration Server\u0026rsquo;s upload directory. This option only applies dynamic changes to the application.   Update with Modified Existing Deployment Plan: Updates the existing deployment plan. This option only applies dynamic changes to the application. Redeploy:  Deployment Plan and Source on Server: Updates a deployment plan located on the server and redeploys the application. Use this option if your changes include non-dynamic changes that require the application to restart. Deployment Plan and Source on Local Machine: Updates a deployment plan located on the local machine and redeploys the application. Use this option if your changes include non-dynamic changes that the application to restart.      Deployment Plans You can use a deployment plan to specify deployment property values for an application. A deployment plan is an optional document that works with or overrides your application\u0026rsquo;s deployment descriptors to configure an application for deployment to a specific WebLogic Server environment. Deployment plans are written in XML.\nFor more information, see Understanding WebLogic Server Deployment Plans in Deploying Applications to Oracle WebLogic Server.\nNote: You cannot create a deployment plan for applications that were auto-deployed.\nGenerally, if you need to modify the deployment settings of an application, you should use the Configuration node (as described in Configure Deployment), instead of manually editing the deployment plan.\nCreate a Deployment Plan  In the Monitoring Tree, navigate to Deployments \u0026gt; Application Management and select your application. Click Create Plan. In the Plan Path field, enter a file path for the new deployment plan. You should create the new deployment plan for a single application within a plan/ subdirectory of the application\u0026rsquo;s root directory. Deployment plans must be in XML format and should be called plan.xml. Click Done.  Update a Deployment Plan You can manually edit a deployment plan to update it with new deployment instructions for an application.\nFor more information, see Manually Customizing the Deployment Plan in Deploying Applications to Oracle WebLogic Server.\n In the Monitoring Tree, navigate to Deployments \u0026gt; Application Management \u0026gt; myApplication \u0026gt; Deployment Plan (Advanced). You can edit the the deployment plan as a whole or the individual variable assignments within a deployment plan:  To edit a deployment plan document:  Select the Deployment Plan tab. Edit the deployment plan directly within the text box field or copy and paste the plan into a text editor. Make your edits and then copy and paste it back into the WebLogic Remote Console. Click Save.   To edit individual variable assignments:  Select the variable assignment module that you want to edit and click Edit. Enter a value and, if updating an array, choose an operation. Click Done.     You will need to update and possibly redeploy your application to apply your changes. See Update or redeploy an application for instructions.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/develop/contribute/",
	"title": "Contribute to WebLogic Remote Console",
	"tags": [],
	"description": "How to contribute to the WebLogic Remote Console.",
	"content": "We welcome contributions to this repository from anyone.\nIf you want to submit a pull request to fix a bug or enhance an existing feature, please first open an issue and link to that issue when you submit your pull request.\nIf you have any questions about a possible submission, feel free to open an issue too.\nContributing to the WebLogic Remote Console repository Pull requests can be made under The Oracle Contributor Agreement (OCA).\nFor pull requests to be accepted, the bottom of your commit message must have the following line using your name and e-mail address as it appears in the OCA Signatories list.\nSigned-off-by: Your Name \u0026lt;you@example.org\u0026gt; This can be automatically added to pull requests by committing with:\n git commit --signoff Only pull requests from committers that can be verified as having signed the OCA can be accepted.\nPull request process  Fork this repository Create a branch in your fork to implement the changes. We recommend using the issue number as part of your branch name, e.g. 1234-fixes Ensure that any documentation is updated with the changes that are required by your fix. Ensure that any samples are updated if the base image has been changed. Submit the pull request. Do not leave the pull request blank. Explain exactly what your changes are meant to do and provide simple steps on how to validate your changes. Ensure that you reference the issue you created as well. We will assign the pull request to 2-3 people for review before it is merged.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/develop/",
	"title": "Development",
	"tags": [],
	"description": "Entry point for developer information on the WebLogic Remote Console",
	"content": "Development With the open source nature of the WebLogic Remote Console, you are free and encouraged to alter and adapt the source code of the console to suit your needs.\nNote that any changes you implement may affect the functionality of the WebLogic Remote Console in unexpected ways.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/reference/known_issues/",
	"title": "Known issues",
	"tags": [],
	"description": "Known issues and limitations for the WebLogic Remote Console",
	"content": "This page lists the limitations and known issues (and their workarounds if available) of the WebLogic Remote Console.\nLimitations In the current release of WebLogic Remote Console, you cannot:\n Record WLST scripts while you configure WebLogic Server using the WebLogic Remote Console. Test automatically if an application was successfully deployed. See Test Application Deployment for a manual option. Reorder security providers in WDT model file providers. However, you can download the WDT model file and edit the YAML file manually to rearrange the order of the security providers.  Limited MBean property support The WebLogic Remote Console includes the vast majority of the MBean properties that the WebLogic Server Administration Console supports. However, due to limitations in the WebLogic REST API, some are missing, including some that are deprecated. If you need an MBean property that\u0026rsquo;s not currently available in the WebLogic Remote Console, please let us know.\n  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/providers/administration-server/security-data/",
	"title": "Editing security data",
	"tags": [],
	"description": "How to manage security data in the WebLogic Remote Console",
	"content": "You can manage security data and supported security providers for your domain in the Security Data tree perspective.\nYou must be logged in as a user with the Admin role and have the WebLogic Remote Console extension installed to access this perspective. See Install the WebLogic Remote Console for instructions.\n Any changes you make within the Security Data perspective are immediate - you don\u0026rsquo;t need to commit or restart the server to apply your changes.\nManaging users and groups You can easily manage the WebLogic Server users and groups that are configured as part of the default authentication provider (WebLogic Authentication Provider) within a security realm. Only the default authentication provider is supported. If you\u0026rsquo;re not using the default authentication provider, you\u0026rsquo;ll need to manage its users and groups through its own external tools.\nCreate a user  In the Security Data Tree perspective, expand Realms. Select the Security Realm to which you want to add users. Expand the Authentication Provider node and then select the authentication provider to which you want to add users. Expand Users and click New. Enter a Name, Description and Password for this user. User names must be unique in the security realm and passwords must be eight characters or longer. Click Create.  Create groups  In the Security Data Tree perspective, expand Realms. Select the Security Realm to which you want to add groups. Expand the Authentication Provider node and then select the authentication provider to which you want to add groups. Expand Groups and click New. Enter a Name and Description for this group. Group names must be unique in the security realm. Click Create.  Edit users  In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Authentication Providers \u0026gt; providerName \u0026gt; Users. Click the user that you want to edit. Move through the various tabs to update the properties of the user. You cannot edit the name of a user - you must delete and create a new user. You can add users to groups. Under the Membership tab, select any Available group to which you want to add the user and move them over to Chosen. Click Save.  Edit groups  In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Authentication Providers \u0026gt; providerName \u0026gt; Groups. Click the group that you want to edit. You can modify the group description or, under the Membership tab, nest the current group under other groups. You cannot edit the name of a group - you must delete and create a new group. Click Save.  Delete users  In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Authentication Providers \u0026gt; providerName \u0026gt; Users. Beside the user that you want to delete, click the trash icon .  Delete groups Deleting a group will not delete the users within that group.\n In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Authentication Providers \u0026gt; providerName \u0026gt; Groups. Beside the group that you want to delete, click the trash icon .  Managing Security Policies and Roles Use security policies to manage who can access a resource in a WebLogic Server domain.\nA resource is an entity (such as a Web Service or a server instance) or an action (such as a method in a Web Service or the act of shutting down a server instance). For a list of resource types, see Resource Types You Can Secure with Policies.\nA security policy specifies which users, groups, or roles can access the resource according to a set of conditions. Whenever possible, you should use security roles to determine access control. A security role, like a security group, grants an identity to a user. Unlike a group, however, membership in a role can be based on a set of conditions that are evaluated at runtime.\nFor most types of WebLogic resources, you can use the WebLogic Remote Console to define the security policies and roles that restrict access. However, for Web application and EJB resources, you can also use deployment descriptors.\nThe general process to secure a WebLogic resource is:\n Create users and groups Optional: Manage default security roles or create new ones. We recommend that you use roles to secure WebLogic resources (instead of users or groups) to increase efficiency for administrators who work with many users. You can use the default roles that WebLogic Server provides or create your own. Create and apply security policies.  For more information, see Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nSecurity roles A security role is an identity granted to users or groups based on specific conditions. Multiple users or groups can be granted the same security role and a user or group can be in more than one security role. Security roles are used by policies to determine who can access a WebLogic resource.\nWebLogic Server provides a default set of roles that you can use with any policy (global roles). You can create your own global roles or create roles that can be used by policies only for a specific resource (scoped roles). For example, you can place all of your system administrators in WebLogic Server\u0026rsquo;s Admin role. You can then create a scoped role for a specific EJB that contains highly sensitive business logic. When you create a policy for the EJB, you can specify that only the scoped role can access the EJB.\nIf two roles conflict, the role of a narrower scope overrides the role of the broader scope. For example, a scoped role for an EJB resource overrides a global role or a scoped role for the enterprise application that contains the EJB.\nSecurity roles are created within a security realm, and the roles can be used only when the realm is active.\nFor more information, see Overview of Security Roles.\nCreate global roles Before creating a new global security role, review the Global Security Roles in Securing Resources Using Roles and Policies for Oracle WebLogic Server to assess if an existing role is sufficient for your needs.\n In the Security Data Tree perspective, expand Realms. Select the Security Realm where you want to add a global role. Expand Role Mappers \u0026gt; XACMLRoleMapper \u0026gt; Global \u0026gt; Roles. Click New. Enter a name for the new global role and click Create. Click Save.  After the role is created, you can build a policy that uses conditions to determine which users or groups it encompasses. We recommend that whenever possible you use the Group condition which grants the security role to all members of the specified group. See Edit a policy for more details on how you can edit conditions.\nFor a description of conditions in the Predicate List, see Security Role Conditions\nCreate scoped roles Scoped roles can only be used with policies that apply to specific resources.\n In the Security Data Tree perspective, expand Realms. Select the Security Realm where you want to add a scoped role. Expand Role Mappers \u0026gt; XACMLRoleMapper \u0026gt; Resource \u0026gt; Roles. Click New. Enter a name for the new scoped role and click Create.  After the role is created, you can build a policy that uses conditions to determine which users or groups it encompasses. We recommend that whenever possible you use the Group condition which grants the security role to all members of a specified group. See Edit a policy for more details on how you can edit conditions.\nFor a description of conditions in the Predicate List, see Security Role Conditions\nSecurity policies A security policy specifies the conditions that users, groups, or roles must meet to access a resource. Policies must have one or more conditions and you can combine conditions to create complex policies for more dynamic access control.\nRoot level policies apply to all instances of a specific resource type, for example, all JMS resources in your domain. All default security policies are root level policies.\nYou can also create policies that only apply to a specific resource instance. If the instance contains other resources, the policy will apply to the included resource as well. For example, you can create a policy for an entire JMS system resource, or for a particular queue or topic within that resource.\nThe policy of a narrower scope overrides policy of a broader scope. For example, if you create a security policy for a JMS system resource and a policy for a JMS queue within that system resource, the JMS queue will be protected by its own policy and will ignore the policy for the system resource.\nFor more information, see Security Policies in Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nIt\u0026rsquo;s recommended that you use the Role condition where possible. Basing conditions on security roles lets you create one security policy that takes into account multiple users or groups, and is a more efficient method of management.\nSee Security Policy Conditions in Securing Resources Using Roles and Policies for Oracle WebLogic Server to learn more.\nCreate a policy for resource instances You can create a security policy that only applies to a specific resource instance. If the instance contains other resources, the policy will apply to the included resources as well.\n In the Security Data Tree perspective, expand Realms. Select the Security Realm that contains the resource instance where you want to add a policy. Expand Authorizers \u0026gt; XACMLAuthorizer \u0026gt; resourceInstance. Click Add Condition to open the Add New First Condition dialog box. Select a predicate from the Predicate List. Depending on the predicate you choose, you may need to configure arguments for the condition. Click OK. Click Save.  You can add more conditions to the policy to increase its complexity.\nEdit a policy You can edit a policy by modifying a condition\u0026rsquo;s arguments or by modifying the relationships between conditions in the policy.\n Go to the policy that you want to edit. Click on the condition you want to edit. You can only edit the arguments of the condition. If you want to use a different predicate for the condition, you must add a new condition.  Conditions have three different types of relationships: AND, OR, and Combination.\n AND: All of the conditions joined by an AND operator must be met. OR: At least one of the conditions joined by an OR operator must be met. Combination: Two or more conditions are combined and must be evaluated as a group. Conditions within a combination are themselves related to each other through AND or OR operators.  By default, a new condition is added as a simple condition at the top of the list of conditions. To insert a new condition elsewhere, select an existing condition and then click Add Condition. You\u0026rsquo;ll get a dropdown list with options to add the new condition either above or below the selected condition. The order of conditions is not meaningful to how the policy is interpreted.\nA policy can contain multiple simple or compound conditions or a mix of simple and compound conditions. You can also nest compound conditions.\nWhy should you use compound conditions? Consider this scenario: a resource exists where you want Administrators to always have access, but Deployers to only have access between 9 am and 5 pm. The following policy would address both requirements.\n  Condition 1 (simple): Role: Admin\n OR    Condition 2 (compound): Role: Deployer AND access occurs between 09:00:00 and 17:00:00 GMT -7:00\n   Use the actions on the Policy page to edit a policy.\n   Action Description     Add Condition Adds a new condition to the policy. You can choose to add the new condition above or below another condition.   Combine When multiple conditions are selected, you can combine them to create a compound condition.   Uncombine When a compound condition is selected, you can break it into independent conditions.   Remove Deletes a simple or compound condition from the policy. When there are no conditions in a policy, the default policy will apply.   Negate Reverses the meaning of a condition. The criteria to access a resource becomes the opposite of the original condition.   Reset Reverts the policy to its last saved change, not the last change. It\u0026rsquo;s recommended that you save your policy frequently or you may unintentionally lose several changes using the Reset action.    You can also edit a policy from its Advanced tab where the policy is expressed as string. Any changes made to a policy in the Advanced tab are reflected in the main Policy tab, and vice versa.\nDelete a policy Before you delete a policy, make sure that the default security policy for the resource instance will provide adequate access control.\n Go to the policy you want to delete. Delete all of the conditions in the policy. Click Save.  Managing credential mappers A Credential Mapping provider lets WebLogic Server map a WebLogic resource to a set of credentials in an external system so that the WebLogic resource can log into that external system on behalf of a subject that has already been authenticated. You can map multiple WebLogic resources (of the same type) to the same external system (and even to the same subject within that system).\nYou can manage the credential mappings for the default credential mapper provider (WebLogic Credential Mapping Provider) within a security realm. Only the default credential mapping provider is supported.\nThe general process for mapping credentials remains the same across WebLogic resources:\n Configure an applicable MBean in the Edit Tree perspective such as deploying an app or adding a data source. Commit your changes and restart the server if any of your changes are non-dynamic. In the Security Data Tree perspective, under Credential Mappers, find the corresponding node for the MBean. If necessary, define the properties of a WebLogic resource to identify it and form a connection between the MBean\u0026rsquo;s configuration data and its security data. Create mappings for the WebLogic resource.  You can create credential mappings for the following WebLogic resources:\n App Deployments  EJBs JDBC applications JDBC modules Resource adapters   Data Sources Remote Resources  App Deployments: EJBs Identify an EJB Component The first time you add a reference to an EJB component, you\u0026rsquo;ll also create a credential mapping for that EJB component.\n In the Security Data Tree perspective, expand Realms. Select the Security Realm where you want to add a EJB component. Go to Credential Mappers \u0026gt; credentialMapperName \u0026gt; App Deployments \u0026gt; applicationName \u0026gt; EJBs. Click New. Fill in the fields as required. Click Create.  A reference to the EJB component is added under the EJBs node. The name of the EJB component is generated by the properties of the application and those you set when adding the EJB component.\nFor information on how to manage the credential mappings, see Credential Mappings.\nRemove a reference to an EJB Component You cannot delete a reference to an EJB component with multiple credential mappings. To delete an EJB component reference, you must delete all of the credential mappings first - which will then delete the EJB component reference automatically - or delete all but one of the credential mappings and then follow these steps:\n In the Security Data Tree perspective, go to Credential Mappers \u0026gt; credentialMapperName \u0026gt; App Deployments \u0026gt; applicationName \u0026gt; EJBs. Beside the EJB component that you want to delete, click the trash icon .  App Deployments: JDBC Application You can only add credential mappings for JDBC applications, not manage the JDBC applications themselves.\nFor information on how to manage the credential mappings, see Credential Mappings.\nApp Deployments: JDBC Modules Identify a JDBC Module The first time you add a reference to a JDBC module, you\u0026rsquo;ll also create a credential mapping for that JDBC module.\n In the Security Data Tree perspective, expand Realms. Select the Security Realm where you want to add a JDBC module. Go to Credential Mappers \u0026gt; credentialMapperName \u0026gt; App Deployments \u0026gt; applicationName \u0026gt; JDBC Modules. Click New. Fill in the fields as required. Click Create.  For information on how to manage the credential mappings, see Credential Mappings.\nRemove a reference to a JDBC Module You cannot delete a reference to a JDBC module with multiple credential mappings. To delete a JDBC module reference, you must delete all of the credential mappings first - which will then delete the JDBC module reference automatically - or delete all but one of the credential mappings and then follow these steps:\n In the Security Data Tree perspective, go to Credential Mappers \u0026gt; credentialMapperName \u0026gt; App Deployments \u0026gt; applicationName \u0026gt; JDBC Module. Beside the JDBC module that you want to delete, click the trash icon .  App Deployments: Resource Adapters Identify a Resource Adapter The first time you add a reference to a resource adapter, you\u0026rsquo;ll also create a credential mapping for that resource adapter.\n In the Security Data Tree perspective, expand Realms. Select the Security Realm where you want to add a resource adapter. Go to Credential Mappers \u0026gt; credentialMapperName \u0026gt; App Deployments \u0026gt; applicationName \u0026gt; Resource Adapters. Click New. Fill in the fields as required. Click Create.  A reference to a resource adapter is added under the Remote Adapters node. The name of the resource adapter is generated by combining its property values.\nFor information on how to manage the credential mappings, see Credential Mappings.\nRemove a reference to Resource Adapter You cannot delete a reference to a resource adapter with multiple credential mappings. To delete a resource adapter reference, you must delete all of the credential mappings first - which will then delete the resource adapter reference automatically - or delete all but one of the credential mappings and then follow these steps:\n In the Security Data Tree perspective, go to Credential Mappers \u0026gt; credentialMapperName \u0026gt; App Deployments \u0026gt; applicationName \u0026gt; Resource Adapter. Beside the Resource Adapter that you want to delete, click the trash icon .  Data Sources You can only add credential mappings for data sources, not manage the data sources themselves. You can manage data sources in the Edit tree perspective.\nFor information on how to manage the credential mappings, see Credential Mappings.\nRemote Resources Identify a remote resource The first time you add a reference to a remote resource, you\u0026rsquo;ll also create a credential mapping for that remote resource.\nIf you add a remote resource with the cross-domain protocol enabled, it will create a WebLogic Server user named cross-domain. Only the cross-domain user can be used to create credential mappings. While the WebLogic Remote Console will let you add other WebLogic Server users and credential mappings within the remote resource, the mappings will not work and will not provide access to the remote resource.\n  In the Security Data Tree perspective, expand Realms. Select the Security Realm where you want to add a credential mapping. Navigate down to Credential Mappers \u0026gt; credentialMapperName \u0026gt; Remote Resources. Click New. Fill in the fields as needed. Certain fields are disabled depending on whether you choose to use the cross-domain protocol. Click Create.  A reference to a remote resource is added under the remote resources node. The name of the remote resource is generated by combining its property values.\nFor information on how to manage the credential mappings, see Credential Mappings.\nRemove a reference to a remote resource You cannot delete a reference to a remote resource with multiple credential mappings. To delete a remote resource reference, you must delete all of the credential mappings first - which will then delete the remote resource reference automatically - or delete all but one of the credential mappings and then follow these steps:\n In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Credential Mappers \u0026gt; credentialMapperName \u0026gt; Remote Resources. Beside the remote resource that you want to delete, click the trash icon .  Credential mappings Add a credential mapping You can add a new credential mapping to associate another WebLogic resource to a remote user.\nThe credential mappings and credentials for each WebLogic resource appear under the resource\u0026rsquo;s node.\n In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Credential Mappers \u0026gt; credentialMapperName \u0026gt; wlResourceType \u0026gt; wlResourceName \u0026gt; Credential Mappings. Click New. Fill in the fields as needed. If you want to map to a remote user that is already referenced in the remote resource, disable the Create Credential toggle. Click Create.  Remap a WebLogic resource You can edit a credential mapping to associate a WebLogic user for a WebLogic resource to a different remote user. The WebLogic Remote Console must already be aware of the remote user before you can remap the WebLogic Server user. If you want to remap the WebLogic resource to a new remote user, you must first add it to the WebLogic Remote Console.\n In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Credential Mappers \u0026gt; credentialMapperName \u0026gt; wlResourceType \u0026gt; wlResourceName \u0026gt; Credential Mappings. Select the credential mapping you want to edit. In the Remote User field, replace the current remote user with the username of the remote user you want to remap the WebLogic resource to. Click Save.  Delete a credential mapping When you delete a credential mapping, the remote user that the WebLogic resource was previously associated with is also deleted if it was the only credential mapping using that remote user.\n In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Credential Mappers \u0026gt; credentialMapperName \u0026gt; wlResourceType \u0026gt; wlResourceName \u0026gt; Credential Mappings. Beside the credential mapping that you want to delete, click the trash icon .  Credentials Add a credential After you have added the first set of credentials for a remote system to a WebLogic resource, you can add more users from that remote system.\n In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Credential Mappers \u0026gt; credentialMapperName \u0026gt; wlResourceType \u0026gt; wlResourceName \u0026gt; Credentials Click New. Enter the username and password for the remote user. Click Create.  You can now map a WebLogic user for the WebLogic resource to the new set of credentials.\nChange a remote user password If the password of the remote user changes, you\u0026rsquo;ll need to update it in the WebLogic Remote Console or the mapping will break and prevent the WebLogic resource from logging into the remote system.\n In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Credential Mappers \u0026gt; credentialMapperName \u0026gt; wlResourceType \u0026gt; wlResourceName \u0026gt; Credentials. Select the remote user whose password you want to change. Change the password. Click Save.  Remove a credential Each WebLogic resource has its own set of credentials Removing a credential from the WebLogic Remote Console will not affect the user in the remote system.\nYou cannot delete a credential that currently has a WebLogic resource mapped to it.\n In the Security Data Tree perspective, go to Realms \u0026gt; realmName \u0026gt; Credential Mappers \u0026gt; credentialMapperName \u0026gt; wlResourceType \u0026gt; wlResourceName \u0026gt; Credential Mappings. You\u0026rsquo;ll need to either map the current credential mapping to a different credential or delete all of the credential mappings using that credential:  Select any relevant mappings and update the Remote User field to a new remote user. Beside any credential mappings that you want to delete, click the trash icon . Once all credential mappings associated with the credential are deleted, the credential itself will also be automatically deleted and you can skip the rest of the steps.   Under the same WebLogic resource, expand the Credentials node. Beside the credential that you want to delete, click the trash icon . Click Save.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/dashboards/",
	"title": "Generate dashboards",
	"tags": [],
	"description": "How to generate dashboards",
	"content": "Dashboards let you quickly assess the state of your WebLogic Server domain. With dashboards, you can assemble a set of criteria (or \u0026lsquo;filters\u0026rsquo;) and WebLogic Remote Console will match them against any bean in your domain and return the results. Because you control the filters of the dashboard, you control what you see and can determine the importance of the results, updating the dashboard as needed.\nDashboards are only available for Administration Server providers (in the Monitoring Tree perspective).\nFilters Filters in dashboards are the criteria that you use to curate your results. Each filter consists of a name or property from the domain, a value, and an operator.\nWebLogic Remote Console limits which filters are available to a dashboard depending on where you are in the WebLogic Remote Console. For example, if you create a dashboard from the Environment/Servers node, the property filters are based on the properties in the columns of the Servers table, whereas the property filters in the Deployments/Application Runtime Data node are based on the properties in the columns of the Application Runtime table.\nValues may be in text, numeric or Boolean form depending on the name or property. You cannot add a text value into a numeric filter. Boolean values are displayed as toggles. Set the toggle to On for True, Off for False.\nOperators control how a value is assessed. You can filter values using the following operators: Any, Equals, Not Equals, Contains, Less Than, Less Than or Equals, Greater Than, Greater Than or Equals. Only the operators that are applicable to a name or property appear as options. By default, all filters are set to Any to provide the broadest search parameters.\nYou only need to add values to the filters that matter to your dashboard. Additionally, filters are cumulative - beans must match ALL of the defined filters to be returned as a result.\nCreate a dashboard  In the Monitoring Tree perspective of an Administration Server provider, expand a node in the Navigation Tree related to the type of content you want to see. For example, if you want to learn about servers, open the Environment/Servers node. Click New Dashboard. Enter a name for your new dashboard and then begin specifying the filters that will populate the results of the dashboard. Click Create to generate the dashboard.  Click Customize Table to show or hide relevant columns in the dashboard.\nClick on an entry in the View table to open that bean in the Content Pane.\nAny changes to beans will not be reflected in the dashboard until you refresh the page. Click Reload to update the results. You can also click Auto Reload Interval to set the dashboard to regularly reload and update the results.\nYou can return to this dashboard at any time. Previously created dashboards appear under the Dashboards node in the Navigation Tree.\nEdit a dashboard  In the Navigation Tree, expand Dashboards and select the dashboard that you want to edit. In the Content Pane, select the Edit tab. Update the filters to match your new requirements. Click Save.  Delete a dashboard  In the Navigation Tree, select Dashboards. Beside the dashboard that you want to delete, click the delete icon.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/providers/property-list/",
	"title": "Property lists",
	"tags": [],
	"description": "How to configure property lists in the WebLogic Remote Console",
	"content": "Property lists are an editable set of key-value pairs.\nYou can add property lists to WDT model files as WDT variables, which streamline the configuration of WDT model files. Once connected to a WDT model file, you can insert a property into the WDT model file as a WDT model token and edit token values from within the property list.\nCreate a new property list  Open the Providers drawer and beside the project name, click ⋮. Select Create Provider for New Property List. Enter a name for the property list provider. This is the name that will appear in the Project list of providers so you can identify which provider you\u0026rsquo;re working on. Enter a name for the property list file in the Property List Filename field. Include .properties or .props at the end of the file name. Click and browse to the directory where you want to save the new property list file. Click OK to create the file.  Upload an existing property list If you\u0026rsquo;ve already created a property list file, you can upload it to WebLogic Remote Console where you can continue to edit it.\nProperty lists are generally .properties or .props files though the WebLogic Remote Console supports other text file formats. In any case, each key-value pair must be on a new line and names and values must be separated by =, :, or spaces. For example, key=value / key:value / key value. See Properties (JDK 17) for more information on Java property list formatting.\n Open the Providers drawer and beside the project name, click ⋮. Select Add Property List Provider. Enter a name for the property list provider. This is the name that will appear in the Project list of providers so you can identify which provider you\u0026rsquo;re working on. Click and browse to the property list file. Click OK to upload the file.  Edit a property list If the property list you edit is connected to a WDT model file as a WDT variable, any changes you make to a property name will not be reflected in the WDT model file. The WDT model file assumes you\u0026rsquo;ve added an entirely new property and the former WDT variable becomes a standalone WDT model token that\u0026rsquo;s not associated with the property list.\n Open the Providers drawer and select the property list you want to edit. Click Property List Editor and then the Properties node. Click the + in the table header row to add a new row to the table. Enter a new property name and property value. To delete a row, click Delete beside the property row that you want to delete. You can also reorder the properties alphabetically (or reverse-alphabetically) by clicking the arrows in the title bar. Click Save Now to save your changes to the property list file.  Delete a property list This will only remove the property list from the WebLogic Remote Console. The file will remain in the location designated on your computer.\nIf you delete a property list that\u0026rsquo;s connected to a WDT model file, the WDT model file will remain unchanged but all WDT variables are converted to standalone WDT model tokens.\n Open the Providers drawer and beside the property list you want to delete, click the Delete icon.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/advanced-settings/",
	"title": "Customize settings",
	"tags": [],
	"description": "A description of settings you can configure in the WebLogic Remote Console.",
	"content": "You can customize the settings of the WebLogic Remote Console to fit your needs.\n In the WebLogic Remote Console, go to File \u0026gt; Settings. (WebLogic Remote Console \u0026gt; Settings on macOS). Choose a section tab and make your changes as needed. Click Save to apply your changes.  Customizations include:\n Networking  Connect to a WebLogic domain using SSL/TLS  Configure a proxy server Change the network timeout settings for the server  Disable host name verification in the connections to the WebLogic domain    Other Java System Properties  Set the SameSite cookie attribute if required for web browser support  Specify an alternative location for the JDK Specify a custom logging configuration file    Networking The Networking section manages connection related settings for the WebLogic Remote Console.\nYou can learn about other system properties related to networking at Networking Properties in the Java Platform, SE and JDK 11 API Specification. To avoid unexpected behavior, make sure your settings don\u0026rsquo;t conflict with each other.\nConnect to a WebLogic domain using SSL/TLS If you specify HTTPS for the domain URL in the Connect to WebLogic Domain window, then the WebLogic Remote Console uses SSL/TLS to communicate with the WebLogic domain.\nThe SSL/TLS connection requires trust in the WebLogic domain, where the trust configuration is handled by the underlying JDK JSSE support. By default, the JDK uses the cacerts truststore provided with the JDK. If the WebLogic domain requires additional trust, separate trust, or is using the WebLogic demo trust (demotrust.jks), then you\u0026rsquo;ll need to configure SSL/TLS trust using one of these options:\n  Import the required trust certificates into the cacerts truststore supplied with the JDK using the keytool command.\n  Configure the type and location of the trust store.\n In the WebLogic Remote Console, go to File \u0026gt; Settings. (WebLogic Remote Console \u0026gt; Settings on macOS). Under the Networking section, in the Trust Store Type field, enter the algorithm name for your trust store. See JDK Providers Documentation for specific algorithm names. Depending on the Trust Store Type that you provide, additional fields may appear.  Click Choose a trust store file to browse to the file location of your trust store. Click Change beside Trust Store Key. Enter the secret for your trust store key and click Save to add the secret.   Click Save to apply your changes.    Configure a proxy server You may need to configure settings for a proxy server to facilitate communication between a WebLogic Server domain that resides in a different network and the WebLogic Remote Console. You can configure a global proxy server that applies to all administration server connections or assign proxy server settings individually to each administration server connection. You can also configure a combination of global and individual settings; the individual proxy server settings will supersede the global proxy server settings.\nConfigure global proxy server settings  In the WebLogic Remote Console, go to File \u0026gt; Settings. (WebLogic Remote Console \u0026gt; Settings on macOS). Under the Networking section, in the Proxy Address field, enter the address of the proxy server, including both the host name and port. Click Save to apply your changes.  This proxy server will apply to all administration server connections (unless superseded by an individual proxy server setting).\nBecause you can also use Java system properties to configure proxy server settings, it is technically possible to create multiple global proxy servers. We do not recommend this as configuring multiple global proxy servers can lead to unexpected behavior. The proxy server value in the Settings dialog box takes precedence over all other global proxy server settings. Additionally, if you use Java system properties to add one proxy server that uses HTTPS and another that uses SOCKS, the WebLogic Remote Console will ignore the SOCKS proxy server.\nConfigure individual proxy server settings   Open the Providers drawer.\n  Beside the Administration Server provider where you want to configure a proxy server, click the Settings icon.\n  In the Proxy Override field, enter the address of the proxy server, including both the host name and port.\nNOTE: If you want the WebLogic Remote Console to make a direct connection and bypass a global proxy server setting, enter DIRECT.\n  Click OK.\n  Individual proxy server settings take precedence over global proxy server settings.\nChange the network timeout settings for the server You can change the default settings for the connection and read timeout limits used with a WebLogic domain from the WebLogic Remote Console.\n In the WebLogic Remote Console, go to File \u0026gt; Settings. (WebLogic Remote Console \u0026gt; Settings on macOS). Under the Networking section, in the Administration Server Connection Timeout field, specify an interval (in milliseconds) to determine how long the WebLogic Remote Console should wait when for a successful connection to a domain. The default is 10 seconds (10 000 milliseconds). Then, in the Administration Server Read Timeout field, specify an interval (in milliseconds) to determine how long the WebLogic Remote Console should wait for a response from the server. The default is 20 seconds (20 000 milliseconds). Click Save to apply your changes.  When changing network timeout settings, the primary impact will be to the response time for Console threads, while the application will show no data when a timeout occurs. Timeouts are more likely to occur during requests where WebLogic Server experiences longer initialization or execution times, such as during runtime monitoring actions of servers.\nDisable host name verification in the connections to the WebLogic domain When using WebLogic demo trust to connect to the WebLogic domain, you may need to disable host name verification. Disabling host name verification causes the WebLogic Remote Console to skip the verification check of ensuring that the host name in the URL to which a connection is made matches the host name in the digital certificate that the server sends back as part of the SSL connection.\nWe do not recommend using the demo certificates or turning off host name verification in production environments.\n  In the WebLogic Remote Console, go to File \u0026gt; Settings. (WebLogic Remote Console \u0026gt; Settings on macOS). Under the Networking section, under Disable Host Name Verification?, select Yes or No to enable or disable host name verification, respectively. Click Save to apply your changes.  Other Java System Properties The Other Java System Properties section lets you use Java system properties to customize the WebLogic Remote Console if a specific setting is not available elsewhere in the Settings dialog box.\nOpen the Settings dialog box and select the Other Java System Properties section. Click + to add a new row and enter the Java system property as a name-value pair, separated by =. For example, server.port=8092.\nTo delete a property, select the row and click -.\nIf an equivalent setting already exists in the Settings dialog box, we recommend using that configuration option instead of the Java system property. For example, use the Proxy Address option under Networking rather than https.proxyHost and https.proxyPort.\n Set the SameSite cookie attribute if required for web browser support When the WebLogic Remote Console establishes a connection with the WebLogic Domain, a HTTP cookie is established with the Web Browser session.\nFor security reasons, the SameSite attribute of the HTTP cookie may need to be set for the Web Browser to accept the HTTP session cookie. There are two settings that control the Remote Console behavior:\n In the WebLogic Remote Console, go to File \u0026gt; Settings. (WebLogic Remote Console \u0026gt; Settings on macOS). Under the Other Java System Properties section, click + to add a new row and enter console.enableSameSiteCookieValue=true to include the SameSite attribute in the HTTP cookie. click + again and add console.valueSameSiteCookie=\u0026lt;value\u0026gt; to specify the value of the SameSite attribute. Possible values are Strict or Lax. The default is Lax. Click Save to apply your changes.  Specify an alternative location for the JDK You can configure the WebLogic Remote Console to use a JDK at a different location.\n In the WebLogic Remote Console, go to File \u0026gt; Settings. (WebLogic Remote Console \u0026gt; Settings on macOS). Under the Other Java System Properties section, click + to add a new row and enter javaPath=\u0026lt;pathToJDK\u0026gt;. Click Save to apply your changes.  Specify a custom logging configuration file You can override the default logging configuration if you want the WebLogic Remote Console to collect logging information that is more useful to you. The custom logging configuration file must follow the Java format for configuration files. You can see an example of a Java logging configuration file at $JAVA_HOME/conf/logging.properties.\n In the WebLogic Remote Console, go to File \u0026gt; Settings. (WebLogic Remote Console \u0026gt; Settings on macOS). Under the Other Java System Properties section, click + to add a new row and enter java.util.logging.config.file=\u0026lt;path-to-logging.properties\u0026gt;. Click Save to apply your changes.  If a problem occurs with your custom logging configuration file, WebLogic Remote Console will fallback to use its default logging configuration file. STDOUT includes a log message indicating which file was used.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Chapter heading for reference material",
	"content": "Reference "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/reference/troubleshoot/",
	"title": "Troubleshoot issues",
	"tags": [],
	"description": "Common issues with simple troubleshooting steps.",
	"content": "Learn how to prevent and recover from issues in the WebLogic Remote Console.\nBasic troubleshooting steps  Review Known issues to see if there is a workaround. Check the log files for errors. The WebLogic Remote Console provides log files for both front and back end processes. See Check Log Files to learn how to access these files. Update to the latest versions of the WebLogic Remote Console and the WebLogic Remote Console extension.   Issue: Connectivity issues If you\u0026rsquo;re having trouble connecting to your Administration server from the WebLogic Remote Console, here are some steps you can take to identify and fix the issue.\n  Use curl to test access to the Administration server:\n For HTTP, run: curl -v --user \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; http://\u0026lt;adminServerHost\u0026gt;:\u0026lt;adminServerPort\u0026gt;/management/weblogic/latest/domainConfig For HTTPS, run: curl -v -k --user \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; https://\u0026lt;adminServerHost\u0026gt;:\u0026lt;adminServerPort\u0026gt;/management/weblogic/latest/domainConfig  If the curl command was successful on an HTTPS connection, the connection issues are likely because the WebLogic Remote Console does not trust the SSL certificate of the Administration server. To fix this, you can either import the Administration server\u0026rsquo;s certificate into your client\u0026rsquo;s keystore, or, if you\u0026rsquo;re using demo certificates, turn on the Insecure Connection option when connecting to Administration server.\nIf you receive a 401 error after running the curl command, make sure that the WebLogic user is assigned one of the following roles: Admin, Deployer, Operator or Monitor.\n  If the WebLogic Server domain is in a different network, configure the proxy server of the WebLogic Remote Console.\n  If your domain is in a Docker container or behind a load-balancer, make sure to open a port that makes your Administration server\u0026rsquo;s management URL accessible to clients.\n   Issue: Invalid WebLogic configuration error You may encounter this error when making changes to an Administration Server provider. The WebLogic Remote Console checks for validation errors when you click Save, or when you commit the change using the Shopping Cart. If an error message occurs, you must identify and correct the problem before you can activate the changes.\nIf you installed the console extension, you can review all pending changes in the Shopping Cart.\n If the cause of the configuration error is not obvious:\n Check the output from the WebLogic Remote Console and the Administration Server. Check the WebLogic Administration Server log.  If you cannot determine the cause of the error, try discarding your configuration changes and then making them one at a time to isolate the change responsible for the error.\n Issue: WDT model files are invalid (and therefore cannot build a domain) The WebLogic Remote Console does not validate the data that you insert into WDT model files. As a result, the WebLogic Remote Console may accept changes or values that are invalid and which may present problems when the model file is used to build or update a domain. For example, adding integer values that are invalid or out of range for a specific setting, or removing a server or target but not updating the deployments to select a different server or target can cause issues.\nFor more information on acceptable values, refer to the WebLogic Deploy Tooling documentation.\n Issue: Failure reading auto prefs error If the WebLogic Remote Console application shuts down unexpectedly with this error: Failure reading auto prefs, the auto-prefs.json file may be corrupted. auto-prefs.json saves state information about the WebLogic Remote Console and should not be modified by users unless it is corrupted.\nIf the file is corrupted, you can reset it but you will lose all data regarding your projects.\nTo reset the file, delete the auto-prefs.json file, then relaunch the WebLogic Remote Console.\nauto-prefs.json is located in:\n Linux: $HOME/.config/weblogic-remote-console/auto-prefs.json macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/auto-prefs.json Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\auto-prefs.json   Issue: The Edit Tree / start and stop buttons / create buttons / \u0026hellip; is missing Check the role of the user you used to log into the Administration Server. Only administrators have access to the full functionality of WebLogic Remote Console. Users with other roles such as Deployers, Operators, or Monitors have limited access to areas outside the scope of their responsibility.\nFor an overview of what users in each role can view or do, see Understand Access Discrepancies.\n Issue: The domain is experiencing REST communication issues between servers The Administration Server uses REST to communicate with itself and its Managed Servers. When REST communication is blocked, the Monitoring perspective of WebLogic Remote Console can neither report accurate information on the statuses or statistics of Managed servers nor perform most management tasks. Also, the Edit perspective cannot create or remove deployments.\nTo test the REST connection:\n Get the Administration Server\u0026rsquo;s runtime statistics directly.    For HTTP, run:\ncurl -v --user \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; http://\u0026lt;adminServerHost\u0026gt;:\u0026lt;adminServerPort\u0026gt;/management/weblogic/latest/serverRuntime\n  For HTTPS, run:\ncurl -v -k --user \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; https://\u0026lt;adminServerHost\u0026gt;:\u0026lt;adminServerPort\u0026gt;/management/weblogic/latest/serverRuntime\nIf the command fails, then a more general connectivity issue is affecting your domain. See \u0026lsquo;Connectivity Issues\u0026rsquo; for next steps.\n  Get the Administration Server\u0026rsquo;s runtime statistics indirectly.    For HTTP, run:\ncurl -v --user \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; http://\u0026lt;adminServerHost\u0026gt;:\u0026lt;adminServerPort\u0026gt;/management/weblogic/latest/domainRuntime/serverRuntimes/\u0026lt;adminServerName\u0026gt;\n  For HTTPS, run:\ncurl -v -k --user \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; https://\u0026lt;adminServerHost\u0026gt;:\u0026lt;adminServerPort\u0026gt;/management/weblogic/latest/domainRuntime/serverRuntimes/\u0026lt;adminServerName\u0026gt;\nIf this command fails, then the problem is a REST communication failure between servers.\n  You need to identify and resolve the issue affecting REST communication. REST issues are often due to flawed domain configurations. Possible causes include, but are not limited to:\n Removing the default Credential Mapping provider Removing the default Identity Asserter provider Removing weblogic-jwt-token from the default Identity Asserter provider\u0026rsquo;s Active Types Applying incompatible REST invocation policies to the WebLogic Server REST API. For example, using Oracle Web Services Manager (OWSM) to protect the domain may inadvertently restrict access to the REST API.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/develop/docs-contribute/",
	"title": "Contribute to the documentation",
	"tags": [],
	"description": "How to contribute to the WebLogic Server documentation",
	"content": "The WebLogic Remote Console documentation is produced using the Hugo static site generator. The webpages are created in markdown and hosted within the same repository as the WebLogic Remote Console. This makes it easy to suggest edits and improvements directly to the documentation.\nTo make an update to the documentation:\n  Clone the repository.\n$ git clone https://github.com/oracle/weblogic-remote-console   Create a new branch.\n$ git checkout -b \u0026lt;your-branch\u0026gt;   Make your changes to the documentation. Edit the markdown source files in hugo/staging/content.\n  Build the site locally to view your changes.\ncd hugo/staging hugo server -b http://localhost:1313/weblogic-remote-console View the local site at http://localhost:1313/weblogic-remote-console/.\n  When you are ready to submit your changes, push your branch to origin and submit a pull request. Remember to follow the guidelines in the Contribute to the WebLogic Remote Console document.\nMake sure that you only check in changes from the hugo/staging/content area. Do not build the site and try to commit the static files.\n   "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/reference/security-warnings/",
	"title": "Review security issues",
	"tags": [],
	"description": "Review and resolve potential security issues in your WebLogic Server domain",
	"content": "WebLogic Server regularly checks domains to ensure they comply with its recommended security policies. If a domain does not meet the recommendations, a security warning is logged and displayed in the WebLogic Remote Console.\nYou must have the July 2021 Patch Set Update (PSU) for WebLogic Server applied to your domain to receive security warnings.\n When there are active security warnings in your domain, a banner with red text appears at the top of the WebLogic Remote Console window. Click the banner to see the current security warnings. You can also get to the security warnings pages through Monitoring \u0026gt; Environment \u0026gt; Domain Security Runtime.\nSecurity policy violations that can trigger a warning include outdated TLS versions, patch updates, and certificates, among others. To protect your domain, resolve these warnings as soon as possible. The same issue can affect multiple servers within your domain simultaneously so make sure to fix the issue on every affected server. Depending on the problem and its resolution, you may need to restart servers to clear the security warnings.\nSome level of security validation occurs in all domain modes but is most strict in secured production mode and least strict in development mode.\nIf you think certain policies don\u0026rsquo;t apply to your environment or are not feasible to implement with your business needs, you can disable individual security checks (with the exception of the minimum JDK version check).\nSee Review Potential Security Issues in Securing a Production Environment for Oracle WebLogic Server for more information.\nDo not rely on the Security Warnings Report alone to determine the security of your domain. While these security configuration settings cover a broad set of potential security issues, other security issues that do not generate warnings may still exist in your domain.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/upgrade/",
	"title": "Upgrade the WebLogic Remote Console",
	"tags": [],
	"description": "Instructions for upgrading the WebLogic Remote Console",
	"content": "Upgrade to the latest WebLogic Remote Console and take advantage of the latest features in both the console and WebLogic Server.\nThe WebLogic Remote Console extension is periodically updated. Check if there\u0026rsquo;s also a newer version of the extension available when you upgrade the WebLogic Remote Console.\nDelete and replace any previous versions of the extension. Keeping multiple versions of the extension installed can lead to unexpected behavior.\n   Open Help \u0026gt; Check for WebLogic Remote Console Updates.\n  Select Download and install it to download the update immediately. The update runs in the background so you can continue working in the WebLogic Remote Console with no interruption. The next time the console is launched, the updates will apply.\nSelect Go to site to go to the GitHub repository where you can download the update manually.\n  If you\u0026rsquo;re on Windows and upgrading from 2.2.0 or earlier, the upgrade may fail when attempting to uninstall the previous version. To fix it, edit the PATH environment variable to ensure that %SystemRoot%\\system32 is the first entry that contains the find command, then retry the upgrade.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/providers/wdt-model/",
	"title": "WDT model files",
	"tags": [],
	"description": "How to configure WDT model files in the WebLogic Remote Console",
	"content": "WDT metadata models are descriptions of a WebLogic Server domain configuration, generally written in YAML but occasionally JSON. These models are not connected to a live domain and you edit them \u0026lsquo;offline\u0026rsquo; before using the WebLogic Deploy Tooling (WDT) to build or modify live domains from the models.\nSee the WebLogic Deploy Tooling documentation for more information.\nThe WebLogic Remote Console assumes WDT model files are in YAML format. If you upload a file with no file extension, the WebLogic Remote Console will convert it to YAML format after you save your changes.\n Create a new WDT model file  Open the Providers drawer and beside the project name, click ⋮. Select Create Provider for New WDT Model File. Enter a name for the WDT model file provider. This is the name that will appear in the Project list of providers so you can identify which provider you\u0026rsquo;re working on. Enter a name for the WDT model file in the WDT Model Filename field. Include .yaml or .json at the end of the file name. Click and browse to the directory where you want to save the new WDT model file. Optional: Enable Use Sparse Template to create a WDT model file which does not contain any references to an Administration Server. Optional: Choose a property list provider from the WDT Variables dropdown list. If you add WDT variables to your WDT model file, you can update the variables in your WDT model file from a single location - the property list provider. If you don\u0026rsquo;t have a property list provider yet, you can edit the WDT model file settings later to add or change the associated WDT variables. See WDT Model Tokens for more information. Click OK to create the file.  Upload an existing WDT model file If you\u0026rsquo;ve already created a WDT model file, you can upload it to WebLogic Remote Console where you can continue to edit it.\n Open the Providers drawer and beside the project name, click ⋮. Select Add WDT Model File Provider. Enter a name for the model in the Model Name field. This is the name that will appear in the Project list of providers so you can identify which provider you’re working on. Click and browse to the WDT model file (a YAML or JSON file). Optional: Choose a property list provider from the WDT Variables dropdown list. If you add WDT variables to your WDT model file, you can update the variables in your WDT model file from a single location - the property list provider. If you don\u0026rsquo;t have a property list provider yet, you can edit the WDT model file settings later to add or change the associated WDT variables. See WDT Model Tokens for more information. Click OK to upload the file.  Edit a WDT model file   Open the Providers drawer and select the WDT model file you want to edit.\n  Click WDT Model Tree and make your changes to the domain configuration. Make sure to click if you want to enter a model token.\n   Option Description     Default (unset) Restore field to its default value.   Select Value Select a reference to a component that exists in the current WDT model file.   Enter Value Enter a fixed value.   Enter Model Token Enter a WDT model token.   Enter Unresolved Reference Enter a reference to a component that does not exist in the current WDT model file but will exist at a later point.   Select Model Token Variable Select a model token variable from the list of available options. The WDT model file must be connected with a property list to see this option.   Create Model Token Variable Enter a Variable Name and Variable Value to create a new model token variable. New model token variables are added to the connected property list. The WDT model file must be connected with a property list to see this option.    The WebLogic Remote Console auto-saves any changes you make to the WDT model file. You don\u0026rsquo;t need to commit changes to WDT model files.\n  After you finish making changes, you can click Save Now to ensure all changes are saved and downloaded to your computer.\n  If you want to restore fields to their default value, right-click on a field and click Restore to default.\n WDT model tokens WDT model tokens are variables that you can use to replace fixed values in WDT model files. With WDT model tokens, WDT model files become more versatile - you can create a single WDT model file with model tokens and when you build a domain from it, you only need to update the model token values, rather than create multiple, static WDT model files.\nThere are several types of model tokens including variable tokens, file tokens, and so on. Model tokens follow this format: @@TYPE:KEY@@, where TYPE is the model token type and KEY is the variable value. For example, you can declare a variable token by entering @@PROP:ABCDE@@ into a field.\nSee WDT Model Tokens in the WebLogic Deploy Tooling documentation for more information.\nWDT variables WDT variables make it even easier to manage WDT model tokens in the WebLogic Remote Console. When you add WDT variables to your WDT model file, you create a link between the WDT model file and a property list. You can then pull in properties from the property list and use them as WDT model tokens. Then, when you want to update a property value, just open the associated property list and make your changes there.\nYou can use both standalone WDT model tokens and WDT variables in a WDT model file, but only one property list provider per WDT model file. Multiple WDT model files can use the same property list.\nDelete a WDT model file This will only remove the WDT model file from the WebLogic Remote Console. It will remain in the location designated on your computer.\nThis will not delete any associated property list providers.\n Open the Providers drawer and beside the WDT model file, click the icon.  Build a WebLogic Server domain When you\u0026rsquo;re satisfied with the properties of your WDT model file, you can transform it into a live WebLogic Server domain with WebLogic Deploy Tooling (WDT).\n Save the WDT model file in WebLogic Remote Console. Make a note of the location of the YAML or JSON file on your computer. If you haven\u0026rsquo;t already, download WDT from its GitHub repository. Follow the instructions in the WDT Documentation for building a domain from a model.  If WDT reports an error when opening the WDT model file from WebLogic Remote Console, upgrade your WDT to the latest available version and try again.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/logging/",
	"title": "Check log files",
	"tags": [],
	"description": "Instructions for the accessing log files for the WebLogic Remote Console",
	"content": "You can inspect log files to ensure that the WebLogic Remote Console is functioning correctly.\nFront end To view the log file for issues related to the front end of the WebLogic Remote Console:\nOpen Help \u0026gt; Toggle Developer Tools and select the Console tab.\nBack end To view the log file for issues related to the back end of the WebLogic Remote Console:\nOpen the out.log file in a text editor. The out.log file is located in:\n Linux: $HOME/.config/weblogic-remote-console/out.log macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/out.log Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\out.log  out.log maintains log entries for the current session of the WebLogic Remote Console. When you open a new session, the log entries from the previous session are moved to a new file marked by date: out-yyyy-mm-dd.log (in the same folder as out.log).\nIf you want to change the default logging configuration for back end log files, see Specify a custom logging configuration file.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/setup/admin-console-diff/",
	"title": "Differences with the Administration Console",
	"tags": [],
	"description": "An overview of the differences with the Oracle WebLogic Administration Console.",
	"content": "The WebLogic Remote Console is distinct from the WebLogic Server Administration Console that is deployed as part of your WebLogic domain. As you explore the WebLogic Remote Console, you\u0026rsquo;ll notice key differences between the two consoles:\n The user interface has been completely redesigned to conform to the Oracle Redwood theme included with Oracle JET. The configuration and monitoring runtime content is separated into separate pages in the Remote Console. In the WebLogic Server Administration Console, the configuration and runtime information is presented on one page. The Change Center is now expressed as a Shopping Cart with a list of pending changes. After you\u0026rsquo;re committed your changes, you can see which servers require a restart on the Monitoring Perspective \u0026gt; Environment \u0026gt; Servers page. Instead of logging directly into the Administration Console deployed in a WebLogic domain, the Remote Console connects to the Administration Server in a WebLogic domain, with the credentials supplied by the user, using WebLogic REST APIs. Objects that were previously represented in a JNDI tree now appear as entries in a table under the JNDI tab on the Monitoring \u0026gt; Environment \u0026gt; Servers \u0026gt; serverName page.  For information on the WebLogic Server Administration Console, see the online help for 12.2.1.3, 12.2.1.4, or 14.1.1.0.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/providers/wdt-composite/",
	"title": "WDT composite models",
	"tags": [],
	"description": "How to manage WDT composite models",
	"content": "WDT composite models are read-only representations of multiple, merged WDT model files.\nCreate a WDT composite model   Create or upload two or more WDT model files to the WebLogic Remote Console.\n  Open the Providers drawer and beside the project name, click ⋮. Select Add WDT Composite Model File Provider.\n  Enter a name for the WDT Composite Model. This is the name that will appear in the Project list of providers so you can identify which provider you’re working on.\n  Click inside the WDT Models field to see a list of available WDT Models. Select the WDT models that you want to appear in the WDT Composite Model in the order that you want them to appear. Only WDT model files in the current project will appear.\nPay attention to the order that the WDT model files are added - each subsequent WDT model file overrides the properties of the previous file. That is, if there are any conflicting properties, the properties of the last WDT model file added to the composite takes precedence.\n  Click OK to create the WDT composite model.\n  Edit a WDT composite model You can add or remove WDT model files from a WDT composite model as necessary.\n Open the Providers drawer and beside the WDT composite model file provider that you want to edit, click the icon. Edit the WDT composite model provider name if you want. Add or remove WDT model files. Click OK to save your changes.  View the details of a WDT composite model It\u0026rsquo;s easy to check which WDT model files are contained within a WDT composite model.\n Open the Providers drawer and beside the WDT composite model file provider, click the icon.  A list of the WDT models within that WDT composite model appears. The provider ID is also shown.\nDelete a WDT composite model This will not delete the individual WDT models contained within the WDT composite model.\n Open the Providers drawer and beside the WDT composite model file provider that you want to delete, click the icon.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/userguide/role-access/",
	"title": "Understand access discrepancies",
	"tags": [],
	"description": "How user roles affect what you see in the WebLogic Remote Console",
	"content": "The WebLogic Remote Console restricts what non-administrator users can see or do. Users with the roles Deployer, Monitor, or Operator are only shown the areas and features necessary for their role. These restrictions range from broad (hiding the entire Edit Tree perspective from users in the Monitor role) to narrow (hiding Create buttons on some pages). For full access to all the functionality of the WebLogic Remote Console, log in as an administrator.\nThe scope of these restrictions is too extensive to list comprehensively but the table below provides some examples.\nThese restrictions are based on the default security policies assigned to each role. If you customize the policies to add or remove access beyond the default, those changed permissions will not be reflected in the WebLogic Remote Console. It will continue to hide or show functionality based on the default security policies.\nSee Users, Groups, and Security Roles in Securing Resources Using Roles and Policies for Oracle WebLogic Server for more information. You may also find Default Security Policies for MBeans in WebLogic Server MBean Reference helpful.\n    Role Limitations     Administrator No limitations. Administrators have full access to all functionality in the WebLogic Remote Console.   Deployer Can view but not edit server or domain configurations; Can modify areas related to application deployment including some JDBC and JMS resources.   Monitor Read-only access to the WebLogic Remote Console.   Operator Can start and stop servers but cannot see the Edit Tree perspective.    "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/",
	"title": "WebLogic Remote Console",
	"tags": [],
	"description": "An introduction to the WebLogic Remote Console.",
	"content": "WebLogic Remote Console The WebLogic Remote Console is a lightweight, open source console that you can use to manage domain configurations of WebLogic Server Administration Servers or WebLogic Deploy Tooling (WDT) metadata models.\nThe advantage of the WebLogic Remote Console is that it does not need to be colocated with the WebLogic Server domain. You can install and run the WebLogic Remote Console from one computer and connect to a domain running anywhere: a physical or virtual machine, in a container, Kubernetes, or in the Oracle Cloud. The WebLogic Remote Console connects to your domain using WebLogic REST APIs.\nAs for the WDT metadata models, they are descriptions of a WebLogic Server domain configuration, generally written in YAML but occasionally JSON. These models are not connected to a live domain and you edit them \u0026lsquo;offline\u0026rsquo; before using the WebLogic Deploy Tooling (WDT) to build or modify live domains from the models. See the WebLogic Deploy Tooling documentation for more information.\nSimply launch WebLogic Remote Console and connect to an Administration Server or WDT model.\nThe WebLogic Remote Console is fully supported with WebLogic Server 12.2.1.3, 12.2.1.4, and 14.1.1.0.\nKey features of the WebLogic Remote Console The WebLogic Remote Console provides an alternative WebLogic Server administration GUI that enables REST-based access to WebLogic management information, in alignment with current cloud-native trends. When connected to a WebLogic domain or model using the WebLogic Remote Console, you can:\n Configure WebLogic Server instances and clusters Create or modify WDT metadata models Create or modify property lists Configure WebLogic Server services, such as database connectivity (JDBC), and messaging (JMS) Deploy and undeploy applications Start and stop servers and applications Monitor server and application performance  For detailed information on the fields and procedures of the WebLogic Remote Console, you can often reference the online help of the WebLogic Administration Console: 12.2.1.3, 12.2.1.4, or 14.1.1.0.\nHowever, although the WebLogic Remote Console and the WebLogic Administration Console are similar, there are differences between them. See Differences for details on how they differ.\nGet started It\u0026rsquo;s simple to install the WebLogic Remote Console and get up and running within moments. See Install WebLogic Remote Console for instructions.\n What\u0026rsquo;s new The current release of the WebLogic Remote Console is 2.4.9. This release was published in May 2024.\nNew features\n Simplified configuration for application deployment   Previous Releases Documentation for prior releases of the WebLogic Remote Console:\n 2.4.8 2.4.7 2.4.6 2.4.5 2.4.4 2.4.2 2.4.1 2.4.0 2.3.0 2.2.0 2.1.0 2.0.0 1.1.0  Need more help? Have a suggestion? Come and say, \u0026ldquo;Hello!\u0026rdquo; We have a Slack channel where you can get in touch with us to ask questions about using the WebLogic Remote Console or give us feedback or suggestions about what features and improvements you would like to see. We would love to hear from you. To join our channel, please visit this site to get an invitation. The invitation email will include details of how to access our Slack workspace. After you are logged in, please come to #remote-console and say, \u0026ldquo;hello!\u0026rdquo;\nRelated Projects  WebLogic Deploy Tooling WebLogic Kubernetes Toolkit User Interface  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]