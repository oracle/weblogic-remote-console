[
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/posts/install_config/",
	"title": "Install and Configure the WebLogic Remote Console",
	"tags": [],
	"description": "Instructions on how to install and use the WebLogic Remote Console",
	"content": " Console Prerequisites Download the Remote Console Install the Remote Console Extension in the WebLogic Server Domain Start the Remote Console and Connect to a Domain Connect to a WebLogic Domain using SSL/TLS Connect to a WebLogic Domain Running on Kubernetes Stop the Remote Console Advanced Configuration  Console Prerequisites If you run the WebLogic Remote Console using the console.zip method, your machine must have Java SE 11 or later installed.\nTo verify your Java version:\njava -version Java is bundled with the Remote Console desktop application so you do not need to install it separately.\nDownload the Remote Console The installers for the WebLogic Remote Console desktop applications are available for download at https://github.com/oracle/weblogic-remote-console/releases. Applications are available for the Linux, macOS, and Windows operating systems.\nTo run the Remote Console in your browser instead, download console.zip and extract the ZIP archive to a directory of your choice. Once its contents are extracted, it creates a console directory that includes:\n The console executable file console.jar The libraries required to use the console in the libs subdirectory The console extension, console-rest-ext-1.0.war, that you install in the WebLogic Server domain  Install the Remote Console Extension in the WebLogic Server Domain To get the most functionality when using the WebLogic Remote Console, we recommend that you install the Remote Console extension in your domain.\nThe extension is supported for WebLogic Server 12.2.1.3, 12.2.1.4, and 14.1.1.0 domains.\n  Create a management-services-ext directory under the domain home. Download the console-rest-ext-1.0.war from https://github.com/oracle/weblogic-remote-console/releases and save it in the management-services-ext directory you created in the previous step. Reboot the Administration Server if it is already running.  Start the Remote Console and Connect to a Domain Make sure the Administration Server in the domain to which you want to connect is running.\nRemote Console Application To start the Remote Console on a local machine using the default settings:\n  Open the Remote Console desktop application.\n  In the Connect to WebLogic Domain window, enter the Administrator user name, password, and the URL of the domain, then click Connect.\n  Remote Console in the Browser To start the Remote Console on a local machine using the default settings - localhost (127.0.0.1) and port 8012:\n  Open a command window and on the command line, enter:\njava -jar \u0026lt;console_home\u0026gt;/console.jar In this command, \u0026lt;console_home\u0026gt; is the directory where you unzipped the installer.\n  Open a browser window and enter:\nhttp://localhost:8012   In the Connect to WebLogic Domain window, enter the Administrator user name, password, and the URL of the domain, then click Connect.\n  To connect to a domain using the HTTPS protocol, see Connect to a WebLogic Domain using SSL/TLS.\nNote the following in this release:\n Only one active WebLogic Domain connection or session is allowed at a time. If another browser tab is opened, the console loads and reuses the existing WebLogic Domain connection from the new tab. If the same user establishes a connection with the same domain from a separate browser (or restarts the browser), then the original connection is shared. The active session is maintained in memory. After connecting, the session is valid until you disconnect or shut down the console process. The original connection/session is terminated if another user and/or another domain is used when the connection is made.  Connect to a WebLogic Domain using SSL/TLS If you specify HTTPS for the domain URL in the Connect to WebLogic Domain window, then the WebLogic Remote Console uses SSL/TLS to communicate with the WebLogic domain.\nThe SSL/TLS connection requires trust in the WebLogic domain, where the trust configuration is handled by the underlying JDK JSSE support. By default, the JDK uses the cacerts truststore provided with the JDK. If the WebLogic domain requires additional trust, separate trust, or is using the WebLogic demo trust (demotrust.jks), then you can use the JDK system properties when starting the Remote Console.\nYou can configure SSL/TLS trust with the JDK using one of these options:\n  Import the required trust certificates into the cacerts truststore supplied with the JDK using the keytool command.\n  Update the JDK Java system properties for JSSE support at the command line (browser only). For example:\njava -Djavax.net.ssl.trustStore=\u0026quot;/home/user/mytrust.jks\u0026quot; -Djavax.net.ssl.trustStoreType=\u0026quot;JKS\u0026quot; -jar \u0026lt;console_home\u0026gt;/console.jar In this command, \u0026lt;console_home\u0026gt; is the directory where you unzipped the installer.\n  Update the JDK Java system properties for JSSE support in a properties file to configure the location and type of truststore (application only).\n Create a file named config.json and save it in the applicable location for your operating system:  Linux: $HOME/.config/weblogic-remote-console/ macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/ Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\   Add the following properties. { \u0026quot;javax.net.ssl.trustStore\u0026quot;: \u0026quot;/home/user/mytrust.jks\u0026quot;, \u0026quot;javax.net.ssl.trustStoreType\u0026quot;: \u0026quot;JKS\u0026quot; } On Windows the path character \\ must be escaped, for example:\n{ \u0026quot;javax.net.ssl.trustStore\u0026quot;: \u0026quot;C:\\\\Users\\\\user\\\\mytrust.jks\u0026quot;, \u0026quot;javax.net.ssl.trustStoreType\u0026quot;: \u0026quot;JKS\u0026quot; }  Save your changes and open the Remote Console application.    Connect to a WebLogic Domain Running on Kubernetes One of the benefits of the WebLogic Remote Console is the ability to connect to, and manage, a WebLogic Server domain running on Kubernetes. For details about how to setup access to WebLogic Server domains running on Kubernetes, see Use the Remote Console in the WebLogic Kubernetes Operator User Guide.\nStop the Remote Console To stop the Remote Console in the desktop application, close the desktop application. To stop the Remote Console in the browser, kill the console process (for example, Ctrl+c ).\nWhen you stop the Remote Console process in the browser, close the corresponding browser tab or window.\n Advanced Configuration  Specify a Listen Address for the Remote Console Host Disable Host Name Verification in the Connections to the WebLogic Domain  See Tune the Remote Console Environment for other possible configuration changes.\nSpecify a Listen Address for the Remote Console Host To connect to a WebLogic Remote Console that is not running on the same machine as the browser, you can specify non-default values for the Remote Console host and port using Java system properties. The process differs depending on whether you are using the Remote Console through console.zip or the desktop application.\nTo specify a listen address when running console.zip:\n  On the host where the Remote Console is installed, open a command window.\n  On the command line, set these Java system properties when starting the Remote Console:\n    -Dserver.host=\u0026lt;host-address\u0026gt; to have the Remote Console listen on a host other than localhost (IP address 127.0.0.1)\n  -Dserver.port=\u0026lt;port-number\u0026gt; to have the Remote Console bind to a port other than 8012.\nFor example:\njava -Dserver.host=0.0.0.0 -Dserver.port=8092 -jar \u0026lt;console_home\u0026gt;/console.jar In this example, 0.0.0.0 specifies that the host is listening on all IP addresses on that machine and \u0026lt;console_home\u0026gt; represents the directory where you unzipped the installer.\n   On the local machine, open a browser window and enter:\nhttp://hostname:8092 In this example, hostname represents the machine where you started the Remote Console, and can be an IP address or a DNS name (such as myhost.example.com). When you connect to a Remote Console process running on a different machine, you risk exposing sensitive data over the network.\n   In the Connect to WebLogic Domain window, enter the Administrator user name, password, and the URL of the domain.\nWhen the Remote Console is not running on the same machine as the browser, the WebLogic domain URL must be accessible to the machine running the Remote Console process.\n  To specify a listen address when running the desktop application:\n  On the host where the Remote Console is installed, create a config.json file in the location applicable to your operating system.\n Linux: $HOME/.config/weblogic-remote-console/ macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/ Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\    In config.json, add the following properties, updating the values to reflect the hostname and port you want.\n{ \u0026quot;server.host\u0026quot;: \u0026quot;0.0.0.0\u0026quot;, \u0026quot;server.port\u0026quot;: \u0026quot;8092\u0026quot; }   On the same machine, open a command window and enter the command applicable to your operating system:\n Linux: weblogic-remote-console --headless macOS: /Applications/WebLogic Remote Console.app/Contents/MacOS/WebLogic Remote Console --headless Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Local\\Programs\\weblogic-remote-console\\WebLogic Remote Console.exe --headless    On your local machine, open a browser window and enter:\nhttp://hostname:8092 In this example, hostname represents the machine where you started the Remote Console, and can be an IP address or a DNS name (such as myhost.example.com). When you connect to a Remote Console process running on a different machine, you risk exposing sensitive data over the network.\n   In the Connect to WebLogic Domain window, enter the Administrator user name, password, and the URL of the domain.\nWhen the Remote Console is not running on the same machine as the browser, the WebLogic domain URL must be accessible to the machine running the Remote Console process.\n  Disable Host Name Verification in the Connections to the WebLogic Domain When using WebLogic demo trust to connect to the WebLogic domain, you may need to disable host name verification. Disabling host name verification causes the Remote Console to skip the verification check of ensuring that the host name in the URL to which a connection is made matches the host name in the digital certificate that the server sends back as part of the SSL connection.\nTo disable host name verification, set the console.disableHostnameVerification property to true when required. The default is false.\nFor example, to connect to the domain using SSL/TLS with host name verification disabled:\njava -Dconsole.disableHostnameVerification=true -Djavax.net.ssl.trustStore=\u0026quot;/\u0026lt;path-to-wl-home\u0026gt;/server/lib/DemoTrust.jks\u0026quot; -Djavax.net.ssl.trustStoreType=\u0026quot;JKS\u0026quot; -jar \u0026lt;console_home\u0026gt;/console.jar or in the config.json file, add\n { \u0026quot;console.disableHostnameVerification\u0026quot;: \u0026quot;true\u0026quot;, \u0026quot;javax.net.ssl.trustStore\u0026quot;: \u0026quot;/\u0026lt;path-to-wl-home\u0026gt;/server/lib/DemoTrust.jks\u0026quot;, \u0026quot;javax.net.ssl.trustStoreType\u0026quot;: \u0026quot;JKS\u0026quot; } On Windows the path character \\ must be escaped, for example:\n { \u0026quot;console.disableHostnameVerification\u0026quot;: \u0026quot;true\u0026quot;, \u0026quot;javax.net.ssl.trustStore\u0026quot;: \u0026quot;C:\\\\\u0026lt;path-to-wl-home\u0026gt;\\\\server\\\\lib\\\\DemoTrust.jks\u0026quot;, \u0026quot;javax.net.ssl.trustStoreType\u0026quot;: \u0026quot;JKS\u0026quot; }  We do not recommend using the demo certificates or turning off host name verification in production environments.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/posts/console_uidesign/",
	"title": "Console Design and Usage Notes",
	"tags": [],
	"description": "Overview of the console&#39;s user interface and behavior",
	"content": "  Separation of Configuration and Runtime Data User Interface Description  Usage Notes  Separation of Configuration and Runtime Data Unlike the WebLogic Server Administration Console, which has pages that combine the configuration and runtime data, the Remote Console has separate pages for each. For example, in the Remote Console:\n The Servers table under Environment in the Configuration perspective shows all the configured servers (in the \u0026lsquo;edit\u0026rsquo; tree), but does not show whether each server is running. The Server States table in the Monitoring perspective lists all the servers, both configured and dynamic, (in the Administration Server\u0026rsquo;s \u0026lsquo;server config\u0026rsquo; tree) and the status of each server. This page also provides control operations to change the state of the servers. The Running Servers table in the Monitoring perspective lists the servers (in the Administration Server\u0026rsquo;s \u0026lsquo;server config\u0026rsquo; tree) that are currently running.  You can navigate easily between the two perspectives using the drop-down list in the breadcrumbs and the icons in the NavStrip on the left.\nBecause the Configuration perspective shows the \u0026lsquo;edit\u0026rsquo; tree (that is, the changes you\u0026rsquo;re currently making and haven\u0026rsquo;t activated yet), and the Monitoring perspective shows the Administration Server\u0026rsquo;s \u0026lsquo;server config\u0026rsquo; tree (that is, the configuration from the last time the Administration Server was booted plus any activated dynamic changes), unactivated changes that you made in the Configuration perspective won\u0026rsquo;t show up in the Monitoring perspective. For example, if you add a server and have not activated the change yet, it does not show up in the Monitoring \u0026lsquo;Running Servers\u0026rsquo; and \u0026lsquo;Server States\u0026rsquo; tables. Also, if you make any nondynamic changes, and activate them, they won\u0026rsquo;t show up in the Monitoring pages until you reboot the appropriate servers.\n User Interface Description The primary areas and design features of the WebLogic Remote Console user interface are as follows:\n  Branding Area The Branding area is the fixed area at the very top of the page. The application name is located on the left; the connected user and connect/disconnect icon are on the right. In addition to the connect/disconnect icon, you can click the application name to re-establish a domain connection.\nYou can click on the domain name in the branding area to see the URL for the domain that you are connected to and the version of the WebLogic Server domain.\n  Home Page The Home page uses a card-based design to represent functional areas such as Configuration and Monitoring. When you select a card on the Home page, a perspective for the functional area displays. Perspectives separate administration tasks and behaviors.\n  Landing Page Like the Home page, the landing pages have been reworked to use cards, in addition to clickable links. There are currently two landing pages:\n  Configuration - For creating, modifying and removing data associated with configuration MBeans in a WebLogic domain. Note that WebLogic has three different versions of the configuration per-domain:\n The \u0026lsquo;edit\u0026rsquo; tree - the pending configuration that hasn\u0026rsquo;t been activated yet. The \u0026lsquo;domain config\u0026rsquo; tree - the most recently activated configuration (that is, the domain\u0026rsquo;s \u0026lsquo;config\u0026rsquo; directory). The \u0026lsquo;server config\u0026rsquo; tree - the configuration that a server is currently using that may need to be rebooted to catch up to the domain config tree.  Currently, the Remote Console only displays the \u0026lsquo;edit\u0026rsquo; tree.\n  Monitoring - For viewing runtime MBeans in a WebLogic domain.\n  Clicking a card on a landing page displays (or hides) a list of clickable categories for the associated root level node, and a descriptive paragraph for each. On the Configuration landing page, for example, the cards represent the root level nodes in the domain structure (such as Environment, Scheduling, Services, and so on).\nYou can return to a landing page by clicking on the right side of the content pane.\n  Navigation Tree The Domain Structure panel in the WebLogic Server Administration Console is represented in the WebLogic Remote Console as a dynamic navigation tree pane. Different navigation trees are loaded based on the perspective that you are using. For example, if you are using the Configuration perspective, the navigation tree lists the root-level nodes in the domain structure.\nAn ellipse (\u0026hellip;) in the Navigation Tree in a list indicates that there are more than ten entities of a particular type defined in the domain. When you click the ellipse, the table view for the first ten entities displays in the main content area. You can then access all the entities in the table view using the arrows at the bottom of the table. For example, if you have 20 server instances defined in a domain, only the first ten are listed in the navigation tree. Clicking the ellipse displays the Server table in the main content area, where you can view the first ten servers and navigate to the remaining servers.\n  NavStrip A small strip on the left edge of the page that contains icons for toggling the visibility of the navigation tree , and for choosing the perspective to work with, such as Configuration and Monitoring. Clicking a NavStrip icon for a perspective is equivalent to clicking a card on the Home Page. The difference is that the NavStrip is always visible, while the Home page cards are not.\n  Navigation Tree/Content Pane Divider When the navigation tree is open, you can use this divider to simultaneously adjust the width of the navigation tree and content pane.\n  Content Pane The content pane is the main pane to the right of the navigation tree that consists of:\n Header - Topmost section of the content pane that contains the name of the active perspective.  Click in the Header area to return to the Remote Console Home page. Click to change the console into read-only mode or to change the console into read/write mode.   Breadcrumbs - Represent the path to the current MBean, with clickable links to the parent pages. Use the drop-down list, if available, to navigate to related pages, runtime data or configuration data. Main content area - Contains the tables and forms data. The topmost section is a fixed header that contains page descriptions and instructions, tabs (if applicable), perspective-scoped navigation history, toolbar buttons such as Save on the left, toolbar icons (on the right) and the Show advanced fields check box. The content area beneath the fixed header contains the tables, forms, and help fields. Horizontal and vertical scrollbars appear for tables, forms and help when the page is not large enough to display its entire contents.    Usage Notes Consider the following usage notes when using the WebLogic Remote Console:\n Create MBeans Use the Tool Bar Icons in the Content Pane Use the Shopping Cart Use the Remote Console Help Use the Remote Console Control Operations  Create MBeans The Remote Console includes simplified wizards for deploying applications and creating JDBC system resources.\nIn most other cases, when you create a new MBean on a page, you are prompted to fill in a few key properties, such as Name, then click Create. Unlike the WebLogic Server Administration Console, the Remote Console does not guide you through configuring other properties that you typically need to complete the configuration. Instead, it displays the new bean\u0026rsquo;s pages where you can click through the tabs to finish configuring the bean.\nWhen you configure a bean property that references another bean, you must first create the other bean. For example, if you want to assign Server1 to Cluster1, you need to create Cluster1 first, unlike in the WebLogic Server Administration Console where you can choose to create Cluster1 during server creation.\n Use the Tool Bar Icons in the Content Pane Use the icons on the tool bar as follows:\n  Home - Click in the content pane to return to the landing page for the functional area, such as Configuration or Monitoring. Click in the left side of the header area to return to the console home page.\n  Navigation History - Click to view a menu with a list of clickable links to the pages you have visited. This history is perspective-scoped.\n  Help - Click to view reference information about the attributes displayed on the page.\n  Reload - Click to reload the form/table once when no auto reload interval is set. This icon changes to active () when the reload interval is set. Click the icon to toggle the auto reload on and off.\n  Auto Reload Interval - Click to set or clear a specified time interval, in seconds, for automatic reload of the form/table. If you select a different tab, or move to another page, automatic page reload stops.\n  Shopping Cart - When changes are pending, click to view, discard, or commit the changes. The indicates there are no pending changes to the configuration.\n  Use the Shopping Cart You can use the shopping cart to:\n Commit all the changes currently in the shopping cart. This equates to clicking the \u0026ldquo;Activate Changes\u0026rdquo; button in the WebLogic Server Administration Console. Discard all the changes currently in the shopping cart. There is currently no support for removing an individual shopping cart item.  If you installed the Remote Console extension in your domain, you can:\n View the status of the lock in the Change Manager. View additions and deletions of configuration objects. View the before and after values of fields modified through forms. Navigate to the form associated with the addition or change.  These pending changes and lock status are visible in a Kiosk window, accessible by clicking View Changes from the Shopping Cart menu, or by clicking the Kiosk tab on the bottom right side of the page.\nDifference Between the Change Center and Change Manager In the WebLogic Server Administration Console, the Change Center provides a way to lock a domain configuration so you can make changes to the configuration while preventing other accounts from making changes during your edit session. It can be enabled or disabled in a development domain, and is enabled by default in a production domain. When locking is enabled, you start the edit process by obtaining a lock. When you finish making changes, you save the changes. The changes do not take effect, however, until you activate them, distributing them to all server instances in the domain.\nThe WebLogic Remote Console provides similar locking functionality in the shopping cart. In the Remote Console, in both development and production domains, the pages are always read/writeable. When you create an MBean or save a change to page, the Remote Console automatically grabs the lock. To view details about the lock, expand the Change Manager in the Kiosk. The changes are not activated until you click Commit Changes.\nWhen you activate nondynamic changes, you need to navigate to the \u0026lsquo;Running Servers\u0026rsquo; table in the Monitoring perspective to see which servers need to be rebooted so that they can start using the new configuration.\nIn both consoles, the configuration change lock does not prevent you from making conflicting configuration edits using the same administrator user account. For example, if you obtain a configuration change lock using the WebLogic Remote Console, and then use the Administration Console or WebLogic Scripting Tool (WLST) with the same user account, you will access the same edit session that you opened in the Remote Console and you will not be locked out of making changes with the other tools.\nWe recommend against making changes using multiple tools because when one of the sessions activates their changes, it releases the lock and the other session will not be able to save or activate their changes.\n Use the Remote Console Help The Remote Console provides several types of online help on each page.\n Use the ? icon to the left of each field to access summary and detailed help for the field. If you hover over the ?, a summary help description displays. Click the ? icon to display a more detailed help description, if available. Click the ? icon in the top right of the content pane to toggle the view of the reference information for all of the fields displayed on the page.  Use the Remote Console Control Operations The Remote Console provides control operations in the Monitoring perspective.\n The Server States page contains the control operations to change the state of a server. Server state signifies the specific condition of a server in the life cycle management. To change the server state, click the desired control at the top of the table. Then, in the next window, select the servers on which you want to perform the control operation. Consistent with the WebLogic Server Administration Console, the Remote Console includes support for graceful shutdowns. The App Deployments Runtimes page, under Domain Information in the Navigation tree, provides controls to start and stop applications. To start or stop an application, select the control, then in the next window, select the applications on which you want to perform the operation.  "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/posts/tuning/",
	"title": "Tune the Remote Console Environment",
	"tags": [],
	"description": "Tips on how to configure your WebLogic Remote Console for your environment",
	"content": "Although not required, you may want to tune your environment to optimize the performance of the console.\n Customize the Default Configuration Change the Network Timeout Settings for the Server Set the SameSite Cookie attribute if Required for Web Browser Support  Customize the Default Configuration By default, the WebLogic Remote Console uses the application.yaml file inside the runnable/console-backend-server-{version}.jar file.\nIf the default configuration is sufficient, then you don\u0026rsquo;t need to do anything. However, if you need to modify the configuration, you can update the Java system properties by changing the properties in a config.json file or, for the browser version, by passing the modified Java system properties at the command line when starting the Remote Console.\nThe config.json file is located in:\n Linux: $HOME/.config/weblogic-remote-console/config.json macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/config.json Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\config.json  Any Windows file paths entered in config.json must be properly escaped. For example, enter C:\\Users\\Jane\\myTrust.jks as C:\\\\Users\\\\Jane\\\\myTrust.jks.    You may need to create the config.json file manually.\n You can modify the following Java system properties:\n console.disableHostnameVerification Default: false console.enableSameSiteCookieValue Default: false console.valueSameSiteCookie Default: Lax (Possible values: Lax, Strict, None)  console.readTimeoutMillis Default: 20000 console.connectTimeoutMillis Default: 10000 server.host Default: 127.0.0.1 server.port Default: 8012  For example, to set the Remote Console to listen on a host other than localhost (IP address 127.0.0.1):\nAt the command line:\njava -Dserver.host=0.0.0.0 -jar \u0026lt;console_home\u0026gt;/console.jar In the config.json file:\n{\u0026quot;server.host\u0026quot;: \u0026quot;0.0.0.0\u0026quot;} Change the Network Timeout Settings for the Server To change the defaults for the connection and read timeout settings used with a WebLogic domain from the Remote Console, change the following Java system properties:\n Set console.readTimeoutMillis=\u0026lt;millis\u0026gt; for the timeout when waiting on a response, Default: 20 seconds Set console.connectTimeoutMillis=\u0026lt;millis\u0026gt; for the timeout when waiting to connect, Default: 10 seconds  For example:\njava -Dconsole.readTimeoutMillis=60000 -Dconsole.connectTimeoutMillis=30000 -jar \u0026lt;console_home\u0026gt;/console.jar In this example, \u0026lt;console_home\u0026gt; represents the directory where you unzipped the installer, and will result in the console waiting 60 seconds before giving up on a response from the WebLogic domain.\nor in config.json, add:\n{ \u0026quot;console.readTimeoutMillis\u0026quot;: \u0026quot;60000\u0026quot;, \u0026quot;console.connectTimeoutMillis\u0026quot;: \u0026quot;30000\u0026quot; } When changing network timeout settings, the primary impact will be the response time for Console threads, while the browser will show no data when a timeout occurs. Examples of where timeouts may happen include requests where WebLogic experiences longer initialization or execution times such as for runtime monitoring actions of servers.\nSet the SameSite Cookie attribute if Required for Web Browser Support When the WebLogic Remote Console establishes a connection with the WebLogic Domain, a HTTP Cookie is established with the Web Browser session.\nFor security reasons, the SameSite attribute of the HTTP Cookie may need to be set for the Web Browser to accept the HTTP session Cookie. There are two settings that control the Remote Console behavior:\n Set console.enableSameSiteCookieValue=true to include the SameSite attribute in the HTTP Cookie, Default: false Set console.valueSameSiteCookie=\u0026quot;\u0026lt;value\u0026gt;\u0026quot; to specify the value of the SameSite attribute, Default: Lax  For example:\njava -Dconsole.enableSameSiteCookieValue=true -jar \u0026lt;console_home\u0026gt;/console.jar or\n{\u0026quot;console.enableSameSiteCookieValue\u0026quot;: \u0026quot;true\u0026quot;} results in the HTTP session Cookie including the SameSite attribute with a value of Lax.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/posts/developer_guide/",
	"title": "Developer Guide",
	"tags": [],
	"description": "Developer guide",
	"content": " Prerequisites Build the Remote Console From Source Use an Alternate logging.properties file  Prerequisites To build the WebLogic Remote Console, you need the following software installed in your local build environment:\n Java SE 11 Maven 3.6.1+ nodejs 12.16+ This download includes npm. Oracle JET 10.1.0 client libraries. To install the required Oracle JET software, run: npm install -g @oracle/ojet-cli@~10.1.0 On Linux and macOS, you will need to use sudo.\n  Verify Prerequisites  java -version mvn --version node -v ojet --version Build the Remote Console From Source  Clone the repository at https://github.com/oracle/weblogic-remote-console. In a command window, navigate to the home directory of the cloned repository. Run mvn clean install.  When the build is successful, a console.zip file is created in the console-backend/installer/target directory. You can now install and run the Remote Console as described in Install and Configure the WebLogic Remote Console\nUse an Alternate logging.properties File By default, the WebLogic Remote Console uses the logging.properties file inside the runnable/console-backend-server-{version}.jar file.\nIf the default configuration is sufficient, then you don\u0026rsquo;t need to do anything. However, if you need to tweak the logger configuration WITHOUT regenerating the runnable/console-backend-server-{version}.jar file, you can pass the -Djava.util.logging.config.file=\u0026lt;path-to-logging.properties\u0026gt; Java system property when starting the console.\nFor example:\n-Djava.util.logging.config.file=runnable/etc/logging.properties If there is a problem using the specified path, then the logging.properties inside the runnable/console-backend-server-{version}.jar file is used. Either way, a log message is written to STDOUT stating which file was used:\nLogging configured using /gitlab-odx/weblogic/console-backend/runnable/etc/logging.properties or\nLogging configured using /logging.properties For examples of entries that can be placed into the custom logging.properties specified above, see the repository source file located at server/src/main/resources/logging.properties.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/posts/faqs/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "Frequently asked questions",
	"content": "This section provides answers to frequently asked questions about the WebLogic Remote Console.\nCan I connect the WebLogic Remote Console to domains running in WebLogic on Oracle Cloud Infrastructure? Yes, you can. First, make sure that the domain\u0026rsquo;s administration server is publicly accessible so the WebLogic Remote Console can establish a connection to the administration server. Then, in the WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nCan I connect the WebLogic Remote Console to domains running on other cloud providers such as Amazon Web Services, Google Cloud, Microsoft Azure and so on? Yes, you can connect to other cloud providers. You\u0026rsquo;ll need to make sure the domain\u0026rsquo;s administration server is publicly accessible to allow a connection between the WebLogic Remote Console and the cloud provider. Then, in the WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nVisit your cloud providers' documentation for more specific instructions on how to expose the endpoint of the WebLogic Server.\nCan I connect the WebLogic Remote Console to domains using the WebLogic Kubernetes Operator? Yes. For details on how to set up access to WebLogic Server domains running on Kubernetes, see Use the WebLogic Remote Console in the WebLogic Kubernetes Operator User Guide.\nCan I use both the WebLogic Remote Console and the WebLogic Server Administration Console? Yes. The WebLogic Remote Console uses the same configuration mechanisms used by the WebLogic Server Administration Console. You can make changes to your domain using any of these methods: Administration Console, WebLogic Remote Console, JMX, REST, WLST, and so on - they\u0026rsquo;re all compatible. However, it\u0026rsquo;s not recommended that you use multiple methods simultaneously since that may cause conflicts and unexpected behavior.\nDo I need to upgrade my installation of WebLogic Remote Console whenever I upgrade or patch my WebLogic Server domain? While it\u0026rsquo;s recommended that you upgrade the WebLogic Remote Console when you upgrade your domain, it\u0026rsquo;s not required. Older versions of the WebLogic Remote Console will continue to work with newer versions of a domain. However, if new fields were added to beans as part of the domain upgrade, outdated versions of the WebLogic Remote Console will not detect those fields.\nAre there any security risks associated with the WebLogic Remote Console? No, the WebLogic Remote Console accesses the WebLogic Administration Server through its standard REST API, which is available out of the box. However, since your desktop will be accessing potentially sensitive data, you need to make sure it is protected and secure - just like the WebLogic Administration Console.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/posts/known_issues/",
	"title": "Known Issues and Limitations for the WebLogic Remote Console",
	"tags": [],
	"description": "Known issues and limitations for the WebLogic Remote Console",
	"content": "This page lists the known issues and workarounds, if available, as well as the limitations of the console in this release.\nLimitations The following features are not available in this release of the Remote Console:\n Manage the security data from WebLogic Server security providers that is external to the WebLogic configuration, such as users, groups, roles, policies, credential maps, and so on. Record WLST scripts while you configure WebLogic Server using the Remote Console. JNDI tree viewer.  Known Issues The following list summarizes the known issues at the time of this release.\nLimited Support for Users in a Non-Administrative Role The Remote Console fully supports only users in the Administrator role. If you are not logged in as an Administrator, unexpected behavior may occur. For example, the Deployer, Monitor and Operator roles are not sufficient for most configuration pages and will result in empty pages and error messages.\nMinimum Web Browser Viewport Size Issue The font sizes in the WebLogic Remote Console are governed by the Oracle JET Redwood style. They are larger than the ones used in the WebLogic Server Administration Console, and the entry fields are a bit larger in height and width. As a result, the overall viewing area inside your web browser\u0026rsquo;s viewport (the portion where all the web content appears), needs to be of a minimum size to have an enjoyable experience using the Remote Console.\nWe have determined that the recommended minimum web browser viewport size is 1592 x 900 pixels. If you resize your web browser to be smaller than 1592 x 900 pixels, then scroll bars appear when the mouse hovers over certain areas. However, some form data may still not be visible until the web browser\u0026rsquo;s viewport height is at least 900 pixels.\nWorkaround Ensure that the browser viewport is set to the recommended minimum. If those values are not available, you can also adjust the Zoom setting to 80%.\nLimited MBean Property Support The Remote Console includes the vast majority of the MBean properties that the WebLogic Server Administration Console supports. However, because of limitations in the WebLogic REST API, some are missing, including some that are deprecated. If you notice that there is an MBean property that you require that is not available in the Remote Console, please let us know.\nUnable to Reorder Collections Such As Security Providers Issue There are separate lists for each type of security provider (such as authentication providers, role mapping providers, authorization providers, and so on). When you have more than one security provider in a list, WebLogic Server invokes them in the order that they appear in the list. Sometimes the order is important (for example, you want the server to try the local fast authentication provider before the slow remote one).\nCurrently, the Remote Console doesn\u0026rsquo;t explicitly let you reorder the lists.\nWorkaround To reorder providers, you can delete and recreate them. For example, if the list of authentication providers has A then B, and you want to switch it to B then A, delete A and recreate it. New providers are always added to the end of the list.\nCan\u0026rsquo;t uninstall the WebLogic Remote Console on Microsoft Windows Issue When attempting to uninstall the WebLogic Remote Console desktop application on Windows computers, the uninstallation program may complain that the WebLogic Remote Console is running and cannot be uninstalled.\nWorkaround Edit the PATH environment variable to ensure that %SystemRoot%\\system32 is the first entry that contains the find command, then retry the uninstallation.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/posts/troubleshoot/",
	"title": "Troubleshoot WebLogic Remote Console",
	"tags": [],
	"description": "Troubleshooting recommendations",
	"content": "This page provides guidelines to help troubleshoot console issues.\n Diagnose Invalid WebLogic Configuration Issues Unresponsive Remote Console Browser Window  Diagnose Invalid WebLogic Configuration Issues The WebLogic Remote Console catches most validation errors when you click Save, or when you commit the change using the shopping cart. If an error message displays, you need to identify and correct the problem that caused the error before you can activate the changes.\nNote: If you installed the console extension, you can view the contents of the shopping cart to see all of the pending changes. If you did not install the console extension, you can view the pending changes using the WebLogic Server Administration Console.\n If the cause of the configuration error is not obvious:\n Check the output from the Remote Console and the domain Administration Server. Check the WebLogic Administration Server log.  If you are unable to determine the cause of the error, cancel the edits and make the configuration changes again.\nUnresponsive Remote Console Browser Window If the Remote Console running in the browser becomes unresponsive, verify that the Administration Server to which you are connected is still running. If the server is down, restart it, then refresh the browser window.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "WebLogic Remote Console The WebLogic Remote Console is a lightweight, open source console that you can use to manage your WebLogic Server domain running anywhere, such as on a physical or virtual machine, in a container, Kubernetes, or in the Oracle Cloud. The Remote Console does not need to be colocated with the WebLogic Server domain.\nYou can install and run the Remote Console anywhere, and connect to your domain using WebLogic REST APIs. You simply launch the desktop application and connect to the Administration Server of your domain. Or, you can start the console server, launch the console in a browser and then connect to the Administration Server.\nThe Remote Console is fully supported with WebLogic Server 12.2.1.3, 12.2.1.4, and 14.1.1.0.\nReady to download and use the Remote Console? See Get Started.\nKey Features of the WebLogic Remote Console The WebLogic Remote Console provides an alternative WebLogic Server administration GUI that enables REST-based access to WebLogic management information, in alignment with current cloud-native trends. When connected to a WebLogic domain using the Remote Console, you can:\n Configure WebLogic Server instances Configure WebLogic Server clusters Configure WebLogic Server services, such as database connectivity (JDBC), and messaging (JMS) Deploy and undeploy applications Start and stop servers and applications Monitor server and application performance View server and domain log files View application deployment descriptors Edit selected runtime application deployment descriptor elements  Differences With the WebLogic Server Administration Console The WebLogic Remote Console is distinct from the WebLogic Server Administration Console that is deployed as part of your WebLogic domain. As you explore the WebLogic Remote Console, you\u0026rsquo;ll notice these key differences between the two consoles:\n The user interface has been completely redesigned to conform to the Oracle Alta UI Design system and the Oracle Redwood theme included with Oracle JET. The configuration and monitoring content is separated into separate pages in the Remote Console. In the WebLogic Server Administration Console, the configuration and runtime information is presented on one page. See Separation of Configuration and Runtime Data. The Change Center is now expressed as a shopping cart. See Use the Shopping Cart. Instead of logging directly into the Administration Console deployed in a WebLogic domain, the Remote Console connects to the Administration Server in a WebLogic domain, with the credentials supplied by the user, using WebLogic REST APIs.  For information on the WebLogic Server Administration Console, see the online help for 12.2.1.3, 12.2.1.4, or 14.1.1.0.\nGet Started You can access the Remote Console through your browser or by running a desktop application. Both versions are available to download from https://github.com/oracle/weblogic-remote-console/releases. The browser installer, console.zip, consists of the Remote Console JAR file and associated libraries necessary to use the console. For the desktop application, simply run the appropriate installer for your operating system.\nYou should also download and install the Remote Console extension for your WebLogic Server domain. The extension provides additional functionality that is not available with the console alone. Although installing the extension is optional, we recommend that you install it to get the optimum functionality from the Remote Console.\nFor details about installing and running the Remote Console, see Install and Configure the WebLogic Remote Console.\nTo build the Remote Console from source, see the Developer Guide.\nKnown Issues See the following list of Known Issues, limitations, and workarounds.\nAdditional Information  For information about the console user interface, see Console Design and Usage Notes. For answers to common questions, see Frequently Asked Questions. For information for tuning the environment, see Tuning the Remote Console Environment. For information for developers, such as building the Remote Console from source, see the Developer Guide. For information to help troubleshoot configuration issues, see Troubleshoot.  Need more help? Have a suggestion? Come and say, \u0026ldquo;Hello!\u0026rdquo; We have a public Slack channel where you can get in touch with us to ask questions about using the Remote Console or give us feedback or suggestions about what features and improvements you would like to see. We would love to hear from you. To join our channel, please visit this site to get an invitation. The invitation email will include details of how to access our Slack workspace. After you are logged in, please come to #remote-console and say, \u0026ldquo;hello!\u0026rdquo;\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/posts/",
	"title": "Using WebLogic Remote Console",
	"tags": [],
	"description": "How to use WebLogic Remote Console",
	"content": "Using The WebLogic Remote Console Find out how to use the WebLogic Remote Console.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/1.1.0/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]