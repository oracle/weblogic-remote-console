# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.runtime.JVMRuntimeMBean
descriptionHTML: 'Exposes runtime data about the JRockit Virtual Machine (VM) that
  is running the current WebLogic Server instance. You cannot change the VM''s operating
  parameters while the VM is active. Instead, use the startup options that are described
  in the JRockit documentation.  <p>The WebLogic JVM contains only one of these Runtime
  MBeans: <ul> <li> <p>If the JVM is an instance of a JRockit JDK, then the JVM contains
  <code>JRockitRuntime MBean</code>.</p> </li>  <li> <p> Otherwise, it contains the
  <code>JVMRuntimeMBean</code>.</p> </li> </ul></p> '
name: weblogic.management.runtime.JRockitRuntimeMBean
properties:
- defaultValue: {
    }
  descriptionHTML: '<p>A snapshot of the average load of all processors in the host
    computer. If the computer has only one processor, this method returns the same
    value as <code>getJvmProcessorLoad(0)</code>.</p>  <p>The value is returned as
    a double, where 1.0 represents 100% load (no idle time) and 0.0 represents 0%
    load (pure idle time).</p> '
  name: AllProcessorsAverageLoad
  type: double
- defaultValue: {
    }
  descriptionHTML: '<p>Indicates whether the VM''s garbage collector runs in a separate
    Java thread concurrently with other Java threads.</p> '
  name: Concurrent
  type: boolean
- defaultValue: {
    }
  descriptionHTML: '<p>The amount (in bytes) of Java heap memory that is currently
    free in the Virtual Machine.</p> '
  name: FreeHeap
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The amount (in bytes) of physical memory that is currently
    free on the host computer.</p> '
  name: FreePhysicalMemory
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>Indicates whether the VM''s garbage collector compacts the
    Java heap.</p>  <p>Usually the heap is scattered throughout available memory.
    A garbage collector that compacts the heap defragments the memory space in addition
    to deleting unused objects.</p> '
  name: GCHandlesCompaction
  type: boolean
- defaultValue: {
    }
  descriptionHTML: '<p>The type of garbage collector (GC) that the Virtual Machine
    is using.</p>  <p>JRockit provides the following types of GCs:</p>  <ul> <li>
    <p>Generational Copying, which is suitable for testing applications on a desktop
    machine with a small (less then 128 MB) heap.</p> </li>  <li> <p>Single Spaced
    Concurrent, which reduces or eliminates pauses in the VM that are due to garbage
    collection. Because it trades memory throughput for reduced pause time, you generally
    need a larger heap size than with other GC types. If your ordinary Java threads
    create more garbage than this GC can collect, the VM will pause while the Java
    threads wait for the garbage collection to finish.</p> </li>  <li> <p>Generational
    Concurrent, which creates a "nursery" space within the heap. New objects are created
    within the nursery. When the nursery is full, JRockit "stops-the-world," removes
    the dead objects from the nursery, and moves live objects to a different space
    within the heap. Another thread runs in the background to remove dead objects
    from the non-nursery space. This GC type has a higher memory throughput than a
    single spaced concurrent GC.</p> </li>  <li> <p>Parallel, which allocates all
    objects to a single spaced heap. When the heap is full, all Java threads are stopped
    and every CPU is used to perform a complete garbage collection of the entire heap.
    This behavior causes longer pause times than for the concurrent collectors but
    maximizes memory throughput.</p> </li> </ul> '
  name: GcAlgorithm
  type: java.lang.String
- defaultValue: {
    }
  descriptionHTML: '<p>Indicates whether the VM''s garbage collector uses a nursery
    space.</p>  <p>A nursery is the area of the Java heap that the VM allocates to
    most objects. Instead of garbage collecting the entire heap, generational garbage
    collectors focus on the nursery. Because most objects die young, most of the time
    it is sufficient to garbage collect only the nursery and not the entire heap.</p> '
  name: Generational
  type: boolean
- defaultValue: {
    }
  descriptionHTML: '<p>Indicates whether the VM''s garbage collector collects (increments)
    garbage as it scans the memory space and dumps the garbage at the end of its cycle.</p>  <p>With
    a non-incremental garbage collector, garbage is dumped as soon as it is encountered.</p> '
  name: Incremental
  type: boolean
- defaultValue: {
    }
  descriptionHTML: '<p>A description of the Java Virtual Machine. For example, "BEA
    WebLogic JRockit Java Virtual Machine."</p> '
  name: JVMDescription
  type: java.lang.String
- defaultValue: {
    }
  descriptionHTML: '<p>A snapshot of the load that the Virtual Machine is placing
    on all processors in the host computer. If the host contains multiple processors,
    the value represents a snapshot of the average load.</p>  <p>The value is returned
    as a double, where 1.0 represents 100% load (no idle time) and 0.0 represents
    0% load (pure idle time).</p> '
  name: JvmProcessorLoad
  type: double
- defaultValue: {
    }
  descriptionHTML: '<p>The time at which the last garbage collection run ended.</p> '
  name: LastGCEnd
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The time at which the last garbage collection run started.</p> '
  name: LastGCStart
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The name of the Java Virtual Machine. For example, "WebLogic
    JRockit."</p> '
  name: Name
  type: java.lang.String
- defaultValue: {
    }
  descriptionHTML: '<p>The number of daemon Java threads currently running in the
    Virtual Machine across all processors.</p> '
  name: NumberOfDaemonThreads
  type: int
- defaultValue: {
    }
  descriptionHTML: '<p>The number of processors on the Virtual Machine''s host computer.
    If this is not a Symmetric Multi Processor (SMP) system, the value will be <code>1</code>.</p> '
  name: NumberOfProcessors
  type: int
- defaultValue: {
    }
  descriptionHTML: '<p>Indicates whether the VM''s garbage collector is able to run
    in parallel on multiple processors if multiple processors are available.</p> '
  name: Parallel
  type: boolean
- defaultValue: {
    }
  descriptionHTML: '<p>Gets the maximum GC pause time if set</p> '
  exclude: true
  name: PauseTimeTarget
  restartNeeded: true
  supported: false
  type: long
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The number of garbage collection runs that have occurred since
    the Virtual Machine was started.</p> '
  name: TotalGarbageCollectionCount
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The number of milliseconds that the Virtual Machine has spent
    on all garbage collection runs since the VM was started.</p> '
  name: TotalGarbageCollectionTime
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The amount (in bytes) of memory currently allocated to the
    Virtual Machine''s Java heap.</p>  <p>This value, which is also known as the "heap
    size," may grow up to the specified maximum heap size.</p> '
  name: TotalHeap
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The number of Java threads (daemon and non-daemon) that are
    currently running in the Virtual Machine across all processors.</p> '
  name: TotalNumberOfThreads
  type: int
- defaultValue: {
    }
  descriptionHTML: '<p>The amount (in bytes) of memory that is currently allocated
    to the nursery.</p>  <p>The nursery is the area of the Java heap that the VM allocates
    to most objects. Instead of garbage collecting the entire heap, generational garbage
    collectors focus on the nursery. Because most objects die young, most of the time
    it is sufficient to garbage collect only the nursery and not the entire heap.</p>  <p>If
    you are not using a generational garbage collector, the nursery size is <code><code>0</code></code>.</p> '
  name: TotalNurserySize
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The amount (in bytes) of physical memory on the host computer.</p>  <p>The
    value does not include memory that an operating system makes available through
    swap space on a disk or other types of virtual memory.</p> '
  name: TotalPhysicalMemory
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The amount (in bytes) of Java heap memory that is currently
    being used by the Virtual Machine.</p> '
  name: UsedHeap
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The amount (in bytes) of physical memory that is currently
    being used on the host computer.</p>  <p>The value describes the memory that is
    being used by all processes on the computer, not just by the Virtual Machine.</p> '
  name: UsedPhysicalMemory
  type: long
- defaultValue: {
    }
  descriptionHTML: '<p>The name of the JVM vendor. </p> '
  name: Vendor
  type: java.lang.String
- defaultValue: {
    }
  descriptionHTML: '<p>The current version of Java Virtual Machine.</p> '
  name: Version
  type: java.lang.String
