# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.configuration.ConfigurationMBean
descriptionHTML: 'This bean is used to configure the attributes necessary to start
  up a server on a remote machine. '
name: weblogic.management.configuration.ServerStartMBean
properties:
- defaultValue: {
    }
  descriptionHTML: '<p>The arguments to use when starting this server.</p>  <p>These
    are the first arguments appended immediately after <code>java</code> portion of
    the startup command. For example, you can set Java heap memory or specify any
    <code>weblogic.Server</code> option.</p>  <p>This property should not be used
    to specify weblogic.management.username or weblogic.management.password as these
    values will be ignored during server startup.  Instead the username and password
    properties should be set. This will also enable Node Manager to properly encrypt
    these values on the Managed Server''s machine.</p>  <p>Separate arguments with
    a space.</p>  <p>This value can also be specified conveniently in the nodemanager
    .properties file using the weblogic.startup.Arguments property. Node Manager will
    pass this value to a start script using the JAVA_OPTIONS environment variable.  When
    issuing a Java command line to start the server, Node Manager will pass the arguments
    as options.</p> '
  name: Arguments
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  deprecated: '12.1.3.0 replaced by ServerStartMBean.getMWHome '
  descriptionHTML: '<p></p> <p>The BEA home directory (path on the machine running
    Node Manager) to use when starting this server.</p>  <p>Specify the directory
    on the Node Manager machine under which all of Oracle''s BEA products were installed.
    For example, <code>c:&#92;bea</code>.</p> '
  name: BeaHome
  supported: false
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Get the boot properties to be used for a server.</p> '
  exclude: true
  name: BootProperties
  supported: false
  transient: true
  type: java.util.Properties
- defaultValue: {
    }
  descriptionHTML: '<p>The classpath (path on the machine running Node Manager) to
    use when starting this server.</p>  <p>At a minimum you will need to specify the
    following values for the class path option: <code>WL_HOME/server/lib/weblogic_sp.jar;WL_HOME/server/lib/weblogic.jar</code></p>  <p>where
    <code>WL_HOME</code> is the directory in which you installed WebLogic Server on
    the Node Manager machine.</p>  <p>The shell environment determines which character
    you use to separate path elements. On Windows, you typically use a semicolon (;).
    In a BASH shell, you typically use a colon (:).</p>  <p>This value can also be
    specified conveniently in the nodemanager .properties file using the weblogic.startup.ClassPath
    property. Node Manager will pass this value to a start script using the CLASSPATH
    environment variable.  When issuing a Java command line to start the server, Node
    Manager will pass -Djava.class.path.</p> '
  name: ClassPath
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The Java home directory (path on the machine running Node Manager)
    to use when starting this server.</p>  <p>Specify the parent directory of the
    JDK''s <code>bin</code> directory. For example, <code>c:&#92;bea&#92;jdk141</code>.</p>  <p>This
    value can also be specified conveniently in the nodemanager .properties file using
    the weblogic.startup.JavaHome or property.</p> <p>Node Manager will pass this
    value to a start script using the JAVA_HOME environment variable.  When issuing
    a Java command line to start the server, Node Manager will use the Java executable
    from the specified location. </p> '
  name: JavaHome
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The Java Vendor value to use when starting this server. </p>
    <p> If the server is part of a cluster and configured for automatic migration
    across possibly different platforms with different vendors providing the JDKs,
    then, both JavaVendor and JavaHome should be set in the generated configuration
    file instead.</p>  <p>This value can also be specified conveniently in the nodemanager
    .properties file using the weblogic.startup.JavaVendor property.</p>  <p>Node
    Manager does not pass this value invoking a Java command line to start the server.  It
    does pass this value in the environment variable JAVA_VENDOR to the start script.
    </p> '
  name: JavaVendor
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p></p> <p>The MWHome directory (path on the machine running Node
    Manager) to use when starting this server.</p>  <p>Specify the directory on the
    Node Manager machine under which all of Oracle''s Middleware products were installed.
    For example, <code>c:&#92;bea</code>.</p>  <p>This value can also be specified
    conveniently in the nodemanager .properties file using the weblogic.startup.MWHome
    property.</p> <p> Node Manager does not pass this value to start scripts. It does
    specify -Dbea.home when invoking a Java command line to start the server.</p> '
  name: MWHome
  type: java.lang.String
  writable: true
- defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>The user-specified name of this MBean instance.</p>  <p>This
    name is included as one of the key properties in the MBean''s <code>javax.management.ObjectName</code>:</p>  <p><code>Name=<i>user-specified-name</i></code></p> '
  key: true
  name: Name
  nullable: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The password of the username used to boot the server and perform
    server health monitoring.</p>  <p>As of 8.1 sp4, when you get the value of this
    attribute, WebLogic Server does the following:</p> <ol> <li>Retrieves the value
    of the <code>PasswordEncrypted</code> attribute.</li> <li>Decrypts the value and
    returns the unencrypted password as a String.</li> </ol>  <p>When you set the
    value of this attribute, WebLogic Server does the following:</p> <ol> <li>Encrypts
    the value.</li> <li>Sets the value of the <code>PasswordEncrypted</code> attribute
    to the encrypted value.</li> </ol>  <p>Using this attribute (<code>Password</code>)
    is a potential security risk because the String object (which contains the unencrypted
    password) remains in the JVM''s memory until garbage collection removes it and
    the memory is reallocated. Depending on how memory is allocated in the JVM, a
    significant amount of time could pass before this unencrypted data is removed
    from memory.</p>  <p>Instead of using this attribute, use <code>PasswordEncrypted</code>.</p> '
  encrypted: true
  name: Password
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The encrypted password of the username used to boot the server
    and perform server health monitoring.</p>  <p>To set this attribute, use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the value. Then set this attribute to the output of the encrypt() method.</p>  <p>To
    compare a password that a user enters with the encrypted value of this attribute,
    go to the same WebLogic Server instance that you used to set and encrypt this
    attribute and use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the user-supplied password. Then compare the encrypted values.</p> '
  encrypted: true
  name: PasswordEncrypted
  type: byte
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The directory that this server uses as its root directory.
    This directory must be on the computer that hosts Node Manager. If you do not
    specify a Root Directory value, the domain directory is used by default. </p> '
  name: RootDirectory
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The security policy file (directory and filename on the machine
    running Node Manager) to use when starting this server.</p>  <p>This value can
    also be specified conveniently in the nodemanager .properties file using the weblogic.startup.SecurityPolicyFile
    property .</p>  <p>When Node Manager is using a start script, the security policy
    file will be defined in an environment variable, SECURITY_POLICY.  Additionally,
    when Node Manager is launching the process directly using a Java command, the
    security policy file will be defined with -Djava.security.policy= </p> '
  name: SecurityPolicyFile
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Get the boot properties to be used for a server.</p> '
  exclude: true
  name: StartupProperties
  supported: false
  transient: true
  type: java.util.Properties
- defaultValue:
    value:
      value: ''
  descriptionHTML: '<p>The user name to use when booting this server.</p>  <p>The
    Administration Console inserts the user name that you supplied when you logged
    in to the console. The Domain Configuration Wizard inserts the user name that
    you defined when you created the domain.</p> '
  name: Username
  type: java.lang.String
  writable: true
