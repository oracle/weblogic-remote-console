# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.security.credentials.CredentialMapperMBean
- com.bea.security.saml2.providers.SAML2SPPartnerRegistryMBean
- weblogic.management.security.ImportMBean
- weblogic.management.security.ExportMBean
- weblogic.management.security.ApplicationVersionerMBean
- weblogic.management.security.IdentityDomainAwareProviderMBean
descriptionHTML: '<p>This MBean represents configuration information for the SAML2
  Credential Mapping provider.</p> '
name: com.bea.security.saml2.providers.SAML2CredentialMapperMBean
properties:
- defaultValue:
    value:
      value: 20
  descriptionHTML: '<p>Minimum time, in seconds, that assertion credentials must be
    viable before it is eligible to be cached.            If an entry in the cache
    has less time to live than this value, the corresponding assertion will not be            used.
    Instead, a new assertion will be generated. Default value is 20.</p><p>This attribute
    avoids the situation where an assertion is returned from the cache but expires
    before it            can be evaluated at its destination. If the cached assertion''s
    remaining time-to-live is too short,            it will not be used.</p> '
  name: CredCacheMinViableTTL
  type: int
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>The size of the cache used to store assertion credentials.
    If the value is not specified or             not a positive number, the cache
    will have unlimited size. Default value is 0.</p><p>The cache stores assertion
    credentials so that requests for the same assertion may return a result            from
    cache, rather than generate a new assertion. This can improve performance in cases
    where an            application may make multiple requests for the same assertion,
    for the same user, within a short            period of time.</p> '
  name: CredCacheSize
  type: int
  writable: true
- defaultValue:
    value:
      value: 120
  descriptionHTML: '<p>Time in seconds that, by default, an assertion should remain
    valid. Default value is            120 seconds (2 minutes).</p><p>If the value
    is zero, then assertions have an infinite lifetime. Using assertions with an infinite            lifetime
    is not recommended, however.</p> '
  name: DefaultTimeToLive
  type: int
  writable: true
- defaultValue:
    value:
      value: -5
  descriptionHTML: '<p>A time factor you can use to allow the Credential Mapper to
    compensate for clock differences between the            Identity Provider and
    Service Provider sites. The value is a positive or negative integer representing            seconds.
    Default value is -5.</p><p>Normally, an assertion is valid from the NotBefore
    time, which defaults to (roughly) the time the            assertion was generated,
    until the  NotOnOrAfter time, which is calculated as (NotBefore + TimeToLive).            This
    value is a positive or negative integer indicating how many seconds before or
    after "now" the            assertions NotBefore should be set to. If you set a
    value for DefaultTimeToLiveOffset, then the assertion            lifetime is still
    calculated as (NotBefore + TimeToLive), but the NotBefore value is set to            (now
    + TimeToLiveOffset). So, an assertion might have a two minute (120 second) lifetime
    that starts            thirty seconds ago, or starts one minute from now.</p> '
  name: DefaultTimeToLiveOffset
  type: int
  writable: true
- defaultValue:
    value:
      value: SAML 2.0 Credential Mapping Provider. Supports Security Assertion Markup
        Language v2.0.
  descriptionHTML: '<p>A short description of the SAML2 Credential Mapping provider.</p> '
  name: Description
  type: java.lang.String
- defaultValue:
    value:
      value: true
  descriptionHTML: 'No description provided. '
  name: GenerateAttributes
  type: boolean
  writable: true
- defaultValue:
    value:
      value: ''
  descriptionHTML: '<p>The Issuer URI (name) of this SAML2 Identity Provider.</p> '
  name: IssuerURI
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: ''
  descriptionHTML: '<p>The qualified name of the Java class that maps Subjects to
    SAML Assertion name information.            When no mapper is specified, the default
    mapper implementation is used.</p> '
  name: NameMapperClassName
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: ''
  descriptionHTML: '<p>The Name Qualifier value used by the Name Mapper.</p><p>The
    value of the Name Qualifier is the security or administrative domain that qualifies
    the name of            the subject. This provides a means to federate names from
    disparate user stores while avoiding the            possibility of subject name
    collision.</p> '
  name: NameQualifier
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: com.bea.security.saml2.providers.SAML2CredentialMapperProviderImpl
  descriptionHTML: '<p>The Java class used to load the SAML2 Credential Mapping provider.</p> '
  name: ProviderClassName
  type: java.lang.String
- defaultValue:
    value:
      value: ''
  descriptionHTML: '<p>The alias used to retrieve from the keystore the key that is
    used to sign assertions.</p> '
  name: SigningKeyAlias
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: ''
  descriptionHTML: '<p>The credential (password) used to retrieve from the keystore
    the keys used to sign assertions.</p> '
  encrypted: true
  name: SigningKeyPassPhrase
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: ' '
  encrypted: true
  name: SigningKeyPassPhraseEncrypted
  type: byte
  writable: true
- array: true
  defaultValue:
    value:
      value:
      - Partner
      - Passwords
  descriptionHTML: '<p>The security data that you want to be exported from this Credential
    Mapping provider''s data store.            A SAML2 Credential Mapping provider
    can export all partners(Partner=all), enabled partners(Partner=enabled)            or
    only disabled partners(Partner=disabled). The password inlined in the exported
    file can be encrypted            or plain text(Passwords=cleartext).</p> '
  name: SupportedExportConstraints
  type: java.lang.String
- array: true
  defaultValue:
    value:
      value:
      - SAML2
  descriptionHTML: '<p>The format of the file to export. The list of supported export            formats
    is determined by this Credential Mapper provider.</p> '
  name: SupportedExportFormats
  type: java.lang.String
- array: true
  defaultValue:
    value:
      value:
      - Partner
  descriptionHTML: '<p>The security data that you want to be imported into this Credential
    Mapping provider''s data store.            A SAML2 Credential Mapping Provider
    can import all partners(Partner=all), enabled partners(Partner=enabled)            or
    only disabled partners(Partner=disabled).</p> '
  name: SupportedImportConstraints
  type: java.lang.String
- array: true
  defaultValue:
    value:
      value:
      - SAML2
  descriptionHTML: '<p>The format of the file to import. The list of supported import
    formats            is determined by the Credential Mapper provider from which
    the security data            were originally exported.</p> '
  name: SupportedImportFormats
  type: java.lang.String
- defaultValue:
    value:
      value: '1.0'
  descriptionHTML: '<p>The version number of the SAML2 Credential Mapping provider.</p> '
  name: Version
  type: java.lang.String
