# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.configuration.DeploymentMBean
descriptionHTML: 'This class represents a JMS connection factory. Connection factories
  are objects that enable JMS clients to create JMS connections. '
name: weblogic.management.configuration.JMSConnectionFactoryMBean
properties:
- defaultValue:
    secureModeValue:
      value: All
    value:
      value: All
  descriptionHTML: '<p>Acknowledge policy for non-transacted sessions that use the
    <tt>CLIENT_ACKNOWLEDGE</tt> mode. <tt>All</tt> specifies that calling acknowledge
    on a message acknowledges all unacknowledged messages received on the session.
    <tt>Previous</tt> specifies that calling acknowledge on a message acknowledges
    only unacknowledged messages up to, and including, the given message.</p>  <p><i>Note:</i>
    This value only applies to implementations that use the <tt>CLIENT_ACKNOWLEDGE</tt>
    acknowledge mode for a non-transacted session.</p>  <p><i>Note:</i> This value
    works around a change in the JMS specification. Specifically, the specification
    allowed users to acknowledge all messages before and including the message being
    acknowledged. The specification was changed so that acknowledging any message
    acknowledges all messages ever received (even those received after the message
    being acknowledge), as follows:</p>  <ul> <li> <p>An acknowledge policy of <tt>ACKNOWLEDGE_PREVIOUS</tt>
    retains the old behavior (acknowledge all message up to and including the message
    being acknowledged).</p> </li>  <li> <p>An acknowledge policy of <tt>ACKNOWLEDGE_ALL</tt>
    yields the new behavior, where all messages received by the given session are
    acknowledged regardless of which message is being used to effect the acknowledge.</p>
    </li> </ul> '
  legalValues:
  - All
  - Previous
  name: AcknowledgePolicy
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether a connection factory creates message consumers
    that allow a <tt>close()</tt> or <tt>stop()</tt> method to be issued within its
    <tt>onMessage()</tt> method call.</p>  <ul> <li> <p>If selected (set to true)
    on a custom connection factory, an <tt>onMessage()</tt> method callback is allowed
    to issue a <tt>close()</tt> method on its own Session, Connection and JMSContext
    objects, or a <tt>stop()</tt> call on its own Connection and JMSContext objects.
    If false, these calls will throw an exception.</p> </li>  <li> <p>Default JMS
    Connection Factories (for example, "java:comp/DefaultJMSConnectionFactory", "weblogic.jms.ConnectionFactory",
    or a "weblogic.jms.XAConnectionFactory") set this option to false. </p> </li>
    </ul>  <p><i>Note:</i> This value is dynamic and can be changed at any time. However,
    changing the value does not affect existing connections. It only affects new connections
    made with this connection factory.</p> '
  name: AllowCloseInOnMessage
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>An optional client ID for a durable subscriber that uses this
    JMS connection factory. Configuring this value on the connection factory prevents
    more than one JMS client from using a connection from the factory. Generally,
    JMS durable subscriber applications set their client IDs dynamically using the
    <tt>javax.jms.Connection.setClientID()</tt> call.</p> '
  name: ClientId
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: Persistent
  descriptionHTML: '<p>The delivery mode assigned to all messages sent by a producer
    using this connection factory.</p>  <p>Message producers can get the delivery
    mode explicitly by calling the <tt>javax.jms.MessageProducer.getDeliveryMode()</tt>
    method.</p>  <p><i>Note:</i> This value is dynamic. It can be changed at any time.
    However, changing the value does not affect existing connections. It only affects
    new connections made with this connection factory.</p> '
  legalValues:
  - Persistent
  - Non-Persistent
  name: DefaultDeliveryMode
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 4
  descriptionHTML: '<p>The default priority used for messages when a priority is not
    explicitly defined.</p>  <p>Message producers can set the priority explicitly
    by calling the <tt>javax.jms.MessageProducer.setPriority()</tt> method.</p>  <p><b>Range
    of Values:</b> Between 0 and 9.</p>  <p><i>Note:</i> This value is dynamic. It
    can be changed at any time. However, changing the value does not affect existing
    connections. It only affects new connections made with this connection factory.</p> '
  name: DefaultPriority
  type: int
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>The number of milliseconds before rolled back or recovered
    messages are redelivered. This value is dynamic. It can be changed at any time.
    However, changing the value does not affect existing connections. It only affects
    new connections made with this connection factory.</p>  <p>Message consumers can
    get the redelivery delay explicitly by calling the <tt>weblogic.jms.extensions.WLSession.getRedliveryDelay()</tt>
    method.</p>  <p><b>Range of Values:</b> Between <code>0</code> and a positive
    64-bit integer.</p> '
  name: DefaultRedeliveryDelay
  type: long
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>The number of milliseconds between when a message is produced
    and when it is made visible on its target destination.</p>  <p>Message producers
    can get the time-to-deliver explicitly by calling the <tt>weblogic.jms.extensions.WLMessageProducer.getTimeToDeliver()</tt>
    method.</p>  <p><b>Range of Values:</b> Between <code>0</code> and a positive
    64-bit integer.</p>  <p><i>Note:</i> This value is dynamic. It can be changed
    at any time. However, changing the value does not affect existing connections.
    It only affects new connections made with this connection factory.</p> '
  name: DefaultTimeToDeliver
  type: long
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>The default maximum number of milliseconds that a message will
    exist. Used for messages for which a Time to Live was not explicitly defined.</p>  <p>The
    default value of <tt>0</tt> indicates that the message has an infinite amount
    time to live.</p>  <p>Message producers can get the time-to-live explicitly by
    calling the <tt>javax.jms.MessageProducer.getTimeToLive()</tt> method.</p>  <p><b>Range
    of Values:</b> Between <code>0</code> and a positive 64-bit integer.</p>  <p><i>Note:</i>
    This value is dynamic. It can be changed at any time. However, changing the value
    does not affect existing connections. It only affects new connections made with
    this connection factory.</p> '
  name: DefaultTimeToLive
  type: long
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Indicates whether flow control is enabled for a producer created
    using this connection factory. If true, the associated message producers will
    be slowed down if the JMS server reaches Bytes/MessagesThresholdHigh.</p> '
  name: FlowControlEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 60
  descriptionHTML: '<p>The number of seconds (between 0 and a positive 32-bit integer)
    when a producer adjusts its flow from the Flow Maximum number of messages to the
    Flow Minimum amount, or vice versa.</p>  <p><i>Note:</i> This value is dynamic.
    It can be changed at any time. However, changing the value does not affect existing
    connections.</p> '
  name: FlowInterval
  type: int
  writable: true
- defaultValue:
    secureModeValue:
      value: 500
    value:
      value: 500
  descriptionHTML: '<p>The maximum number of messages-per-second (between 0 and a
    positive 32-bit integer) allowed for a producer that is experiencing a threshold
    condition on the JMS server or queue/topic destination. When a producer is flow
    controlled it will never be allowed to go faster than this number of messages
    per second.</p>  <p>If a producer is not currently limiting its flow when a threshold
    condition is reached, the initial flow limit for that producer is set to FlowMaximum.
    If a producer is already limiting its flow when a threshold condition is reached
    (the flow limit is less than FlowMaximum), then the producer will continue at
    its current flow limit until the next time the flow is evaluated.</p>  <p><i>Note:</i>
    Once a threshold condition has subsided, the producer is not permitted to ignore
    its flow limit. If its flow limit is less than the FlowMaximum, then the producer
    must gradually increase its flow to the FlowMaximum each time the flow is evaluated.
    When the producer finally reaches the FlowMaximum, it can then ignore its flow
    limit and send without limiting its flow.</p>  <p><i>Note:</i> This value is dynamic.
    It can be changed at any time. However, changing the value does not affect existing
    connections.</p> '
  name: FlowMaximum
  type: int
  writable: true
- defaultValue:
    value:
      value: 50
  descriptionHTML: '<p>The minimum number of messages-per-second allowed for a producer
    that is experiencing a threshold condition. That is, WebLogic JMS will not further
    slow down a producer whose message flow limit is at its Flow Minimum.</p>  <p><b>Range
    of Values</b>: Between 0 and a positive 32-bit integer.</p>  <p><i>Note:</i> When
    a producer is flow controlled it will never be required to go slower than FlowMinimum
    messages per second.</p>  <p><i>Note:</i> This value is dynamic. It can be changed
    at any time. However, changing the value does not affect existing connections.</p> '
  name: FlowMinimum
  type: int
  writable: true
- defaultValue:
    value:
      value: 10
  descriptionHTML: '<p>The number of steps (between 1 and a positive 32-bit integer)
    used when a producer is adjusting its flow from the Flow Maximum amount of messages
    to the Flow Minimum amount, or vice versa.</p>  <p>Also, the movement (i.e., the
    rate of adjustment) is calculated by dividing the difference between the Flow
    Maximum and the Flow Minimum into steps. At each Flow Step, the flow is adjusted
    upward or downward, as necessary, based on the current conditions, as follows:</p>  <ul>
    <li> <p>The downward movement (the decay) is geometric over the specified period
    of time (Flow Interval) and according to the specified number of Flow Steps. (For
    example, 100, 50, 25, 12.5)</p> </li>  <li> <p>The movement upward is linear.
    The difference is simply divided by the number of steps.</p> </li> </ul>  <p><i>Note:</i>
    This value is dynamic. It can be changed at any time. However, changing the value
    does not affect existing connections.</p> '
  name: FlowSteps
  type: int
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The JNDI name used to look up this JMS connection factory within
    the JNDI namespace.</p> '
  name: JNDIName
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Indicates whether non-anonymous producers sending to a distributed
    destination are load balanced on a per-send basis.</p>  <ul> <li> <p>If true,
    the associated message producers will be load balanced on every <tt>send()</tt>
    or <tt>publish()</tt>.</p> </li>  <li> <p>If false, the associated message producers
    will be load balanced on the first <tt>send()</tt> or <tt>publish()</tt>.</p>
    </li> </ul> '
  name: LoadBalancingEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 10
  descriptionHTML: '<p>The maximum number of messages that may exist for an asynchronous
    session and that have not yet been passed to the message listener. A value of
    <tt>-1</tt> indicates that there is no limit on the number of messages. This value
    is dynamic. It can be changed at any time. However, changing the value does not
    affect existing connections. It only affects new connections made with this connection
    factory. (For topic subscribers that use the multicast extension, also see the
    Overrun Policy field.)</p>  <p>When the number of messages reaches the MessagesMaximum
    value:</p>  <ul> <li> <p>For multicast sessions, new messages are discarded according
    the policy specified by the OverrunPolicy value and a DataOverrunException is
    thrown.</p> </li>  <li> <p>For non-multicast sessions, new messages are flow-controlled,
    or retained on the server until the application can accommodate the messages.</p>
    </li> </ul>  <p><b>Range of Values:</b> Between -1 and a positive 32-bit integer.</p>  <p><i>Note:</i>
    For multicast sessions, when a connection is stopped, messages will continue to
    be delivered, but only until the MessagesMaximum value is reached. Once this value
    is reached, messages will be discarded based on the Overrun policy.</p> '
  name: MessagesMaximum
  type: int
  writable: true
- defaultValue:
    value:
      value: KeepOld
  descriptionHTML: '<p>Overrun policy for topic subscribers that use the multicast
    extension. The policy to use when the number of outstanding multicast messages
    reaches the value specified in the Messages Maximum field and some messages must
    be discarded. <tt>Keep New</tt> indicates that the most recent messages are given
    priority over the oldest messages, and the oldest messages are discarded, as needed.
    <tt>Keep Old</tt> indicates that the oldest messages are given priority over the
    most recent messages, and the most recent messages are discarded, as needed. Message
    age is defined by the order of receipt, not by the JMSTimestamp value.</p>  <p>The
    policy to use when the number of outstanding multicast messages reaches the value
    specified in MessagesMaximum and some messages must be discarded.</p>  <ul> <li>
    <p>If set to <code>Keep New</code>, the most recent messages are given priority
    over the oldest messages, and the oldest messages are discarded, as needed.</p>
    </li>  <li> <p>If set to <code>Keep Old</code>, the oldest messages are given
    priority over the most recent messages, and the most recent messages are discarded,
    as needed.</p> </li> </ul>  <p>Message age is defined by the order of receipt,
    not by the JMSTimestamp value.</p>  <p><i>Note:</i> This value is dynamic. It
    can be changed at any time. However, changing the value does not affect existing
    connections. It only affects new connections made with this connection factory.</p> '
  legalValues:
  - KeepOld
  - KeepNew
  name: OverrunPolicy
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: Per-Member
  descriptionHTML: '<p>Gets the value of the ProducerLoadBalancingPolicy attribute.</p>
    <p>See the non-deprecated form of this bean for full javadoc.</p> '
  legalValues:
  - Per-Member
  - Per-JVM
  name: ProducerLoadBalancingPolicy
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 10
  descriptionHTML: '<p>The maximum number of milliseconds that a sender will wait
    for sufficient space (quota) on a JMS server and destination to accommodate the
    message being sent. Also see the Blocking Send Policy field on the JMS Server
    &gt; Configuration &gt; Thresholds &amp; Quotas tab.</p>  <p><b>Range of Values:</b>
    Between <code>0</code> and a positive 64-bit integer.</p>  <p>The default time
    is <code>10</code> milliseconds. A value of <code>0</code> indicates that the
    sender does not want to wait for space.</p>  <p><i>Note:</i> This value is dynamic.
    It can be changed at any time. However, changing the value does not affect existing
    connections or their producers. It only affects new connections made with this
    connection factory. Producers inherit the setting from the connection factory
    used to create their session and connection. The value can then be overridden
    at run time by setting the value on the producer.</p> '
  name: SendTimeout
  type: long
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Indicates whether a server that is load balancing consumers
    or producers across multiple physical destinations in a distributed destination
    set will first attempt to load balance across any other physical destinations
    that are also running on the same WebLogic Server instance.</p> '
  name: ServerAffinityEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 3600
  descriptionHTML: '<p>The timeout seconds for all transactions on transacted sessions
    created with this JMS connection factory. This setting has no effect on the transaction-timeout
    for JTA user transactions.</p>  <p><b>Range of Values:</b> Between 0 and a positive
    32-bit integer.</p>  <p><i>Note:</i> This value is dynamic. It can be changed
    at any time. However, changing the value does not affect existing connections.
    It only affects new connections made with this connection factory.</p>  <p><i>Note:</i>
    If a transacted session is still active after the timeout has elapsed, the transaction
    is rolled back. A value of 0 indicates that the default value will be used. If
    you have long-running transactions, you might want to adjust the value of this
    value to allow transactions to complete.</p> '
  name: TransactionTimeout
  type: long
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '8.1.0.0 Replaced by weblogic.management.configuration.JMSConnectionFactoryMBean.isXAConnectionFactoryEnabled() '
  descriptionHTML: '<p>Specifies whether a connection factory creates sessions that
    are JTA aware. If true, the associated message producers and message consumers
    look into the running thread for a transaction context. Otherwise, the current
    JTA transaction will be ignored. This value is dynamic. It can be changed at any
    time. However, changing the value does not affect existing connections. It only
    affects new connections made with this connection factory.</p>  <p><i>Note:</i>
    This value is now deprecated. If the XAServerEnabled value is set, then this value
    is automatically set as well.</p>  <p><i>Note:</i> Transacted sessions ignore
    the current threads transaction context in favor of their own internal transaction,
    regardless of the setting. This setting only affects non-transacted sessions.</p> '
  name: UserTransactionsEnabled
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether a XA queue or XA topic connection factory
    is returned, instead of a queue or topic connection factory. An XA factory is
    required for JMS applications to use JTA user-transactions, but is not required
    for transacted sessions. All connections created from an XA factory, whether they
    are XAConnections or plain Connections, become JTA user-transaction-aware.</p>  <p>In
    addition, this value indicates whether or not a connection factory creates sessions
    that are JTA aware. If true, the associated message producers and message consumers
    look into the running thread for a transaction context. Otherwise, the current
    JTA transaction will be ignored.</p>  <p><i>Note:</i> Transacted sessions ignore
    the current threads transaction context in favor of their own internal transaction,
    regardless of the setting. This setting only affects non-transacted sessions.</p> '
  name: XAConnectionFactoryEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '8.1.0.0 Replaced by weblogic.management.configuration.JMSConnectionFactoryMBean.isXAConnectionFactoryEnabled() '
  descriptionHTML: '<p>Indicates whether an XA connection factory will be returned
    instead of a standard connection factory.</p>  <p><i>Note:</i> This value is deprecated.
    It is now possible to use a single XA-enabled connection factory for both XA and
    non-XA purposes.</p> '
  name: XAServerEnabled
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
roles:
  allowed:
  - Deployer
