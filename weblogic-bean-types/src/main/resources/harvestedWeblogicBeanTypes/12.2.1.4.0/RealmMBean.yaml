# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.descriptor.SettableBean
descriptionHTML: '<p>The MBean that represents configuration attributes for the security
  realm.</p>  <p>A security realm contains a set of security configuration settings,
  including the list of security providers to use (for example, for authentication
  and authorization).</p>  <p>Code using security can either use the default security
  realm for the domain or refer to a particular security realm by name (by using the
  JMX display name of the security realm).</p>  <p>One security realm in the WebLogic
  domain must have the <code>DefaultRealm</code> attribute set to true. The security
  realm with the <code>DefaultRealm</code> attribute set to true is used as the default
  security realm for the WebLogic domain. Note that other available security realms
  must have the <code>DefaultRealm</code> attribute set to false.</p>  <p>When WebLogic
  Server boots, it locates and uses the default security realm. The security realm
  is considered active since it is used when WebLogic Server runs. Any security realm
  that is not used when WebLogic Server runs is considered inactive. All active security
  realms must be configured before WebLogic Server is boots.</p>  <p>Since security
  providers are scoped by realm, the <code>Realm</code> attribute on a security provider
  must be set to the realm that uses the provider.</p> '
name: weblogic.management.security.RealmMBean
properties:
- creators:
  - weblogic.management.security.authorization.AdjudicatorMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns the Adjudication provider for this security realm. '
  name: Adjudicator
  relationship: containment
  type: weblogic.management.security.authorization.AdjudicatorMBean
- array: true
  defaultValue: {
    }
  descriptionHTML: 'Returns the types of Adjudication providers that may be created
    in this security realm, for example, <code>weblogic.security.providers.authorization.DefaultAdjudicator</code>.
    Use this method to find the available types to pass to <code>createAdjudicator</code> '
  name: AdjudicatorTypes
  transient: true
  type: java.lang.String
- array: true
  defaultValue: {
    }
  descriptionHTML: 'Returns the types of Auditing providers that may be created in
    this security realm, for example, <code>weblogic.security.providers.audit.DefaultAuditor</code>.
    Use this method to find the available types to pass to <code>createAuditor</code> '
  name: AuditorTypes
  transient: true
  type: java.lang.String
- array: true
  creators:
  - weblogic.management.security.audit.AuditorMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns the Auditing providers for this security realm (in invocation
    order). '
  name: Auditors
  relationship: containment
  restartNeeded: true
  type: weblogic.management.security.audit.AuditorMBean
  writable: true
- defaultValue: {
    }
  descriptionHTML: 'Returns a comma separated string of authentication methods that
    should be used when the Web application specifies "REALM" as its auth-method.
    The authentication methods will be applied in order in which they appear in the
    list. '
  name: AuthMethods
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: 'Returns the types of Authentication providers that may be created
    in this security realm, for example, <code>weblogic.security.providers.authentication.DefaultAuthenticator</code>.
    Use this method to find the available types to pass to <code>createAuthenticationProvider</code> '
  name: AuthenticationProviderTypes
  transient: true
  type: java.lang.String
- array: true
  creators:
  - weblogic.management.security.authentication.AuthenticationProviderMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns the Authentication providers for this security realm (in
    invocation order). '
  name: AuthenticationProviders
  relationship: containment
  restartNeeded: true
  type: weblogic.management.security.authentication.AuthenticationProviderMBean
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: 'Returns the types of Authorization providers that may be created
    in this security realm, for example, <code>weblogic.security.providers.authorization.DefaultAuthorizer</code>.
    Use this method to find the available types to pass to <code>createAuthorizer</code> '
  name: AuthorizerTypes
  transient: true
  type: java.lang.String
- array: true
  creators:
  - weblogic.management.security.authorization.AuthorizerMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns the Authorization providers for this security realm (in
    invocation order). '
  name: Authorizers
  relationship: containment
  restartNeeded: true
  type: weblogic.management.security.authorization.AuthorizerMBean
  writable: true
- defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>Specifies whether the Realm will be auto-restarted if non-dynamic
    changes are made to the realm or providers within the realm.</p> '
  name: AutoRestartOnNonDynamicChanges
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: 'Returns the CertPath Builder provider in this security realm that
    will be used by the security system to build certification paths.  Returns null
    if none has been selected.  The provider will be one of this security realm''s
    <code>CertPathProviders</code>. '
  name: CertPathBuilder
  relationship: reference
  restartNeeded: true
  type: weblogic.management.security.pk.CertPathBuilderMBean
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: 'Returns the types of Certification Path providers that may be
    created in this security realm, for example, <code>weblogic.security.providers.pk.WebLogicCertPathProvider</code>.
    Use this method to find the available types to pass to <code>createCertPathProvider</code> '
  name: CertPathProviderTypes
  transient: true
  type: java.lang.String
- array: true
  creators:
  - weblogic.management.security.pk.CertPathProviderMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns the Certification Path providers for this security realm
    (in invocation order). '
  name: CertPathProviders
  relationship: containment
  restartNeeded: true
  type: weblogic.management.security.pk.CertPathProviderMBean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Determines how the role mappings in the Enterprise Application,
    Web application, and EJB containers interact. This setting is valid only for Web
    applications and EJBs that use the Advanced security model and that initialize
    roles from deployment descriptors.</p> <p>When enabled:</p>  <ul> <li>Application
    role mappings are combined with EJB and Web application mappings so that all principal
    mappings are included. The Security Service combines the role mappings with a
    logical <code>OR</code> operator.</li>  <li>If one or more policies in the <code>web.xml</code>
    file specify a role for which no mapping exists in the <code>weblogic.xml</code>
    file, the Web application container creates an empty map for the undefined role
    (that is, the role is explicitly defined as containing no principal). Therefore,
    no one can access URL patterns that are secured by such policies.</li>  <li>If
    one or more policies in the <code>ejb-jar.xml</code> file specify a role for which
    no mapping exists in the <code>weblogic-ejb-jar.xml</code> file, the EJB container
    creates an empty map for the undefined role (that is, the role is explicitly defined
    as containing no principal). Therefore, no one can access methods that are secured
    by such policies.</li> </ul>  <p>When disabled:</p>  <ul> <li>Role mappings for
    each container are exclusive to other containers unless defined by the <code>&lt;externally-defined&gt;</code>
    descriptor element.</li>  <li><p>If one or more policies in the <code>web.xml</code>
    file specify a role for which no role mapping exists in the <code>weblogic.xml</code>
    file, the Web application container assumes that the undefined role is the name
    of a principal. It therefore maps the assumed principal to the role name. For
    example, if the <code>web.xml</code> file contains the following stanza in one
    of its policies:</p>  <p><code>&lt;auth-constraint&gt;<br> &lt;role-name&gt;PrivilegedUser&lt;/role-name&gt;<br>
    &lt;/auth-constraint&gt;</code></p>  <p>but, if the <code>weblogic.xml</code>
    file has no role mapping for <code>PrivilegedUser</code>, then the Web application
    container creates an in-memory mapping that is equivalent to the following stanza:</p>  <p><code>&lt;security-role-assignment&gt;<br>
    &lt;role-name&gt;PrivilegedUser&lt;/role-name&gt;<br> &lt;principal-name&gt;PrivilegedUser&lt;/principal-name&gt;<br>
    &lt;/security-role-assignment&gt;</code></p> </li>  <li>Role mappings for EJB
    methods must be defined in the <code>weblogic-ejb-jar.xml</code> file. Role mappings
    defined in the other containers are not used unless defined by the <code>&lt;externally-defined&gt;</code>
    descriptor element.</li> </ul>  <dl> <dt>Note:</dt>  <dd>For all applications
    previously deployed in version 8.1 and upgraded to version 9.x, the combining
    role mapping is disabled by default.</dd> </dl> '
  name: CombinedRoleMappingEnabled
  type: boolean
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: 'Returns the types of Credential Mapping providers that may be
    created in this security realm, for example, <code>weblogic.security.providers.credentials.DefaultCredentialMapper</code>.
    Use this method to find the available types to pass to <code>createCredentialMapper</code> '
  name: CredentialMapperTypes
  transient: true
  type: java.lang.String
- array: true
  creators:
  - weblogic.management.security.credentials.CredentialMapperMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns the Credential Mapping providers for this security realm
    (in invocation order). '
  name: CredentialMappers
  relationship: containment
  restartNeeded: true
  type: weblogic.management.security.credentials.CredentialMapperMBean
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 Replaced by weblogic.management.configuration.SecurityConfigurationMBean.getDefaultRealm() '
  descriptionHTML: 'Returns whether this security realm is the Default realm for the
    WebLogic domain. Deprecated in this release of WebLogic Server and replaced by
    <code>weblogic.management.configuration.SecurityConfigurationMBean.getDefaultRealm</code>. '
  name: DefaultRealm
  restartNeeded: true
  supported: false
  transient: true
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: true
    value:
      value: false
  descriptionHTML: '<p>Configures the WebLogic Server MBean servers to use the security
    realm''s Authorization providers to determine whether a JMX client has permission
    to access an MBean attribute or invoke an MBean operation.</p> <p>You can continue
    to use WebLogic Server''s default security settings or modify the defaults to
    suit your needs.</p> <p>If you do not delegate authorization to the realm''s Authorization
    providers, the WebLogic MBean servers allow access only to the four default security
    roles (Admin, Deployer, Operator, and Monitor) and only as specified by WebLogic
    Server''s default security settings.</p> '
  name: DelegateMBeanAuthorization
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 '
  descriptionHTML: 'Returns whether credential mapping deployment calls on the security
    system are ignored or passed to the configured Credential Mapping providers. '
  name: DeployCredentialMappingIgnored
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 '
  descriptionHTML: 'Returns whether policy deployment calls on the security system
    are ignored or passed to the configured Authorization providers. '
  name: DeployPolicyIgnored
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 '
  descriptionHTML: 'Returns whether role deployment calls on the security system are
    ignored or passed to the configured Role Mapping providers. '
  name: DeployRoleIgnored
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether synchronization for deployable Authorization
    and Role Mapping providers is enabled.</p>  <p>The Authorization and Role Mapping
    providers may or may not support parallel security policy and role modification,
    respectively, in the security provider database. If the security providers do
    not support parallel modification, the WebLogic Security Framework enforces a
    synchronization mechanism that results in each application and module being placed
    in a queue and deployed sequentially.</p> '
  name: DeployableProviderSynchronizationEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 60000
  descriptionHTML: 'Returns the timeout value, in milliseconds, for the deployable
    security provider synchronization operation. This value is only used if <code>DeployableProviderSynchronizationEnabled</code>
    is set to <code>true</code> '
  name: DeployableProviderSynchronizationTimeout
  restartNeeded: true
  type: java.lang.Integer
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Returns whether the WebLogic Principal Validator caching is
    enabled.</p>  <p>The Principal Validator is used by Oracle supplied authentication
    providers and may be used by custom authentication providers. If enabled, the
    default principal validator will cache WebLogic Principal signatures.</p> '
  name: EnableWebLogicPrincipalValidatorCache
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 '
  descriptionHTML: 'Returns whether the Web and EJB containers should call the security
    framework on every access. <p> If false the containers are free to only call the
    security framework when security is set in the deployment descriptors. '
  name: FullyDelegateAuthorization
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- array: true
  defaultValue:
    value:
      value: null
  descriptionHTML: '<p>Obtain an ordered list of token type names used for Identity
    Assertion with HTTP request headers.</p>  <p>The list determines the precedence
    order when multiple HTTP headers are present in an HTTP request based on the list
    of active token types maintained on the configured Authentication providers.</p> '
  name: IdentityAssertionHeaderNamePrecedence
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Sets the Management Identity Domain value for the realm.</p> '
  name: ManagementIdentityDomain
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 500
  descriptionHTML: 'Returns the maximum size of the LRU cache for holding WebLogic
    Principal signatures. This value is only used if <code>EnableWebLogicPrincipalValidatorCache</code>
    is set to <code>true</code> '
  name: MaxWebLogicPrincipalsInCache
  restartNeeded: true
  type: java.lang.Integer
  writable: true
- defaultValue:
    value:
      value: Realm
  descriptionHTML: 'The name of this configuration. WebLogic Server uses an MBean
    to implement and persist the configuration. '
  name: Name
  type: java.lang.String
- array: true
  defaultValue: {
    }
  descriptionHTML: 'Returns the types of Password Validator providers that may be
    created in this security realm, for example, <code>com.bea.security.providers.authentication.passwordvalidator.SystemPasswordValidator</code>.
    Use this method to find the available types to pass to <code>createPasswordValidator</code> '
  name: PasswordValidatorTypes
  transient: true
  type: java.lang.String
- array: true
  creators:
  - weblogic.management.security.authentication.PasswordValidatorMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns the Password Validator providers for this security realm
    (in invocation order). '
  name: PasswordValidators
  relationship: containment
  restartNeeded: true
  type: weblogic.management.security.authentication.PasswordValidatorMBean
  writable: true
- creators:
  - weblogic.management.security.RDBMSSecurityStoreMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns RDBMSSecurityStoreMBean for this realm, which is a singleton
    MBean describing RDBMS security store configuration. '
  name: RDBMSSecurityStore
  relationship: containment
  type: weblogic.management.security.RDBMSSecurityStoreMBean
- defaultValue:
    value:
      value: 60
  descriptionHTML: '<p>Specifies the retire timeout for a realm that is restarted.
    The old realm will be shutdown after the specified timeout period has elapsed.</p> '
  name: RetireTimeoutSeconds
  type: int
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: 'Returns the types of Role Mapping providers that may be created
    in this security realm, for example, <code>weblogic.security.providers.authorization.DefaultRoleMapper</code>.
    Use this method to find the available types to pass to <code>createRoleMapper</code> '
  name: RoleMapperTypes
  transient: true
  type: java.lang.String
- array: true
  creators:
  - weblogic.management.security.authorization.RoleMapperMBean
  defaultValue: {
    }
  descriptionHTML: 'Returns the Role Mapping providers for this security realm (in
    invocation order). '
  name: RoleMappers
  relationship: containment
  restartNeeded: true
  type: weblogic.management.security.authorization.RoleMapperMBean
  writable: true
- defaultValue:
    value:
      value: DDOnly
  descriptionHTML: '<p>Specifies the default security model for Web applications or
    EJBs that are secured by this security realm. You can override this default during
    deployment.</p>  <p><b>Note:</b> If you deploy a module by modifying the domain''s
    <code>config.xml</code> file and restarting the server, and if you do not specify
    a security model value for the module in <code>config.xml</code>, the module is
    secured with the default value of the <code>AppDeploymentMBean SecurityDDModel</code>  attribute
    (see weblogic.management.configuration.AppDeploymentMBean.getSecurityDDModel()).</p>  <p>Choose
    one of these security models:</p> <ul> <li><code>Deployment Descriptors Only (DDOnly)</code>
    <ul> <li>For EJBs and URL patterns, this model uses only the roles and policies
    in the J2EE deployment descriptors (DD); the Administration Console allows only
    read access for this data. With this model, EJBs and URL patterns are not protected
    by roles and policies of a broader scope (such as a policy scoped to an entire
    Web application). If an EJB or URL pattern is not protected by a role or policy
    in the DD, then it is unprotected: anyone can access it. </li>  <li>For application-scoped
    <i>roles</i> in an EAR, this model uses only the roles defined in the WebLogic
    Server DD; the Administration Console allows only read access for this data. If
    the WebLogic Server DD does not define roles, then there will be no such scoped
    roles defined for this EAR.</li>  <li>For all other types of resources, you can
    use the Administration Console to create roles or policies. For example, with
    this model, you can use the Administration Console to create application-scoped
    <i>policies</i> for an EAR.</li>   <li>Applies for the life of the deployment.
    If you want to use a different model, you must delete the deployment and reinstall
    it.</li> </ul> </li>  <li><code>Customize Roles Only (CustomRoles)</code> <ul>
    <li>For EJBs and URL patterns, this model uses only the <i>policies</i> in the
    J2EE deployment descriptors (DD). EJBs and URL patterns are not protected by policies
    of a broader scope (such as a policy scoped to an entire Web application). This
    model ignores any <i>roles</i> defined in the DDs; an administrator completes
    the role mappings using the Administration Console.</li>  <li>For all other types
    of resources, you can use the Administration Console to create roles or policies.
    For example, with this model, you can use the Administration Console to create
    application-scoped policies or roles for an EAR.</li>  <li>Applies for the life
    of the deployment. If you want to use a different model, you must delete the deployment
    and reinstall it.</li> </ul> </li>  <li><code>Customize Roles and Policies (CustomRolesAndPolicies)</code>
    <ul> <li>Ignores any roles and policies defined in deployment descriptors. An
    administrator uses the Administration Console to secure the resources.</li>  <li>Performs
    security checks for <b>all</b> URLs or EJB methods in the module.</li>  <li>Applies
    for the life of the deployment. If you want to use a different model, you must
    delete the deployment and reinstall it.</li> </ul> </li>  <li><code>Advanced (Advanced)</code>
    <p>You configure how this model behaves by setting values for the following options:</p>
    <ul> <li><code>When Deploying Web Applications or EJBs</code> <p><b>Note:</b>
    When using the WebLogic Scripting Tool or JMX APIs, there is no single MBean attribute
    for this setting. Instead, you must set the values for the <code>DeployPolicyIgnored</code>
    and <code>DeployRoleIgnored</code> attributes of <code>RealmMBean</code>.</p>
    </li>  <li><code>Check Roles and Policies (FullyDelegateAuthorization)</code></li>  <li><code>Combined
    Role Mapping Enabled (CombinedRoleMappingEnabled)</code></li> </ul> <p>You can
    change the configuration of this model. Any changes immediately apply to all modules
    that use the Advanced model. For example, you can specify that all modules using
    this model will copy roles and policies from their deployment descriptors into
    the appropriate provider databases upon deployment. After you deploy all of your
    modules, you can change this behavior to ignore roles and policies in deployment
    descriptors so that when you redeploy modules they will not re-copy roles and
    policies.</p>  <p><b>Note:</b> Prior to WebLogic Server version 9.0 the Advanced
    model was the only security model available. Use this model if you want to continue
    to secure EJBs and Web Applications as in releases prior to 9.0.</p> </li> </ul> '
  legalValues:
  - DDOnly
  - CustomRoles
  - CustomRolesAndPolicies
  - Advanced
  name: SecurityDDModel
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: 'Returns the User Lockout Manager for this security realm. '
  name: UserLockoutManager
  relationship: containment
  type: weblogic.management.security.authentication.UserLockoutManagerMBean
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Not used in this release.</p> '
  name: ValidateDDSecurityData
  type: boolean
  writable: true
