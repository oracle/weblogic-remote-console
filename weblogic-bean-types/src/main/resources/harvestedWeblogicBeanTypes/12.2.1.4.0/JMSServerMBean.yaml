# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.management.configuration.TargetMBean
- weblogic.management.configuration.DeploymentMBean
derivedTypes: [
  ]
descriptionHTML: '<p>This class represents a JMS server. A JMS server manages connections
  and message requests on behalf of clients.</p> '
name: weblogic.management.configuration.JMSServerMBean
properties:
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether JMS clients will get an exception when sending
    persistent messages to a destination targeted to a JMS server that does not have
    a persistent store configured. This parameter only has effect when the Store Enabled
    parameter is disabled (false).</p>  <p>When set to false, the default, clients
    will get an exception when sending persistent messages to a JMS server with no
    store configured. When set to true, then persistent messages are downgraded to
    non-persistent; however, the send operations are allowed to continue.</p> '
  name: AllowsPersistentDowngrade
  type: boolean
  writable: true
- defaultValue:
    value:
      value: FIFO
  descriptionHTML: '<p>Determines whether the JMS server delivers smaller messages
    before larger ones when a destination has exceeded its maximum number of messages.
    <code>FIFO</code> prevents the JMS server from delivering smaller messages when
    larger ones are already waiting for space. <code>Preemptive</code> allows smaller
    send requests to preempt previous larger ones when there is sufficient space for
    smaller messages on the destination.</p>  <p>This policy is defined only for the
    JMS server; it cannot be set on individual destinations.</p>  <p>Additional information
    on the <code>FIFO</code> and <code>Preemptive</code> policies is provided below.</p>
    <p> <code>FIFO</code> (first in, first out) indicates that all send requests for
    the same destination are queued up one behind the other until space is available.
    No send request is permitted to successfully complete if there is another send
    request waiting for space before it. When space is limited, the FIFO policy prevents
    the starvation of larger requests because smaller requests cannot continuously
    use the remaining available space. Smaller requests are delayed, though not starved,
    until the larger request can be completed. When space does become available, requests
    are considered in the order in which they were made. If there is sufficient space
    for a given request, then that request is completed and the next request is considered.
    If there is insufficient space for a given request, then no further requests are
    considered until sufficient space becomes available for the current request to
    complete.</p> <p> <code>Preemptive</code> indicates that a send operation can
    preempt other blocking send operations if space is available. That is, if there
    is sufficient space for the current request, then that space is used even if there
    are other requests waiting for space. When space is limited, the Preemptive policy
    can result in the starvation of larger requests. For example, if there is insufficient
    available space for a large request, then it is queued up behind other existing
    requests. When space does become available, all requests are considered in the
    order in which they were originally made. If there is sufficient space for a given
    request, then that request is allowed to continue and the next request is considered.
    If there is insufficient space for a given request, then that request is skipped
    and the next request is considered.</p> '
  legalValues:
  - FIFO
  - Preemptive
  name: BlockingSendPolicy
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The maximum number of bytes that can be stored in this JMS
    server. A value of <code>-1</code> removes any WebLogic Server limits.</p>  <p>Because
    excessive bytes volume can cause memory saturation, Oracle recommends that this
    maximum corresponds to the total amount of system memory available after accounting
    for the rest of your application load.</p>  <p><b>Range of Values:</b> &gt;= BytesThresholdHigh</p> '
  name: BytesMaximum
  type: long
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 Replaced by defaulting the paging to always be enabled. '
  descriptionHTML: '<p>This parameter has been deprecated. Paging is always enabled.
    The "MessageBufferSize" parameter controls how much memory is used before paging
    kicks in.</p> '
  name: BytesPagingEnabled
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The upper threshold (number of bytes stored in this JMS server)
    that triggers flow control and logging events. A value of <code>-1</code> disables
    the events for this JMS server.</p>  <p>The triggered events are:</p> <ul> <li>
    <code>Log Messages</code> - A message is logged on the server indicating a high
    threshold condition. </li> <li> <code>Flow Control</code> - If flow control is
    enabled, the JMS server becomes armed and instructs producers to begin decreasing
    their message flow. </li> </ul>  <p><b>Range of Values:</b> &lt;= BytesMaximum;
    &gt;= BytesThresholdLow</p> '
  name: BytesThresholdHigh
  type: long
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The lower threshold (number of bytes stored in this JMS server)
    that triggers flow control and logging events. A value of <code>-1</code> disables
    the events for this JMS server.</p>  <p>If the number of bytes falls below this
    threshold, the triggered events are:</p> <ul> <li> <code>Log Messages</code> -
    A message is logged on the server indicating that the threshold condition has
    cleared. </li> <li> <code>Flow Control</code> - If flow control is enabled, the
    JMS server becomes disarmed and instructs producers to begin increasing their
    message flow. </li> </ul>  <p><b>Range of Values:</b> &lt;= BytesThresholdHigh</p> '
  name: BytesThresholdLow
  type: long
  writable: true
- defaultValue:
    value:
      value: default
  descriptionHTML: '<p>Indicates whether consumption is paused at startup on destinations
    targeted to this JMS server at startup. A destination cannot receive any new messages
    while it is paused.</p>  <p>When the value is set to <code>true</code>, then immediately
    after the host server instance is booted, then this JMS server and its targeted
    destinations are modified such that they are in a "consumption paused" state,
    which prevents any message consuming activity on those destinations.</p>  <p>To
    allow normal message consumption on the destinations, later you will have to change
    the state of this JMS server to a "consumption enabled" state by setting this
    value to <code>false</code>, and then either redeploy the JMS server or reboot
    the hosting server instance.</p>  <p>When the value is set to <code>default</code>,
    then the Consumption Paused At Startup is determined based on the corresponding
    setting on the individual destination.</p>  <p>If the value is changed and activated,
    you need to restart any servers to which the MBean is targeted before the value
    will take effect (even though you do not get a warning in the Console that the
    server needs to be restarted).</p> '
  name: ConsumptionPausedAtStartup
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  deprecated: '9.0.0.0 Replaced with the functionality of JMS modules. '
  descriptionHTML: '<p>All defined destinations and their associated JNDI names.</p> '
  name: Destinations
  obsolete: 9.0.0.0
  relationship: reference
  supported: false
  transient: true
  type: weblogic.management.configuration.JMSDestinationMBean
- defaultValue:
    value:
      value: 30
  descriptionHTML: '<p>The number of seconds between this JMS server''s cycles of
    scanning local destinations for expired messages. A value of <code>0</code> disables
    active scanning. A very large scan interval effectively disables active scanning.</p>  <p>With
    scanning disabled, users still do not receive expired messages and any expired
    messages that are discovered by other system activities are removed. However,
    expired messages sitting in idle destinations (such as an inactive queue or disconnected
    durable subscriber) are not removed and continue to consume system resources.</p>  <p>The
    scanning cycle for expired messages occurs as follows:</p> <ul> <li> After the
    specified waiting period, the JMS server devotes a separate thread to scan all
    of its local destinations for expired messages. </li> <li> After the scanning
    is completed, all located expired messages are processed according to the specified
    Expiration Policy on the destination (Discard, Log, or Redirect). </li> <li> The
    entire process repeats after another specified waiting period. </li> </ul>  <p><b>Note:</b>
    Because a new scan does not start until the current one is finished and until
    the specified waiting period ends, an expired message could still remain in the
    system for the maximum scan waiting period plus the amount of time it takes to
    perform the scan.</p> '
  name: ExpirationScanInterval
  type: int
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Specifies whether this JMS server can be used to host temporary
    destinations.</p>  <p>If this field is enabled and no <b>Temporary Template Name</b>
    is defined, then the temporary destinations created on this JMS server will use
    all default destination values. If this field is enabled, then the JMS template
    to be used for creating temporary destinations is specified by the <b>Temporary
    Template Name</b> field. If this field is disabled, then this JMS server will
    not host temporary destinations.</p> '
  name: HostingTemporaryDestinations
  type: boolean
  writable: true
- defaultValue:
    value:
      value: default
  descriptionHTML: '<p>Indicates whether insertion is paused at startup on destinations
    targeted to this JMS server. A destination cannot receive any new messages while
    it is paused.</p>  <p>When the value is set to <code>true</code>, then immediately
    after the host server instance is booted, then this JMS server and its targeted
    destinations are modified such that they are in a "insertion paused" state, which
    results preventing messages that are result of the "in-flight" work completion
    to arrive on those destinations.</p>  <p><b>Note:</b> For a detailed definition
    of "in-flight" work/messages, see weblogic.management.runtime.JMSServerRuntimeMBean#resumeInsertion
    and weblogic.management.runtime.JMSDestinationRuntime#resumeInsertion</p>  <p>To
    allow in-flight work messages to appear on the destinations, later you will have
    to change the state of this JMS server to an "insertion enabled" state by setting
    this value to <code>false</code>, and then either redeploy the JMS server or reboot
    the hosting server instance.</p>  <p>When the value is set to <code>default</code>,
    then the Insertion Paused At Startup is determined based on the corresponding
    setting on the individual destination.</p>  <p>If the value is changed and activated,
    you need to restart any servers to which the MBean is targeted before the value
    will take effect (even though you do not get a warning in the Console that the
    server needs to be restarted).</p> '
  name: InsertionPausedAtStartup
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The message log file configuration for this JMS Server.</p> '
  name: JMSMessageLogFile
  relationship: containment
  type: weblogic.management.configuration.JMSMessageLogFileMBean
- array: true
  creators:
  - weblogic.management.configuration.JMSQueueMBean
  defaultValue: {
    }
  deprecated: '9.0.0.0 Replaced with the JMS module functionality. '
  descriptionHTML: '<p>Acquire JMSQueues for this JMSServer</p> '
  name: JMSQueues
  obsolete: 9.0.0.0
  relationship: containment
  supported: false
  type: weblogic.management.configuration.JMSQueueMBean
- array: true
  creators:
  - weblogic.management.configuration.JMSSessionPoolMBean
  defaultValue: {
    }
  deprecated: '9.0.0.0 Replaced by message-driven beans. The JMSSessionPoolMBean type
    was deprecated. See JMSSessionPoolMBean for more information. '
  descriptionHTML: '<p>The session pools defined for the JMS server.</p> '
  name: JMSSessionPools
  relationship: containment
  supported: false
  type: weblogic.management.configuration.JMSSessionPoolMBean
- array: true
  creators:
  - weblogic.management.configuration.JMSTopicMBean
  defaultValue: {
    }
  deprecated: '9.0.0.0 Replaced with the JMS module functionality. '
  descriptionHTML: '<p>Define JMSTopics for this Domain</p> '
  name: JMSTopics
  obsolete: 9.0.0.0
  relationship: containment
  supported: false
  type: weblogic.management.configuration.JMSTopicMBean
- defaultValue:
    value:
      value: 2147483647
  descriptionHTML: '<p>The maximum number of bytes allowed in individual messages
    on this JMS server. The size of a message includes the message body, any user-defined
    properties, and the user-defined JMS header fields <code>JMSCorrelationID</code>
    and <code>JMSType</code>.</p>  <p>The maximum message size is only enforced for
    the initial production of a message. Messages that are redirected to an error
    destination or forwarded to a member of a distributed destination are not checked
    for size. For instance, if a destination and its corresponding error destination
    are configured with a maximum message size of 128K bytes and 64K bytes, respectively,
    a message of 96K bytes could be redirected to the error destination (even though
    it exceeds the 64K byte maximum), but a producer could not directly send the 96K
    byte message to the error destination.</p>  <p><b>Note:</b> Any change to this
    maximum affects only incoming messages; stored messages are not affected.</p> '
  name: MaximumMessageSize
  type: int
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The amount of memory (in bytes) that this JMS server can use
    to store message bodies before it writes them to disk. When the JMS server writes
    the message bodies to disk, it clears them from memory.</p>  <p>A value of -1
    (the default) specifies that the server will automatically determine a size based
    on the maximum heap size of the JVM. This default will be set to either one-third
    the maximum heap size, or 512 megabytes, whichever is smaller.</p>  <p>The larger
    the buffer, the more memory JMS will consume when many messages are waiting on
    queues or topics. Once the buffer is surpassed, JMS may write message bodies to
    the directory specified by PagingDirectory in an effort to reduce memory usage
    below this buffer.</p>  <p>Surpassing the buffer size does not stop the JMS server
    from accepting new messages. It is still possible to run out of memory if messages
    are arriving faster than they can be written to disk. Users with high messaging
    loads who wish to support the highest possible availability should consider setting
    a quota or setting a threshold and enabling flow control.</p>  <p>Paging is always
    supported.</p> '
  name: MessageBufferSize
  type: long
  writable: true
- defaultValue:
    value:
      value: GZIP_DEFAULT_COMPRESSION
  descriptionHTML: '<p>Specifies the type of message compression used when JMS message
    body compression is enabled for Persistent Stores and JMS Paging Stores.</p> <ul>
    <li>Use <code>GZIP_DEFAULT_COMPRESSION</code> to enable message compression using
    the JDK GZIP API with <code>DEFAULT_COMPRESSION</code> level.</li> <li>Use <code>GZIP_BEST_COMPRESSION</code>
    to enable message compression using the JDK GZIP API with <code>BEST_COMPRESSION</code>
    level.</li> <li>Use <code>GZIP_BEST_SPEED</code> to enable message compression
    using the JDK GZIP API with <code>BEST_SPEED</code> level.</li> <li>Use <code>LZF</code>
    to enable message compression using Open Source LZF.</li> </ul> '
  legalValues:
  - GZIP_DEFAULT_COMPRESSION
  - GZIP_BEST_COMPRESSION
  - GZIP_BEST_SPEED
  - LZF
  name: MessageCompressionOptions
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The value of the override compression options.</p> <p>The supported
    options are:</p> <p>  weblogic.jms.common.CompressionFactory=weblogic.jms.common.GZIPCompressionFactoryImpl,weblogic.jms.common.gzip.level=DEFAULT_COMPRESSION:
    this specifies using JDK GZIP API with DEFAULT_COMPRESSION level</p> <p>  weblogic.jms.common.CompressionFactory=weblogic.jms.common.GZIPCompressionFactoryImpl,weblogic.jms.common.gzip.level=BEST_COMPRESSION:
    this specifies using JDK GZIP API with BEST_COMPRESSION level</p> <p>  weblogic.jms.common.CompressionFactory=weblogic.jms.common.GZIPCompressionFactoryImpl,weblogic.jms.common.gzip.level=BEST_SPEED:
    this specifies using JDK GZIP API with BEST_SPEED level</p> <p>weblogic.jms.common.CompressionFactory=weblogic.jms.common.LZFCompressionFactoryImpl:
    this specifies using Open Source LZF</p> '
  exclude: true
  name: MessageCompressionOptionsOverride
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The maximum number of messages that can be stored in this JMS
    server. A value of <code>-1</code> removes any WebLogic Server limits.</p>  <p>Because
    excessive message volume can cause memory saturation, Oracle recommends that this
    value corresponds to the total amount of system memory available after accounting
    for the rest of your application load.</p>  <p><b>Range of Values:</b> &gt;= MessagesThresholdHigh.</p> '
  name: MessagesMaximum
  type: long
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 Replaced by defaulting the paging to always be enabled. '
  descriptionHTML: '<p>This parameter has been deprecated. Paging is always enabled.
    The "MessageBufferSize" parameter controls how much memory is used before paging
    kicks in.</p> '
  name: MessagesPagingEnabled
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The upper threshold (number of messages stored in this JMS
    server) that triggers flow control and logging events. A value of <code>-1</code>
    disables the events for this JMS server.</p>  <p>If the number of messages exceeds
    this threshold, the triggered events are:</p> <ul> <li> <code>Log Messages</code>
    - A message is logged on the server indicating a high threshold condition. </li>
    <li> <code>Flow Control</code> - If flow control is enabled, the JMS server becomes
    armed and instructs producers to begin decreasing their message flow. </li> </ul>  <p><b>Range
    of Values:</b> &lt;= MessagesMaximum; &gt;= MessagesThresholdLow.</p> '
  name: MessagesThresholdHigh
  type: long
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The lower threshold (number of messages stored in this JMS
    server) that triggers flow control and logging events. A value of <code>-1</code>
    disables the events for this JMS server.</p>  <p>If the number of messages falls
    below this threshold, the triggered events are:</p> <ul> <li> <code>Log Messages</code>
    - A message is logged on the server indicating that the threshold condition has
    cleared. </li> <li> <code>Flow Control</code> - If flow control is enabled, the
    JMS server becomes disarmed and instructs producers to begin increasing their
    message flow. </li> </ul>  <p><i>Note:</i> This attribute is dynamically configurable.</p>  <p><b>Range
    of Values:</b> &lt;= MessagesThresholdHigh</p> '
  name: MessagesThresholdLow
  type: long
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The smallest addressable block, in bytes, of a file. When a
    native <code>wlfileio</code> driver is available and the paging block size has
    not been configured by the user, the store selects the minimum OS specific value
    for unbuffered (direct) I/O, if it is within the range [512, 8192].</p> <p>A paging
    store''s block size does not change once the paging store creates its files. Changes
    to block size only take effect for new paging stores or after the current files
    have been deleted. See "Tuning the Persistent Store" in <i>Performance and Tuning
    for Oracle WebLogic Server</i>.</p> <p>If the value is changed and activated,
    you need to restart any servers to which the MBean is targeted before the value
    will take effect (even though you do not get a warning in the Console that the
    server needs to be restarted).</p> '
  name: PagingBlockSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p> Specifies where message bodies are written when the size of
    the message bodies in the JMS server exceeds the message buffer size.</p> <p>
    If unspecified, messages are written to the default <code>tmp</code> directory
    inside the <code><i>server-name</i></code> subdirectory of a domain''s root directory.
    For example, <code><i>domain-name</i>/servers/<i>server-name</i>/tmp</code>, where
    <code><i>domain-name</i></code> is the root directory of your domain. </p> <p>
    For best performance, this directory should not be the same as the directory used
    by the JMS server''s persistent store. </p>  <p>If the value is changed and activated,
    you need to restart any servers to which the MBean is targeted before the value
    will take effect (even though you do not get a warning in the Console that the
    server needs to be restarted).</p> '
  name: PagingDirectory
  nullable: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Determines whether OS file locking is used. </p> <p>When file
    locking protection is enabled, a store boot fails if another store instance already
    has opened the store files. Do not disable this setting unless you have procedures
    in place to prevent multiple store instances from opening the same file. File
    locking is not required but helps prevent corruption in the event that two same-named
    file store instances attempt to operate in the same directories. This setting
    applies to both primary and cache files.</p>  <p>If the value is changed and activated,
    you need to restart any servers to which the MBean is targeted before the value
    will take effect (even though you do not get a warning in the Console that the
    server needs to be restarted).</p> '
  name: PagingFileLockingEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The I/O buffer size, in bytes, automatically rounded down to
    the nearest power of 2.</p> <ul> <li>When a native <code>wlfileio</code> driver
    is available, the setting applies to off-heap (native) memory.</li> <li>When a
    native <code>wlfileio</code> driver is not available, the setting applies to JAVA
    heap memory.</li> <li>For the best runtime performance, Oracle recommends setting
    <code>PagingIOBufferSize</code> so that it is larger than the largest write (multiple
    concurrent store requests may be combined into a single write).</li> <li>See the
    JMS server runtime MBean attribute <code>PagingAllocatedIOBufferBytes</code> to
    find out the actual allocated off-heap (native) memory amount.</li> </ul>  <p>If
    the value is changed and activated, you need to restart any servers to which the
    MBean is targeted before the value will take effect (even though you do not get
    a warning in the Console that the server needs to be restarted).</p> '
  name: PagingIoBufferSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: 1342177280
  descriptionHTML: '<p>The paging maximum file size, in bytes.</p> <ul> <li>The <code>PagingMaxFileSize</code>
    value affects the number of files needed to accommodate a paging store of a particular
    size (number of files = paging store size/MaxFileSize rounded up).</li>  <li>A
    paging store automatically reuses space freed by deleted records and automatically
    expands individual files up to <code>PagingMaxFileSize</code> if there is not
    enough space for a new record. If there is no space left in exiting files for
    a new record, a paging store creates an additional file.</li>  <li> A small number
    of larger files is normally preferred over a large number of smaller files as
    each file allocates Window Buffer and file handles. </li>  <li> If <code>PagingMaxFileSize</code>
    is larger than 2^24 * <code>PagingBlockSize</code>, then <code>MaxFileSize</code>
    is ignored, and the value becomes 2^24 * <code>PagingBlockSize</code>. The default
    <code>PagingBlockSize</code> is 512, and 2^24 * 512 is 8 GB. </li> </ul> <p>Oracle
    recommends not setting the Paging Max File Size above the default value of 1,342,177,280.  </p>
    <p>If the value is changed and activated, you need to restart any servers to which
    the MBean is targeted before the value will take effect (even though you do not
    get a warning in the Console that the server needs to be restarted).</p> '
  name: PagingMaxFileSize
  restartNeeded: true
  type: long
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The maximum amount of data, in bytes and rounded down to the
    nearest power of 2, mapped into the JVM''s address space per paging store file.
    Applies only when a native <code>wlfileio</code> library is loaded.</p>  <p>A
    window buffer does not consume Java heap memory, but does consume off-heap (native)
    memory. If the paging store is unable to allocate the requested buffer size, it
    allocates smaller and smaller buffers until it reaches <code>PagingMinWindowBufferSize</code>,
    and then fails if it cannot honor <code>PagingMinWindowBufferSize</code>.</p>  <p>Oracle
    recommends setting the max window buffer size to more than double the size of
    the largest write (multiple concurrently updated records may be combined into
    a single write), and greater than or equal to the file size, unless there are
    other constraints. 32-bit JVMs may impose a total limit of between 2 and 4GB for
    combined Java heap plus off-heap (native) memory usage.</p>  <p>See the JMS server
    runtime MBean attribute <code>PagingAllocatedWindowBufferBytes</code> to find
    out the actual allocated Window Buffer Size.</p>  <p>If the value is changed and
    activated, you need to restart any servers to which the MBean is targeted before
    the value will take effect (even though you do not get a warning in the Console
    that the server needs to be restarted).</p> '
  name: PagingMaxWindowBufferSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Enables the JMS paging store to perform message body compression
    on persistent and non-persistent messages. When <code>false</code>, the default
    value, no compression is performed.</p> '
  name: PagingMessageCompressionEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The minimum amount of data, in bytes and rounded down to the
    nearest power of 2, mapped into the JVM''s address space per paging store file.  Applies
    only when a native <code>wlfileio</code> library is loaded. See <a href=''#getPagingMaxWindowBufferSize''>Paging
    Maximum Window Buffer Size</a>.</p>  <p>If the value is changed and activated,
    you need to restart any servers to which the MBean is targeted before the value
    will take effect (even though you do not get a warning in the Console that the
    server needs to be restarted).</p> '
  name: PagingMinWindowBufferSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: null
  deprecated: '9.0.0.0 Replaced with the PagingDirectory attribute. '
  descriptionHTML: '<p>This parameter has been deprecated. New configurations should
    use the "PagingDirectory" parameter if they wish to control where non-persistent
    messages will be temporarily stored.</p> '
  name: PagingStore
  obsolete: 9.0.0.0
  relationship: reference
  restartNeeded: true
  supported: false
  type: weblogic.management.configuration.JMSStoreMBean
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The file or database in which this JMS server stores persistent
    messages. If unspecified, the JMS server uses the default persistent store that
    is configured on each targeted WebLogic Server instance. If the JMS server has
    a store configured, then the configured store is used to store persistent messages.</p>  <p>The
    disk-based file store or JDBC-accessible database store that you specify must
    be targeted to the same server, cluster, or migratable target instance as this
    JMS server. Multiple services on the same WebLogic Server instance, including
    multiple JMS servers, may share the same persistent store. Each service''s persistent
    data will be kept apart.</p>  <p>If you specify a PersistentStore, the deprecated
    <b>Store</b> field must not be set. If neither the <b>PersistentStore</b> field
    nor the <b>Store</b> field are set, the JMS server supports persistent messaging
    using the default persistent store for the targeted WebLogic Server instance.</p>  <p>If
    the value is changed and activated, you need to restart any servers to which the
    MBean is targeted before the value will take effect (even though you do not get
    a warning in the Console that the server needs to be restarted).</p> '
  name: PersistentStore
  relationship: reference
  restartNeeded: true
  type: weblogic.management.configuration.PersistentStoreMBean
  writable: true
- defaultValue:
    value:
      value: default
  descriptionHTML: '<p>Specifies whether production is paused at server startup on
    destinations targeted to this JMS server. A destination cannot receive any new
    messages while it is paused.</p>  <p>When the value is set to <code>true</code>,
    then immediately after the host server instance is rebooted, then this JMS server
    and its targeted destinations are modified such that they are in a "production
    paused" state, which results in preventing new message production activities on
    those destinations.</p>  <p>To resume normal new message production activity,
    later you will have to change the state of this JMS server to a "production enabled"
    state by setting this value to <code>false</code>, and then either redeploy the
    JMS server or reboot the hosting server instance. </p>  <p>When the value is set
    to <code>default</code>, then the Production Paused At Startup is determined based
    on the corresponding setting on the individual destination.</p>  <p>If the value
    is changed and activated, you need to restart any servers to which the MBean is
    targeted before the value will take effect (even though you do not get a warning
    in the Console that the server needs to be restarted).</p> '
  name: ProductionPausedAtStartup
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  deprecated: '9.0.0.0 Replaced by message-driven beans. The JMSSessionPoolMBean type
    was deprecated. See JMSSessionPoolMBean for more information. '
  descriptionHTML: '<p>The session pools defined for the JMS server. This method is
    provided for backward compatibility.</p> '
  name: SessionPools
  relationship: reference
  restartNeeded: true
  supported: false
  transient: true
  type: weblogic.management.configuration.JMSSessionPoolMBean
  writable: true
- defaultValue:
    value:
      value: null
  deprecated: '9.0.0.0 Replaced with the PersistentStore attribute. '
  descriptionHTML: '<p>The persistent disk-based file or JDBC-accessible database
    for the JMS server.</p>  <p>A persistent store may only be used by one JMS server.
    If this value is unset, the value set by the "PersistentStore" attribute is used.
    If neither attribute is set, the default persistent store for the targeted managed
    server is used. It is an error to set both attributes.</p>  <p>This attribute
    has been deprecated. New configurations should use the "PersistentStore" attribute,
    which allows multiple subsystems, including multiple JMS servers on the same managed
    server, to share the same persistent store.</p> '
  name: Store
  obsolete: 9.0.0.0
  relationship: reference
  restartNeeded: true
  supported: false
  type: weblogic.management.configuration.JMSStoreMBean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p> Specifies whether message persistence is supported for this
    JMS server.</p> <ul> <li>When set to <code>true</code>: If the JMS server has
    no store configured, the targeted WebLogic Server instance''s default store is
    used to store persistent messages. If the JMS server has a store configured, then
    the configured store is used to store persistent messages. </li> <li> When set
    to <code>false</code>, then this JMS server does not support persistent messages,
    and instead downgrades them to non-persistent.</li> <li> The default value is
    <code>true</code>.</li> </ul>  <p>Oracle recommends not setting this parameter
    to <code>false</code>. It is available to provide compatibility with older releases.</p>  <p>If
    the value is changed and activated, you need to restart any servers to which the
    MBean is targeted before the value will take effect (even though you do not get
    a warning in the Console that the server needs to be restarted).</p> '
  name: StoreEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Enables the JMS store to perform message body compression.
    When set to <code>false</code>, the default value, no compression is performed.</p> '
  name: StoreMessageCompressionEnabled
  type: boolean
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The server instances, clusters, or a migratable targets defined
    in the current domain that are candidates for hosting the JMSSerer.</p>  <p>In
    a clustered environment, a recommended best practice is to use a cluster as a
    target or target a JMSServer to the same migratable target as the Persistent Store
    that it uses, so that a member server will not be a single point of failure. A
    JMSServer can also be configured to automatically migrate from an unhealthy server
    instance to a healthy server instance with the help of the automatic service migration
    feature.</p> '
  name: Targets
  relationship: reference
  type: weblogic.management.configuration.TargetMBean
  writable: true
- defaultValue:
    value:
      value: null
  deprecated: '9.0.0.0 Replaced with the TemporaryTemplateName and TemporaryTemplateResource
    attributes. '
  descriptionHTML: '<p>The name of an existing JMS template to use when creating all
    temporary queues and topics for this JMS server. Specifying a value for this field
    allows JMS applications to create temporary destinations. If Store values are
    provided as part of a temporary template, they are ignored, because temporary
    destinations do not support persistent messaging.</p>  <p><i>Note:</i> If this
    attribute is set to none, attempts to create a temporary destination (queue or
    topic) will fail.</p> '
  name: TemporaryTemplate
  obsolete: 9.0.0.0
  relationship: reference
  restartNeeded: true
  supported: false
  type: weblogic.management.configuration.JMSTemplateMBean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The name of a configured JMS template that this JMS server
    uses to create temporary destinations.</p>  <p>Entering a template name, requires
    you to specify the JMS module that contains this template. However, a template
    name cannot be specified if the <b>Hosting Temporary Destinations</b> field is
    disabled.</p>  <p><b>Note:</b> If the specified JMS template provides persistent
    store values, they are ignored because temporary destinations do not support persistent
    messaging.</p> '
  name: TemporaryTemplateName
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The name of a JMS module that contains a template that this
    JMS server can use to create temporary destinations.</p>  <p>Entering a JMS module
    name requires you to specify a temporary template name. However, a module name
    cannot be specified if the <b>Hosting Temporary Destinations</b> field is disabled.</p> '
  name: TemporaryTemplateResource
  type: java.lang.String
  writable: true
roles:
  allowed:
  - Deployer
