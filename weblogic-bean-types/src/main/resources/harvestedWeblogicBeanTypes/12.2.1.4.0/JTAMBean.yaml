# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.configuration.ConfigurationMBean
descriptionHTML: '<p>This interface provides access to the JTA configuration attributes.  The
  methods defined herein are applicable for JTA configuration at the domain level.</p> '
name: weblogic.management.configuration.JTAMBean
properties:
- defaultValue:
    value:
      value: 86400
  descriptionHTML: '<p>Specifies the maximum amount of time, in seconds, a transaction
    manager persists in attempting to complete the second phase of a two-phase commit
    transaction. </p>  <p>During the second phase of a two-phase commit transaction,
    the transaction manager continues to try to complete the transaction until all
    resource managers indicate that the transaction is completed. After the abandon
    transaction timer expires, no further attempt is made to resolve the transaction.
    If the transaction is in a prepared state before being abandoned, the transaction
    manager rolls back the transaction to release any locks held on behalf of the
    abandoned transaction.</p> '
  name: AbandonTimeoutSeconds
  type: int
  writable: true
- defaultValue:
    value:
      value: 10
  descriptionHTML: '<p>The maximum number of cycles that the transaction manager performs
    the <code>beforeCompletion</code> synchronization callback for this WebLogic Server
    domain.</p>  <p>Nothing prevents a Synchronization object from registering another
    during <code>beforeCompletion</code>, even those whose <code>beforeCompletions</code>
    have already been called. For example, an EJB can call another in its <code>ejbStore()</code>
    method. To accommodate this, the transaction manager calls all Synchronization
    objects, then repeats the cycle if new ones have been registered. This count sets
    a limit to the number of cycles that synchronization occurs.</p> '
  name: BeforeCompletionIterationLimit
  type: int
  writable: true
- defaultValue:
    value:
      value: 300
  descriptionHTML: '<p>The interval at which the transaction manager creates a new
    transaction log file and checks all old transaction log files to see if they are
    ready to be deleted.</p> '
  name: CheckpointIntervalSeconds
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates that cluster-wide recovery is used for distributed
    transactions.</p>  <p>When enabled, recovery operations for a distributed transaction
    are applied to all the servers of the cluster hosting a InterposedTransactionManager
    rather than just the server hosting the InterposedTransactionManager.</p> '
  name: ClusterwideRecoveryEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>Specifies the maximum amount of time, in seconds, a transaction
    manager waits for all resource managers to respond and indicate if the transaction
    can be committed or rolled back.</p>  <ul><li> The default value is 0, which sets
    the value to approximately twice the default <code>transaction-timeout</code>
    value with a maximum value of 120 seconds. This value provides backward compatibility
    for prior releases without this setting.</li> <li>If the specified value is -1,
    the maximum value supported by this attribute is used. </li> <li>If the specified
    value exceeds the value set for <code>abandon-timeout-seconds</code>, the value
    of <code>abandon-timeout-seconds</code> is used. </li> </ul> '
  name: CompletionTimeoutSeconds
  type: int
  writable: true
- defaultValue:
    value:
      value: 60
  deprecated: '12.2.1.1.0 Replaced with getSiteDomainRecoveryRetryInterval. '
  descriptionHTML: '<p>The interval at which a store lock for a given server in a
    recovery domain will be checked for takeover eligibility.</p> '
  name: CrossDomainRecoveryRetryInterval
  type: int
  writable: true
- defaultValue:
    value:
      value: 30
  deprecated: '12.2.1.4.0 '
  descriptionHTML: '<p>The time in seconds after which a lease expires making it eligible
    for recovery by another site.</p> '
  name: CrossSiteRecoveryLeaseExpiration
  type: int
  writable: true
- defaultValue:
    value:
      value: 10
  deprecated: '12.2.1.4.0 '
  descriptionHTML: '<p>The time in seconds in which to update a lease timestamp.</p> '
  name: CrossSiteRecoveryLeaseUpdate
  type: int
  writable: true
- defaultValue:
    value:
      value: 60
  deprecated: '12.2.1.4.0 '
  descriptionHTML: '<p>The interval at which a lease for a given server in a recovery
    domain will be checked for takeover eligibility.</p> '
  name: CrossSiteRecoveryRetryInterval
  type: int
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>Returns a list of one or more transaction resources (determiners).
    A determiner''s in-doubt transaction records are used during transaction recovery
    when a TLog is not present.</p> '
  name: DeterminerCandidateResourceInfoList
  transient: true
  type: weblogic.management.configuration.DeterminerCandidateResourceInfoVBean
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>Select a transaction resource (determiner) from the list of
    resources. For JMS, select WebLogic JMS as the determiner. When a determiner is
    configured, the determiner''s in-doubt transaction records are used during transaction
    recovery.</p> '
  name: Determiners
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Specifies whether the transaction manager automatically performs
    an XA Resource <code>forget</code> operation for heuristic transaction completions.</p>  <p>When
    enabled, the transaction manager automatically performs an XA Resource <code>forget()</code>
    operation for all resources as soon as the transaction learns of a heuristic outcome.
    Disable this feature only if you know what to do with the resource when it reports
    a heuristic decision.</p> '
  name: ForgetHeuristics
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 50
  descriptionHTML: '<p>Maximum number of concurrent requests to resources allowed
    for each server.</p> '
  name: MaxResourceRequestsOnServer
  type: int
  writable: true
- defaultValue:
    value:
      value: 1800000
  descriptionHTML: '<p>Maximum duration time, in milliseconds, that a resource is
    declared dead. After the duration, the resource is declared available again, even
    if the resource provider does not explicitly re-register the resource.</p> '
  name: MaxResourceUnavailableMillis
  type: long
  writable: true
- defaultValue:
    value:
      value: 300
  descriptionHTML: '<p>The maximum amount of time, in seconds, WebLogic Server waits
    for the determiner to recover from a failure. If the determiner does not recover
    after this period, WebLogic Server sets the TLog health state to HEALTH_FAILED.</p> '
  name: MaxRetrySecondsBeforeDeterminerFail
  type: int
  writable: true
- defaultValue:
    value:
      value: 10000
  descriptionHTML: '<p>The maximum number of simultaneous in-progress transactions
    allowed on a server in this WebLogic Server domain.</p> '
  name: MaxTransactions
  type: int
  writable: true
- defaultValue:
    value:
      value: 60000
  descriptionHTML: '<p>The interval for which the transaction map must be full for
    the JTA subsystem to declare its health as CRITICAL.</p> '
  exclude: true
  name: MaxTransactionsHealthIntervalMillis
  supported: false
  type: long
  writable: true
- defaultValue:
    value:
      value: 1000
  descriptionHTML: '<p>The maximum number of unique transaction names for which statistics
    are maintained.</p>  <p>The first 1001 unique transaction names are maintained
    as their own transaction name and stored in each statistic. After the 1001st transaction
    name is reached, the transaction name is stored as <code>weblogic.transaction.statistics.namedOverflow</code>,
    and the transaction statistic is also merged and maintained in <code>weblogic.transaction.statistics.namedOverflow</code>.</p>  <p>A
    transaction name typically represents a category of business transactions, such
    as "funds-transfer."</p> '
  name: MaxUniqueNameStatistics
  type: int
  writable: true
- defaultValue:
    value:
      value: 120000
  descriptionHTML: '<p>Maximum allowed time duration, in milliseconds,  for XA calls
    to resources. If a particular XA call to a resource exceeds the limit, the resource
    is declared unavailable.</p> '
  name: MaxXACallMillis
  type: long
  writable: true
- defaultValue:
    value:
      value: 60
  descriptionHTML: '<p>The time interval, in seconds,  that the checkpoint is done
    for the migrated transaction logs (TLOGs).</p> '
  exclude: true
  name: MigrationCheckpointIntervalSeconds
  supported: false
  type: int
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The dispatch policy to use when performing XA operations in
    parallel. By default the policy of the thread coordinating the transaction is
    used. Note that the named execute queue must be configured on the target server.</p> '
  exclude: true
  name: ParallelXADispatchPolicy
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Indicates that XA calls are executed in parallel if there are
    available threads.</p> '
  name: ParallelXAEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 86400
  descriptionHTML: '<p>The interval that a particular resource must be accessed within
    for it to be included in the checkpoint record.</p> '
  exclude: true
  name: PurgeResourceFromCheckpointIntervalSeconds
  supported: false
  type: int
  writable: true
- defaultValue: {
    }
  deprecated: '12.2.1.4.0 '
  descriptionHTML: '<p>The name of the site whose transactions this site/domain will
    recover in the event that intra-cluster transaction service migration is not successful
    or efficient.</p> '
  name: RecoverySiteName
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 300000
  deprecated: '7.0.0.0 Replaced with nothing. '
  descriptionHTML: '<p>The interval that recovery is attempted until the resource
    becomes available.</p> '
  exclude: true
  name: RecoveryThresholdMillis
  supported: false
  type: long
  writable: true
- defaultValue:
    value:
      value: default
  descriptionHTML: '<p>Specifies the security mode of the communication channel used
    for XA calls between servers that participate in a global transaction. All server
    instances in a domain must have the same security mode setting.</p>  <p>Security
    Interoperability Mode options:</p> <ul> <li><b>default</b>  The transaction coordinator
    makes calls using the kernel identity over an admin channel if it is enabled,
    and <code>anonymous</code> otherwise. Man-in-the-middle attacks are possible if
    the admin channel is not enabled.</li>  <li><b>performance</b>  The transaction
    coordinator makes calls using <code>anonymous</code> at all times. This implies
    a security risk since a malicious third party could then try to affect the outcome
    of transactions using a man-in-the-middle attack.</li>  <li><b>compatibility</b>  The
    transaction coordinator makes calls as the kernel identity over an insecure channel.
    This is a high security risk because a successful man-in-the-middle attack would
    allow the attacker to gain administrative control over both domains. This setting
    should only be used when strong network security is in place. </li> </ul> '
  legalValues:
  - default
  - performance
  - compatibility
  name: SecurityInteropMode
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 30000
  descriptionHTML: '<p>The time interval, in milliseconds, at which internal objects
    used to serialize resource enlistment are cleaned up.</p> '
  name: SerializeEnlistmentsGCIntervalMillis
  type: long
  writable: true
- defaultValue:
    value:
      value: 180
  descriptionHTML: '<p>Indicates how long the server should wait for active transactions
    to complete before allowing shutdown.</p> '
  name: ShutdownGracePeriod
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates two-phase transaction recovery logs are written even
    if one or more determiners are configured.</p> '
  name: TLOGWriteWhenDeterminerExistsEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates tight coupling of transaction branches that span
    different transaction manager systems.</p>  <p>When enabled, WebLogic uses the
    transaction identifier of a transaction imported by the InterposedTransactionManager
    for XA calls rather than an internally mapped Xid. This applies to inter-domain
    WebLogic transactions and transactions imported from Tuxedo. This allows for tight
    coupling of transaction branches for transactions that span across different transaction
    manager systems.</p>  <p>If a transaction between WebLogic and Tuxedo resources
    uses a GridLink Data Source with GridLink Affinity enabled, the XA Affinity context
    is automatically used for the transaction.</p> '
  name: TightlyCoupledTransactionsEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 30
  descriptionHTML: '<p>Specifies the maximum amount of time, in seconds, an active
    transaction is allowed to be in the first phase of a two-phase commit transaction.
    If the specified amount of time expires, the transaction is automatically rolled
    back.</p> '
  name: TimeoutSeconds
  type: int
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Indicates that the two-phase commit protocol is used to coordinate
    transactions across two or more resource managers.</p> <p> If not selected:</p>
    <ul> <li> Two-phase commit is disabled and any attempt to use two-phase commit
    results in a RollbackException being thrown.</li> <li> All transaction logging
    is disabled, including checkpoint records.</li> </ul> '
  name: TwoPhaseEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 30
  descriptionHTML: '<p>The amount of time, in seconds, a  transaction manager waits
    for transactions involving the resource to complete before unregistering a resource.
    This grace period helps minimize the risk of abandoned transactions because of
    an unregistered resource, such as a JDBC data source module packaged with an application.</p>  <p>During
    the specified grace period, the <code>unregisterResource</code> call blocks until
    the call returns and no new transactions are started for the associated resource.
    If the number of outstanding transactions for the resource goes to <code>0</code>,
    the <code>unregisterResource</code> call returns immediately.</p>  <p>At the end
    of the grace period, if outstanding transactions are associated with the resource,
    the <code>unregisterResource</code> call returns and a log message is written
    to the server on which the resource was previously registered. </p> '
  name: UnregisterResourceGracePeriod
  type: int
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>Returns the domains for which non-secure protocols should be
    used for internal JTA communication if the servers in the domains are configured
    to use network channels.</p> '
  name: UseNonSecureAddressesForDomains
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>Returns the remote domains for which public addresses should
    be used if the servers in the domains are configured to use network channels for
    internal JTA communication.</p> '
  name: UsePublicAddressesForRemoteDomains
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether to use <code>issuedtoken</code> to enable
    authentication between the WS-AT coordinator and participant.</p> '
  name: WSATIssuedTokenEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: SSLNotRequired
  descriptionHTML: '<p> Specifies transport security mode required by WebService Transaction
    endpoints.</p> <p>Transport Security options:</p> <ul> <li><b>SSLNotRequired</b>
    All WebService Transaction protocol messages are exchanged over the HTTP channel.</li>  <li><b>SSLRequired</b>
    All WebService Transaction protocol messages are and can only be exchanged over
    the HTTPS.</li>  <li><b>ClientCertRequired</b> All WebService Transaction protocol
    messages are and can only be exchanged over the HTTPS, and WLS enforces the presence
    of client certificate </li> </ul> '
  legalValues:
  - SSLNotRequired
  - SSLRequired
  - ClientCertRequired
  name: WSATTransportSecurityMode
  type: java.lang.String
  writable: true
