# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.j2ee.descriptor.wl.NamedEntityBean
derivedTypes: [
  ]
descriptionHTML: 'Template beans contain default values for destination attributes.
  If a destination defines a template and does not explicitly set the value of an
  attribute, then that attribute will take its value from the defined template. '
name: weblogic.j2ee.descriptor.wl.TemplateBean
properties:
- defaultValue:
    value:
      value: supports
  descriptionHTML: '<p>Specifies whether messages landing on destinations that use
    this template should attach the credential of the sending user.</p>  <ul> <li><b>Supports</b>
    The JMSXUserID property is set with the security principal of the sending user
    if requested. The sender can request its identity to be attached to its messages
    by using a ConnectionFactory with <code>AttachJMSXUserID="true"</code>.</li>  <li><b>Never</b>
    The JMSXUserID property is never be set with the security principal of the sending
    user.</li>  <li><b>Always</b> The JMSXUserID property is always set with the security
    principal of the sending user.</li> </ul>  <p>This property is dynamically configurable.
    A dynamic change will only affect messages received after the update has been
    made.</p> '
  legalValues:
  - supports
  - never
  - always
  name: AttachSender
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether message consumption is paused on destinations
    that use this template at server startup.</p>  <ul> <li><b>false</b> Paused message
    consumption at server startup is disabled on this template.</li>  <li><b>true</b>
    Paused message consumption at server startup is enabled on this template.</li>
    </ul> '
  name: ConsumptionPausedAtStartup
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether WebLogic Server creates a system-generated
    unit-of-order name based on the domain, JMS server, and destination name. Any
    message arriving at this destination that does not already belong to a unit-of-order
    is assigned this default name.</p>  <p>This field is recommended for advanced
    use. Generally, it is  recommended to set a message unit-of-order using application
    calls or connection factory configuration. When relying on a destination default
    unit order to enforce ordering with adistributed destination, the application
    must be aware that unit-of-order routing doesn''t apply. Instead the application
    must specifically ensure that any particular set of messages that must be processed
    in order are all sent to the same specific member destination even in the event
    of process failures or service migration. </p> '
  name: DefaultUnitOfOrder
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The parameters that control what should happen to messages
    when failures occur.</p>  <p>These parameters enable the Administrator to control
    error destinations, logging, and other actions that might be taken when a message
    cannot be delivered or when other failures are detected.</p> '
  name: DeliveryFailureParams
  relationship: containment
  type: weblogic.j2ee.descriptor.wl.DeliveryFailureParamsBean
- defaultValue: {
    }
  descriptionHTML: '<p>Delivery parameter settings that override delivery parameters
    set by the JMS client.</p>  <p>These overrides, if set, will cause those specific
    parameters set in the JMS client to be ignored and replaced by the value set here.</p> '
  name: DeliveryParamsOverrides
  relationship: containment
  type: weblogic.j2ee.descriptor.wl.DeliveryParamsOverridesBean
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The list of potential destination keys for sorting messages
    that arrive on destinations that use this JMS template.</p>  <p>The keys are ordered
    from most significant to least significant. If more than one key is specified,
    a key based on the JMSMessageID can only be the last key in the list.</p>  <p><b>Note:</b>
    If JMSMessageID is not defined in the key, it is implicitly assumed to be the
    last key and is set as "Ascending" (FIFO) for the sort order.</p> '
  name: DestinationKeys
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  creators:
  - weblogic.j2ee.descriptor.wl.GroupParamsBean
  defaultValue: {
    }
  descriptionHTML: '<p>The group parameters for this template. When using templates,
    group parameters enable you to customize parameters based on the group to which
    the destination belongs.</p>  <p>Templates are a convenient way to associate common
    parameters amongst a large number of destinations. However, some attributes of
    particular destinations may need to be configured based on where the destination
    is targeted. For example, the error destination of a destination and the destination
    itself must be targeted to the same JMS server.</p>  <p>Group parameters allow
    the template user to customize parameters based on the group the destination is
    a member of. The value that will be used for a destination will come from the
    group parameter if the subdeployment attribute has the same name as the subdeployment
    the destination is a member of.</p>  <p>For example, imagine two queues Q1 and
    Q2 in subdeployments G1 and G2 respectively. Both Q1 and Q2 specify template X1
    as their template. X1 has group parameters with sub-deployment attributes G1 and
    G2, where the error destination value for G1 is E1 and the quota value for G2
    is E2. Neither Q1 nor Q2 specify their error-destination variable explicitly,
    so they will get their error destinations from the template. Since Q1 is a member
    of G1, and the template value of G1 is E1, Q1 will get the error destination E1.
    Likewise, Q2''s error destination will eventually resolve to error destination
    E2. If a third destination Q3 is added in with sub-deployment G3 and the template
    does not have a group parameter for G3 then Q3 will get the default value for
    its error destination.</p> '
  name: GroupParams
  relationship: containment
  type: weblogic.j2ee.descriptor.wl.GroupParamsBean
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>Specifies the maximum amount of time, in milliseconds, before
    undelivered messages in an incomplete UOW are expired. Such messages will then
    follow the template''s expiration policy defined for undeliverable messages.</p>  <p><b>Note:</b>
    A template''s error destination for UOW messages cannot be configured to use the
    <b>Single Message Delivery</b> value.</p> '
  name: IncompleteWorkExpirationTime
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether new message insertion is paused on destinations
    that use this template at server startup.</p>  <ul> <li><b>false</b> Paused message
    insertion at server startup is disabled on this template.</li>  <li><b>true</b>
    Paused message insertion at server startup is enabled on this template.</li> </ul> '
  name: InsertionPausedAtStartup
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 2147483647
  descriptionHTML: '<p>The maximum size of a message that will be accepted from producers
    on this destination. The message size includes the message body, any user-defined
    properties, and the user-defined JMS header fields: <code>JMSCorrelationID</code>
    and <code>JMSType</code>.</p>  <p>Producers sending messages that exceed the configured
    maximum message size for the destination receive a <code>ResourceAllocationException</code>
    .</p>  <p>The maximum message size is only enforced for the initial production
    of a message. Messages that are redirected to an error destination or forwarded
    to a member of a distributed destination are not checked for size. For instance,
    if a destination and its corresponding error destination are configured with a
    maximum message size of 128K bytes and 64K bytes, respectively, a message of 96K
    bytes could be redirected to the error destination (even though it exceeds the
    64K byte maximum), but a producer could not directly send the 96K byte message
    to the error destination.</p>  <p>Maximum Message Size is dynamically configurable,
    but only incoming messages are affected; stored messages are not affected.</p> '
  name: MaximumMessageSize
  type: int
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Message logging parameters control message logging actions
    when a message life cycle change is detected.</p> '
  name: MessageLoggingParams
  relationship: containment
  type: weblogic.j2ee.descriptor.wl.MessageLoggingParamsBean
- defaultValue:
    value:
      value: 25
  descriptionHTML: '<p>Controls how long destinations that use this template are willing
    to wait to create full batches of available messages (if at all) for delivery
    to consumers. At the minimum value, batching is disabled; at the default value,
    less-than-full batches will not wait and are delivered immediately with currently
    available messages; tuning higher than the default value controls the maximum
    wait time for additional messages before less-than-full batches are delivered
    to consumers.</p>  <p>The maximum message count of a full batch is controlled
    by the JMS connection factory''s MessagesMaximum setting.</p> '
  name: MessagingPerformancePreference
  type: int
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The parameters for receiving messages using multicast rather
    than a connection-oriented protocol such as TCP.</p>  <p>Topics with certain quality
    of service tolerance can receive a significant performance boost by using multicast
    to receive messages rather than using a connection oriented protocol like TCP.</p> '
  name: Multicast
  relationship: containment
  type: weblogic.j2ee.descriptor.wl.MulticastParamsBean
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether new message production on destinations that
    use this template is paused on at server startup.</p>  <ul> <li><b>false</b> Paused
    message production at server startup is disabled on this template.</li>  <li><b>true</b>
    Paused message production at server startup is enabled on this template.</li>
    </ul> '
  name: ProductionPausedAtStartup
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>A Quota controls the allotment of system resources available
    to destinations. For example the number of bytes a destination is allowed to store
    can be configured with a QuotaBean.</p> '
  name: Quota
  relationship: reference
  type: weblogic.j2ee.descriptor.wl.QuotaBean
  writable: true
- defaultValue:
    value:
      value: All
  descriptionHTML: '<p>Specifies whether a user can send messages to destinations
    that use this template using Store-and-Forward.</p>  <ul> <li><b>All</b> All users
    can send messages to destinations using Store-and-Forward.</li>  <li><b>None</b>
    Remote users cannot send messages to destinations using Store-and-Forward. </li>
    </ul>  <p>This property is dynamically configurable. A dynamic change will only
    affect messages sent after the update has been made.</p> '
  legalValues:
  - All
  - None
  name: SafExportPolicy
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>A threshold is a point that must be exceeded in order to produce
    a given effect. These action points may cause logging, flow control, or other
    actions, as defined by the specific points whose values have been exceeded.</p> '
  name: Thresholds
  relationship: containment
  type: weblogic.j2ee.descriptor.wl.ThresholdParamsBean
- defaultValue: {
    }
  descriptionHTML: '<p>Gets the subscription parameters for this topic.</p>  <p><code>TopicSubscriptionParamsBean</code>
    specifies topic subscription parameters.</p> '
  name: TopicSubscriptionParams
  relationship: containment
  type: weblogic.j2ee.descriptor.wl.TopicSubscriptionParamsBean
- defaultValue:
    value:
      value: PassThrough
  descriptionHTML: '<p>Specifies whether the Unit-of-Work (UOW) feature is enabled
    for destinations that use this template. A UOW is a set of messages that are processed
    as a single unit.</p> <ul> <li> <b>Pass-Through</b> By default, destinations that
    use this template do not treat messages as part of a UOW.</li> <li> <b>Single
    Message Delivery</b> This value should only be selected if UOW consumers are receiving
    messages on destinations that use this template. When selected, UOW messages are
    formed into a list and are consumed as an <code>ObjectMessage</code> containing
    the list.</li> </ul> '
  legalValues:
  - PassThrough
  - SingleMessageDelivery
  name: UnitOfWorkHandlingPolicy
  type: java.lang.String
  writable: true
roles:
  allowed:
  - Deployer
