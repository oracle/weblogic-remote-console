# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.management.configuration.ConfigurationMBean
derivedTypes: [
  ]
descriptionHTML: 'For each configuration entity that supports per-partition-override
  via a MBean, we have two MBeans, the original configure MBean and the corresponding
  override MBean, that eventually determine the effective settings of the configured
  resource.  We mark an attribute of an override MBean "dynamic true" even though
  the original configure MBean masks it "dynamic false". This is to make sure that
  the overriding settings take effect on partition restart. Otherwise a server restart
  is required.  <p>Defines partition-specific overrides for the most commonly overridden
  attributes in a ForeignServer MBean. It overrides some of the settings in a same-named
  ForeignServer MBean instance in the same multi-tenant scope to which this override
  MBean belongs. </p> '
name: weblogic.management.configuration.ForeignServerOverrideMBean
properties:
- defaultValue:
    value:
      value: No-Override
  descriptionHTML: '<p>The URL that WebLogic Server will use to contact the JNDI provider.
    The syntax of this URL depends on which JNDI provider is being used. For WebLogic
    JMS, leave this field blank if you are referencing WebLogic JMS objects within
    the same cluster.</p>  <p>This value corresponds to the standard JNDI property,
    <code>java.naming.provider.url</code>.</p>  <p><i>Note:</i> If this value is not
    specified, look-ups will be performed on the JNDI server within the WebLogic Server
    instance where this connection factory is deployed.</p> '
  name: ConnectionURL
  nullable: true
  type: java.lang.String
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.ForeignConnectionFactoryOverrideMBean
  defaultValue: {
    }
  descriptionHTML: 'All the foreign connection factories associated with this foreign
    server. '
  name: ForeignConnectionFactories
  relationship: containment
  type: weblogic.management.configuration.ForeignConnectionFactoryOverrideMBean
- array: true
  creators:
  - weblogic.management.configuration.ForeignDestinationOverrideMBean
  defaultValue: {
    }
  descriptionHTML: 'All the foreign destinations associated with this foreign server. '
  name: ForeignDestinations
  relationship: containment
  type: weblogic.management.configuration.ForeignDestinationOverrideMBean
- defaultValue:
    value:
      value: No-Override
  descriptionHTML: '<p>The name of the class that must be instantiated to access the
    JNDI provider. This class name depends on the JNDI provider and the vendor that
    are being used.</p>  <p>This value corresponds to the standard JNDI property,
    <code>java.naming.factory.initial</code>.</p>  <p><i>Note:</i> This value defaults
    to <code>weblogic.jndi.WLInitialContextFactory</code>, which is the correct value
    for WebLogic Server.</p> '
  name: InitialContextFactory
  type: java.lang.String
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.PartitionPropertyMBean
  defaultValue: {
    }
  descriptionHTML: '<p>Any additional properties that must be set for the JNDI provider.
    These properties will be passed directly to the constructor for the JNDI provider''s
    InitialContext class.</p>  <p>Some foreign providers require other properties
    to be set while obtaining an initial naming context. These properties can be set
    with a property bean. </p> '
  excludeFromRest: ' '
  name: JNDIProperties
  relationship: containment
  supported: false
  type: weblogic.management.configuration.PartitionPropertyMBean
- defaultValue:
    value:
      value: No-Override
  descriptionHTML: '<p>Any credentials that must be set for the JNDI provider. These
    credentials will be part of the properties passed directly to the constructor
    for the JNDI provider''s InitialContext class.</p>  <p>Some foreign providers
    require other properties to be set while obtaining an initial naming context.
    These properties can be set with a property bean. </p> '
  encrypted: true
  name: JNDIPropertiesCredential
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p> This should not be called by anyone.  It''s required when
    using the encrypted tag. '
  encrypted: true
  name: JNDIPropertiesCredentialEncrypted
  type: byte
  writable: true
roles:
  allowed:
  - Deployer
