# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.management.configuration.ConfigurationMBean
derivedTypes:
- weblogic.management.configuration.SNMPAgentDeploymentMBean
descriptionHTML: '<p>This singleton MBean represents an SNMP agent that is scoped
  to a WebLogic Server domain.</p> <p>This MBean is provided to support domains that
  were created with WebLogic Server release 9.2 and earlier. For new domains, create
  an instance of SNMPAgentDeploymentMBean and target it to the domain''s Administration
  Server.</p> '
name: weblogic.management.configuration.SNMPAgentMBean
properties:
- defaultValue:
    value:
      value: MD5
  descriptionHTML: '<p>The protocol that this SNMP agent uses to ensure that only
    authorized users can request or receive information about your WebLogic Server
    domain. Applicable only with SNMPv3.</p> <p>The protocol also ensures message
    integrity and prevents masquerading and reordered, delayed, or replayed messages.</p>
    <p>To use this protocol when receiving requests from SNMP managers, you must configure
    credential mapping in the WebLogic Server security realm. To use this protocol
    when sending responses or notifications, you must configure the security level
    of your trap destinations.</p> <p>If you do not choose an authentication protocol,
    then the SNMP agent does not authenticate incoming SNMPv3 requests; anyone can
    use SNMPv3 to retrieve information about your WebLogic Server domain.</p> '
  legalValues:
  - noAuth
  - MD5
  - SHA
  name: AuthenticationProtocol
  nullable: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '12.2.1.4 There is no replacement for this attribute as SNMPv1 and v2
    support will be removed. '
  descriptionHTML: '<p>Specifies whether this SNMP agent supports SNMPv1 and v2.</p>
    <p>SNMPv1 and v2 use community strings for authentication. If you disable community
    strings for this SNMP agent, the agent will process only SNMPv3 requests. If an
    SNMP manager sends a v1 or v2 message, the agent discards the message and returns
    an error code to the manager.</p> '
  name: CommunityBasedAccessEnabled
  supported: false
  type: boolean
  writable: true
- defaultValue: {
    }
  deprecated: '12.2.1.4 There is no replacement for this attribute as SNMPv1 and v2
    support will be removed. '
  descriptionHTML: '<p>The password (community name) that you want this SNMP agent
    to use to secure SNMPv1 or v2 communication with SNMP managers. Requires you to
    enable community based access for this agent.</p>  <p>SNMPv3 does not use community
    names. Instead, it encrypts user names and passwords in its PDUs. </p>  <p>When
    you use SNMPv1 or v2, there are two community names that are needed when the WebLogic
    SNMP agent and SNMP managers interact:</p>  <ul> <li> <p>The name that you specify
    in this community prefix. All SNMP managers must send this name when connecting
    to this SNMP agent.</p> </li>  <li> <p>The community name that the SNMP manager
    defines. The SNMP agent must send this name when connecting to the manager. (You
    supply this community name when you configure a trap destination.)</p> </li> </ul>  <p>In
    addition to using the community prefix as a password, an SNMP agent on an Administration
    Server uses the prefix to qualify requests from SNMP managers. Because the Administration
    Server can access data for all WebLogic Server instances in a domain, a request
    that specifies only an attribute name is potentially ambiguous. For example, the
    attribute <code>serverUptime</code> exists for each WebLogic Server instance in
    a domain. To clarify requests that you send to SNMP agents on Administration Servers,
    use the community prefix as follows:</p>  <ul> <li> <p>To request the value of
    an attribute on a specific Managed Server, when you send a request from an SNMP
    manager, append the name of the server instance to the community prefix: <code><i>community_prefix@server_name</i></code>.</p>
    </li>  <li> <p>To request the value of an attribute for all server instances in
    a domain, send a community name with the following form: <code><i>community_prefix</i></code></p>
    </li> </ul>  <p>To secure access to the values of the WebLogic attributes when
    using the SNMPv1 or v2 protocols, it is recommended that you set community prefix
    to a value other than <code>public</code> or <code>private</code>.</p>  <p>You
    cannot specify a null (empty) value for the community prefix when SNMP agent is
    enabled. If you do not want this agent to receive SNMPv1 or v2 requests, disable
    community based access.</p> '
  name: CommunityPrefix
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 0
  deprecated: '10.0.0.0 Use the ServerDebugMBean.DebugSNMPToolkit attribute to configure
    the SNMP Toolkit debug '
  descriptionHTML: '<p>The minimum severity of debug messages that this SNMP agent
    generates.</p>  <p>The SNMP agent writes all debug messages to standard out; they
    are not written to the WebLogic Server log files. Debug messages provide a detailed
    description of the SNMP agent''s actions. For example, the agent outputs a noncritical
    message each time it generates a notification.</p>  <p>Valid values are:</p>  <ul>
    <li><code>0</code>  <p>No debug messages.</p> </li>  <li><code>1</code>  <p>Fatal
    messages only.</p> </li>  <li><code>2</code>  <p>Critical and fatal messages.</p>
    </li>  <li><code>3</code>  <p>Non-critical, critical, and, fatal messages.</p>
    </li> </ul> '
  legalValues:
  - 0
  - 1
  - 2
  - 3
  name: DebugLevel
  supported: false
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether this SNMP agent is enabled.</p> '
  name: Enabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Configures this SNMP agent to send notifications as an INFORM
    instead of a TRAP. Requires you to specify the agent''s SNMPTrapVersion as SNMPv2
    or SNMPv3.</p> <p>When an agent sends an INFORM notification, it waits for a confirmation
    response from the SNMP manager. If it does not receive a response, it resends
    the INFORM notification.</p> '
  name: InformEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 10000
  descriptionHTML: '<p>The number of milliseconds that this SNMP agent will wait for
    a response to an INFORM notification.</p> <p>If the agent does not receive a response
    within the specified interval, it will resend the notification.</p> '
  name: InformRetryInterval
  type: int
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The listen address on which you want this SNMP agent to listen
    for incoming requests from SNMP managers that use the UDP protocol.</p>  <p>If
    not specified the Server''s ListenAddress is used as the ListenAddress for the
    SNMPAgent.</p> '
  name: ListenAddress
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 3600000
  descriptionHTML: '<p>The number of milliseconds after which WebLogic Server invalidates
    its cache of SNMP security keys. Setting a high value creates a risk that users
    whose credentials have been removed can still access SNMP data.</p> <p>An SNMP
    security key is an encrypted version of an SNMP agent''s engine ID and an authentication
    password or privacy password. WebLogic Server generates one security key for each
    entry that you create in the SNMP credential map. When a WebLogic Server SNMP
    agent receives an SNMPv3 request, it compares the key that is in the request with
    its WebLogic Server keys. If it finds a match, it processes the request. The SNMP
    agent also encodes these keys in its responses and notifications. (You configure
    which keys are encoded when you create a trap destination.)</p> <p>Instead of
    regenerating the keys for each SNMPv3 communication, WebLogic Server caches the
    keys. To make sure that the cache contains the latest set of SNMP credentials,
    WebLogic Server periodically invalidates the cache. After the cache is invalidated,
    the next time an SNMP agent requests credentials, WebLogic Server regenerates
    the cache.</p> <p>Note that making a change to the credential map does not automatically
    update the cache. Instead, the cache is updated only after it has been invalidated.</p>
    <p>For example, if you update a privacy password in an existing entry in the SNMP
    credential map, the SNMP agent is not aware of the new password until the key
    cache is invalidated and regenerated. An SNMP user with the old security password
    can still access WebLogic Server data until the cache is invalidated.</p> <p>You
    can invalidate a key immediately instead of waiting for this invalidation interval
    to expire. </p> '
  name: LocalizedKeyCacheInvalidationInterval
  type: long
  writable: true
- defaultValue:
    value:
      value: 705
  descriptionHTML: '<p>The port that this SNMP agent uses to communicate with its
    subagents.</p> <p>The agent uses subagents to provide access to custom MBeans
    (MBeans that you create and register) and to other software components. WebLogic
    Server SNMP agents do not enable users to register their own subagents.</p> '
  name: MasterAgentXPort
  type: int
  writable: true
- defaultValue:
    value:
      value: 1
  descriptionHTML: '<p>The maximum number of times that this SNMP agent will resend
    INFORM notifications for which it has not received a response.</p> '
  name: MaxInformRetryCount
  type: int
  writable: true
- defaultValue:
    value:
      value: 120
  deprecated: '10.0.0.0 There is no replacement for this attribute. '
  descriptionHTML: '<p>The minimum number of seconds that this SNMP agent caches OIDs
    before checking if new ones have been added to the Management Information Base
    (MIB).</p>  <p>A MIB is a database of all objects that can be managed through
    SNMP. When you create a new WebLogic Server resource, the SNMP agent assigns a
    unique OID to the resource and adds it to the MIB. For example, when you create
    a new server, the SNMP agent adds an OID to the MIB.</p>  <p>This attribute is
    not used by the SNMP Agent anymore. The SNMP Agent retrieves internal notifications
    about MBean registrations in the WLS MBeanServers.</p> '
  name: MibDataRefreshInterval
  supported: false
  type: int
  writable: true
- defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>The user-specified name of this MBean instance.</p>  <p>This
    name is included as one of the key properties in the MBean''s <code>javax.management.ObjectName</code>:</p>  <p><code>Name=<i>user-specified-name</i></code></p> '
  key: true
  name: Name
  nullable: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: AES_128
  descriptionHTML: '<p>The protocol that this SNMP agent uses to encrypt and unencrypt
    messages. Applicable only with SNMPv3. Requires you to also use an authentication
    protocol.</p> <p>To use this protocol when sending responses or notifications,
    you must also configure the security level of your trap destinations.</p> <p>If
    you do not choose a privacy protocol, then communication between this agent and
    managers can be viewed (but not altered) by unauthorized users.</p> '
  legalValues:
  - noPriv
  - DES
  - AES_128
  name: PrivacyProtocol
  nullable: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Configures this SNMP agent to provide read-only access to MBean
    types that you have created and registered (custom MBeans).</p> <p>If you enable
    this access, when you register a custom MBean in a WebLogic Server MBeanServer,
    this SNMP agent dynamically updates a runtime MIB module that WebLogic Server
    maintains for custom MBeans. </p> <p>For each custom MBean type, WebLogic Server
    adds a table to the MIB module. For each instance of the custom MBean, it adds
    a table row. While WebLogic Server does not persist the MIB as a file or other
    data structure, the OIDs in the MIB remain constant across server sessions.</p>
    <p>The MIB module for custom MBeans is managed by a subAgent. Its master agent
    is this WebLogic Server SNMP agent and it communicates with the master agent through
    the AgentX port.</p> '
  name: SNMPAccessForUserMBeansEnabled
  type: boolean
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.SNMPAttributeChangeMBean
  defaultValue: {
    }
  descriptionHTML: '<p>The <code>SNMPAttributeChangeMBeans</code> which describe the
    MBean type and Attribute name for which attribute change notification should be
    sent when an attribute change is observed.</p> '
  name: SNMPAttributeChanges
  relationship: containment
  type: weblogic.management.configuration.SNMPAttributeChangeMBean
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.SNMPCounterMonitorMBean
  defaultValue: {
    }
  descriptionHTML: '<p>The <code>SNMPCounterMonitorMBeans</code> which describe the
    criteria for generating notifications based on JMX CounterMonitor.</p> '
  name: SNMPCounterMonitors
  relationship: containment
  type: weblogic.management.configuration.SNMPCounterMonitorMBean
  writable: true
- defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>An identifier for this SNMP agent that is unique amongst all
    other SNMP agents in the current WebLogic Server domain.</p> <p>If you use SNMPv3
    to send messages to this SNMP agent, you must specify the SNMP engine ID when
    you configure the SNMP manager.</p> <p>For an SNMP agent on an Administration
    Server, the default value is the name of the WebLogic Server domain. For an agent
    on a Managed Server, the default is the name of the server.</p> '
  name: SNMPEngineId
  nullable: true
  type: java.lang.String
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.SNMPGaugeMonitorMBean
  defaultValue: {
    }
  descriptionHTML: '<p>The <code>SNMPGaugeMonitorMBeans</code> which describe the
    criteria for generating notifications based on JMX GaugeMonitor.</p> '
  name: SNMPGaugeMonitors
  relationship: containment
  type: weblogic.management.configuration.SNMPGaugeMonitorMBean
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.SNMPLogFilterMBean
  defaultValue: {
    }
  descriptionHTML: '<p>The <code>SNMPLogFilterMBeans</code> which describe filters
    for generating notifications based on server log messages.</p> '
  name: SNMPLogFilters
  relationship: containment
  type: weblogic.management.configuration.SNMPLogFilterMBean
  writable: true
- defaultValue:
    value:
      value: 161
  descriptionHTML: '<p>The port on which you want this SNMP agent to listen for incoming
    requests from SNMP managers that use the UDP protocol.</p>  <p>SNMP managers can
    use this port to ping the SNMP agent and request the status of specific attributes.</p>  <p>If
    you target this SNMP agent to multiple server instances, and if two or more servers
    are running on the same computer, WebLogic Server will automatically increment
    this UDP port value by 1 for each agent. WebLogic Server never assigns port 162
    because it is the default port that an agent uses to send notifications. In addition,
    if any port is already in use, WebLogic Server skips the port and assigns the
    next available port.</p> <p>For example, if you use the default value of this
    attribute and then target this agent to ManagedServer1 and ManagedServer2, and
    if both servers are running on the same computer, then the agent on ManagedServer1
    will listen on UDP port 161 and the agent on ManagedServer2 will listen on UDP
    port 163.</p> <p>The incremented port number is not persisted in the domain''s
    configuration; when WebLogic Server increments port numbers, it does so in the
    order in which servers are started on the same computer.</p> <p>If WebLogic Server
    re-assigns the UDP port for an SNMP agent, look in the agent''s SNMPAgentRuntimeMBean
    to see the agent''s runtime UDP port.</p> <p>SNMP agents can also communicate
    through the host server''s TCP listen port (7001 by default) or through a TCP
    port that is configured by a custom network channel.</p> '
  name: SNMPPort
  type: int
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.SNMPProxyMBean
  defaultValue: {
    }
  descriptionHTML: '<p>The SNMP agents for which this SNMP agent is a proxy. <code>SNMPProxyMBeans</code>
    describe settings for SNMP agents to be proxied by this SNMP agent.</p> '
  name: SNMPProxies
  relationship: containment
  type: weblogic.management.configuration.SNMPProxyMBean
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.SNMPStringMonitorMBean
  defaultValue: {
    }
  descriptionHTML: '<p>The <code>SNMPStringMonitorMBeans</code> which describe the
    criteria for generating notifications based on JMX StringMonitor.</p> '
  name: SNMPStringMonitors
  relationship: containment
  type: weblogic.management.configuration.SNMPStringMonitorMBean
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.SNMPTrapDestinationMBean
  defaultValue: {
    }
  descriptionHTML: '<p>WebLogic Server uses a trap destination to specify the SNMP
    management station and the community name used by the SNMP agent to send notifications.
    Select which trap destination(s) should be used in this WebLogic Server domain
    from the list of available trap destinations.</p> '
  name: SNMPTrapDestinations
  relationship: containment
  type: weblogic.management.configuration.SNMPTrapDestinationMBean
- defaultValue:
    value:
      value: 3
  descriptionHTML: '<p>The SNMP notification version that this SNMP agent generates.</p> '
  legalValues:
  - 1
  - 2
  - 3
  name: SNMPTrapVersion
  type: int
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Specifies whether this SNMP agent sends automatically generated
    notifications to SNMP managers.</p>  <p>The SNMP agent generates automatic notifications
    when any of the following events occur:</p>  <ul> <li><p>The WebLogic Server instance
    that is hosting the SNMP agent starts.</p> <p>This type of notification (coldStart)
    has no variable bindings.</p></li> <li> <p>A server instance starts or stops.</p>
    <p>An SNMP agent on a Managed Server generates these notifications only when its
    host Managed Server starts or stops. An SNMP agent on an Administration Server
    generates these notifications when any server in the domain starts or stops.</p>
    <p>These notification types (serverStart and serverShutdown) contain variable
    bindings to identify the server that started or stopped and the time at which
    the notification was generated.</p> </li> </ul> '
  name: SendAutomaticTrapsEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 1
  deprecated: '10.0.0.0 There is no replacement for this attribute. '
  descriptionHTML: '<p>The multiplier used to calculate the interval at which this
    SNMP agent checks for newly started or shut down server instances.</p>  <p>You
    can enable the SNMP agent to automatically generate serverStartup and serverShutdown
    notifications when servers start or shut down. See SNMPAgentMBean.isSendAutomaticTrapsEnabled.</p>  <p>This
    status check value is multiplied by the MIB Data Refresh Interval to determine
    the interval:</p>  <p><code>interval = n * MibDataRefreshInterval</code></p>  <p>The
    SNMP Agent uses internal notifications to update itself when a server is restarted
    so there is no need to poll the server for their status.</p>  <p>For the most
    frequent interval, specify <code>1</code> as the multiplier value.</p> '
  name: ServerStatusCheckIntervalFactor
  supported: false
  type: int
  writable: true
- array: true
  defaultValue: {
    }
  deprecated: '9.0.0.0 Use the getSNMPTrapDestinations() method instead. '
  descriptionHTML: '<p>WebLogic Server uses a trap destination to specify the SNMP
    management station and the community name used by the SNMP agent to send trap
    notifications.</p> <p>This attribute contains the collection of trap destinations
    that have been configured for this SNMP agent.</p> '
  name: TargetedTrapDestinations
  obsolete: 9.0.0.0
  relationship: reference
  supported: false
  type: weblogic.management.configuration.SNMPTrapDestinationMBean
  writable: true
