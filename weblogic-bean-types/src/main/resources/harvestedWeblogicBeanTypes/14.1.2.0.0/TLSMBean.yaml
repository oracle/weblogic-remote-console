# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.management.configuration.ConfigurationMBean
derivedTypes: [
  ]
descriptionHTML: '<p>A <code>TLSMBean</code> contains SSL/TLS connection parameters
  and may be organized in a user-defined inheritance hierarchy and referenced by name.</p>  TODO:
  since 7.0.0.0 TODO: delegateBean TODO: validator TLSValidator.validateTLS '
name: weblogic.management.configuration.TLSMBean
properties:
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether NULL ciphers are allowed for the TLS connection.</p>  <p>When
    a SSL server and a SSL client try to negotiate a commonly supported Cipher, there
    is a chance that they may end up with nothing in common. A NullCipher is a cipher
    providing no encryption for the SSL message between the client and server, and
    it may temporarily be used in the development environment if the SSL server and
    client share no common cipher for some reason. This is not a standard SSL feature,
    some SSL provider supports this feature.</p>  <p>The AllowUnEncryptedNullCipher
    flag is used to control whether the NullCipher feature is enabled or not, if true,
    the SSL message may be unencrypted when SSL server and client shares no common
    cipher.</p>  <p>This AllowUnEncryptedNullCipher flag is only effective to SSL
    providers which support the NullCipher feature.</p>  <p>Warning: this NullCipher
    feature should NOT be enabled for a production environment, it may leads to unencrypted
    SSL message</p>  <p>By default, the AllowUnEncryptedNullCipher is false</p> * '
  name: AllowUnencryptedNullCipher
  type: boolean
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>Specifies the cipher suites for the TLS connection.</p>  <p>The
    strongest negotiated cipher suite is chosen during the SSL handshake. The set
    of cipher suites used by default by JSSE depends on the specific JDK version with
    which WebLogic Server is configured.</p>  <p>For a list of possible values, see
    <a href="http://www.oracle.com/pls/topic/lookup?ctx=fmw122100&amp;id=SECMG502">Cipher
    Suites</a>.</p> '
  name: Ciphersuites
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Specifies whether clients must present digital certificates
    from a trusted certificate authority.</p> '
  name: ClientCertificateEnforced
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Specifies whether to ignore the installed implementation of
    the <code>weblogic.security.SSL.HostnameVerifier</code> interface (when this server
    is acting as a client to another application server).</p> '
  name: HostnameVerificationIgnored
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The name of the class that implements the <code>weblogic.security.SSL.HostnameVerifier</code>
    interface.</p>  <p>This class verifies whether the connection to the host with
    the hostname from URL should be allowed. The class is used to prevent man-in-the-middle
    attacks. The <code>weblogic.security.SSL.HostnameVerifier</code> has a <code>verify()</code>
    method that WebLogic Server calls on the client during the SSL handshake.</p> '
  name: HostnameVerifier
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The source of the identity keystore.</p>  <p>For a JKS keystore,
    the source is the path and file name. For an Oracle Key Store Service (KSS) keystore,
    the source is the KSS URI.</p>  <p>If using a JKS keystore, the keystore path
    name must either be absolute or relative to where the server was booted.</p>  <p>If
    using a KSS keystore, the keystore URI must be of the form:</p>  <p><code>kss://system/<i>keystorename</i></code></p>  <p>where
    <code><i>keystorename</i></code> is the name of the keystore registered in KSS.</p>  <p>The
    value in this attribute is only used for a server if <code>ServerMBean.KeyStores</code>
    is <code>CUSTOM_IDENTITY_AND_JAVA_STANDARD_TRUST</code>, <code>CUSTOM_IDENTITY_AND_CUSTOM_TRUST</code>
    or <code>CUSTOM_IDENTITY_AND_COMMAND_LINE_TRUST</code>.</p> '
  name: IdentityKeyStoreFileName
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The encrypted identity keystore''s passphrase. If empty or
    null, then the keystore will be opened without a passphrase.</p>  <p>This attribute
    is only used if <code>ServerMBean.KeyStores</code> is <code>CUSTOM_IDENTITY_AND_JAVA_STANDARD_TRUST</code>,
    <code>CUSTOM_IDENTITY_AND_CUSTOM_TRUST</code> or <code>CUSTOM_IDENTITY_AND_COMMAND_LINE_TRUST</code>.</p>  <p>When
    you get the value of this attribute, WebLogic Server does the following:</p> <ol><li>Retrieves
    the value of the <code>IdentityKeyStorePassPhraseEncrypted</code> attribute.</li>
    <li>Decrypts the value and returns the unencrypted password as a String.</li>
    </ol>  <p>When you set the value of this attribute, WebLogic Server does the following:</p>
    <ol><li>Encrypts the value.</li> <li>Sets the value of the <code>IdentityKeyStorePassPhraseEncrypted</code>
    attribute to the encrypted value.</li> </ol> <p>Using this attribute (<code>IdentityKeyStorePassPhrase</code>)
    is a potential security risk because the String object (which contains the unencrypted
    password) remains in the JVM''s memory until garbage collection removes it and
    the memory is reallocated. Depending on how memory is allocated in the JVM, a
    significant amount of time could pass before this unencrypted data is removed
    from memory.</p>  <p>Instead of using this attribute, use <code>IdentityKeyStorePassPhraseEncrypted</code>.</p> '
  encrypted: true
  name: IdentityKeyStorePassPhrase
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The encrypted pass phrase defined when creating the keystore.</p> '
  encrypted: true
  name: IdentityKeyStorePassPhraseEncrypted
  type: byte
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The type of the keystore. Generally, this is <code>JKS</code>.
    If using the Oracle Key Store Service, this would be <code>KSS</code></p>  <p>If
    empty or null, then the JDK''s default keystore type (specified in <code>java.security</code>)
    is used. The identity key store type is only used if <code>ServerMBean.KeyStores</code>
    is <code>CUSTOM_IDENTITY_AND_JAVA_STANDARD_TRUST</code>, <code>CUSTOM_IDENTITY_AND_CUSTOM_TRUST</code>
    or <code>CUSTOM_IDENTITY_AND_COMMAND_LINE_TRUST</code>.</p> '
  name: IdentityKeyStoreType
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The alias of the private key representing the identity for
    the associated connection. The alias refers to a private key in getIdentityKeyStoreFileName()</p> '
  name: IdentityPrivateKeyAlias
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The pass phrase of the private key referred by the alias in
    getIdentityPrivateKeyAlias().</p> '
  encrypted: true
  name: IdentityPrivateKeyPassPhrase
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The encrypted form of the pass phrase used to retrieve the
    identity private key from the keystore. </p> TODO: derivedDefault ((ServerTemplateMBean)getParent()).getSSL().getServerPrivateKeyPassPhraseEncrypted() '
  encrypted: true
  name: IdentityPrivateKeyPassPhraseEncrypted
  type: byte
  writable: true
- defaultValue:
    value:
      value: BuiltinSSLValidationOnly
  descriptionHTML: '<p>Indicates the client certificate validation rules for inbound
    SSL.</p>  <p>This attribute only applies to TLS connections using 2-way SSL.</p> '
  legalValues:
  - BuiltinSSLValidationOnly
  - BuiltinSSLValidationAndCertPathValidators
  name: InboundCertificateValidation
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: 'Get the minimum SSL/TLS protocol version to be used in a TLS connection.
    TODO: derivedDefault ((ServerTemplateMBean)(getParent())).getSSL().getMinimumTLSProtocolVersion() '
  name: MinimumTLSProtocolVersion
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: <unknown>
  descriptionHTML: '<p>The name of this set of TLS connection parameters.</p> '
  key: true
  name: Name
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: BuiltinSSLValidationOnly
  descriptionHTML: '<p>Indicates the server certificate validation rules for outbound
    SSL.</p>  <p>This attribute always applies to outbound SSL that is part of WebLogic
    Server (that is, an Administration Server talking to the Node Manager). It does
    not apply to application code in the server that is using outbound SSL unless
    the application code uses a <code>weblogic.security.SSL.ServerTrustManager</code>
    that is configured to use outbound SSL validation.</p> '
  legalValues:
  - BuiltinSSLValidationOnly
  - BuiltinSSLValidationAndCertPathValidators
  name: OutboundCertificateValidation
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: 'Indicates whether SSLv2Hello is enabled in a TLS connection. '
  name: SSLv2HelloEnabled
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The source of the trust keystore.</p>  <p>For a JKS keystore,
    the source is the path and file name. For an Oracle Key Store Service (KSS) keystore,
    the source is the KSS URI.</p>  <p>If using a JKS keystore, the keystore path
    name must either be absolute or relative to where the server was booted.</p>  <p>If
    using a KSS keystore, the keystore URI must be of the form:</p>  <p><code>kss://system/<i>keystorename</i></code></p>  <p>where
    <code><i>keystorename</i></code> is the name of the keystore registered in KSS.</p>  <p>The
    value in this attribute is only used for a server if <code>ServerMBean.KeyStores</code>
    is <code>CUSTOM_IDENTITY_AND_CUSTOM_TRUST</code>.</p> '
  name: TrustKeyStoreFileName
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The encrypted trust keystore''s passphrase. If empty or null,
    then the keystore will be opened without a passphrase.</p>  <p>This attribute
    is only used if <code>ServerMBean.KeyStores</code> is <code>CUSTOM_IDENTITY_AND_CUSTOM_TRUST</code>.</p>  <p>When
    you get the value of this attribute, WebLogic Server does the following:</p> <ol><li>Retrieves
    the value of the <code>TrustKeyStorePassPhraseEncrypted</code> attribute.</li>
    <li>Decrypts the value and returns the unencrypted password as a String.</li>
    </ol>  <p>When you set the value of this attribute, WebLogic Server does the following:</p>
    <ol><li>Encrypts the value.</li> <li>Sets the value of the <code>TrustKeyStorePassPhraseEncrypted</code>
    attribute to the encrypted value.</li> </ol> <p>Using this attribute (<code>TrustKeyStorePassPhrase</code>)
    is a potential security risk because the String object (which contains the unencrypted
    password) remains in the JVM''s memory until garbage collection removes it and
    the memory is reallocated. Depending on how memory is allocated in the JVM, a
    significant amount of time could pass before this unencrypted data is removed
    from memory.</p>  <p>Instead of using this attribute, use <code>TrustKeyStorePassPhraseEncrypted</code>.</p> '
  encrypted: true
  name: TrustKeyStorePassPhrase
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The encrypted pass phrase defined when creating the keystore.</p> '
  encrypted: true
  name: TrustKeyStorePassPhraseEncrypted
  type: byte
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The type of the trust keystore. Generally, this is <code>JKS</code>.
    If using the Oracle Key Store Service, this would be <code>KSS</code></p>  <p>If
    empty or null, then the JDK''s default keystore type (specified in <code>java.security</code>)
    is used. The trust key store type is only used if <code>ServerMBean.KeyStores</code>
    is <code>CUSTOM_IDENTITY_AND_CUSTOM_TRUST</code>.</p> '
  name: TrustKeyStoreType
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Specifies whether to use two way SSL.</p> '
  name: TwoWaySSLEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: ForClientOrServer
  descriptionHTML: '<p>The declared usages of this SSL/TLS configuration.</p> '
  legalValues:
  - ForServer
  - ForClient
  - ForClientOrServer
  name: Usage
  restartNeeded: true
  type: java.lang.String
  writable: true
