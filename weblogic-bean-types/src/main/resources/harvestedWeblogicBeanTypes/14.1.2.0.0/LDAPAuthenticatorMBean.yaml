# Copyright (c) 2020, 2024, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.security.providers.authentication.LoginExceptionPropagatorMBean
- weblogic.management.security.authentication.UserReaderMBean
- weblogic.management.security.authentication.IdentityDomainAuthenticatorMBean
- weblogic.management.security.authentication.MemberGroupListerMBean
- weblogic.management.utils.LDAPServerMBean
- weblogic.management.security.authentication.UserPasswordEditorMBean
- weblogic.management.security.authentication.GroupMemberListerMBean
- weblogic.management.security.authentication.GroupMembershipHierarchyCacheMBean
derivedTypes:
- weblogic.security.providers.authentication.ActiveDirectoryAuthenticatorMBean
- weblogic.security.providers.authentication.OracleUnifiedDirectoryAuthenticatorMBean
- weblogic.security.providers.authentication.OracleInternetDirectoryAuthenticatorMBean
- weblogic.security.providers.authentication.OpenLDAPAuthenticatorMBean
descriptionHTML: '<p>This MBean contains attributes for the LDAP servers supported
  by the       LDAP Authentication providers. Subinterfaces of this MBean override       default
  values specific to an LDAP server.</p> '
name: weblogic.security.providers.authentication.LDAPAuthenticatorMBean
properties:
- defaultValue: {
    }
  descriptionHTML: '<p>An LDAP search filter for finding all groups beneath the base
    group         distinguished name (DN). If the attribute is not specified (that
    is,         if the attribute is null or empty), a default search filter is created         based
    on the Group schema.</p> '
  name: AllGroupsFilter
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>An LDAP search filter for finding all users beneath the base
    user         distinguished name (DN). If the attribute (user object class) is
    not         specified (that is, if the attribute is null or empty), a default         search
    filter is created based on the user schema.</p> '
  name: AllUsersFilter
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The credential (generally a password) used to authenticate
    the LDAP user                  that is defined in the Principal attribute.</p> '
  encrypted: true
  name: Credential
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: ' '
  encrypted: true
  name: CredentialEncrypted
  type: byte
  writable: true
- defaultValue:
    value:
      value: Provider that performs LDAP authentication
  descriptionHTML: '<p>A short description of the LDAP Authentication provider.</p> '
  name: Description
  type: java.lang.String
- defaultValue: {
    }
  descriptionHTML: '<p>The attribute of a dynamic LDAP group object that specifies
    the         name of the group.</p> '
  name: DynamicGroupNameAttribute
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The LDAP object class that stores dynamic groups.</p> '
  name: DynamicGroupObjectClass
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The attribute of the dynamic LDAP group object that specifies
    the         URLs of the members of the dynamic group.</p> '
  name: DynamicMemberURLAttribute
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Sets whether to enable cache statistics if LDAP Server Cache
    and Group Membership             Lookup Hierarchy Cache are enabled. If true,
    the number of the cache entries, queries            and hits will be recorded.         </p> '
  name: EnableCacheStatistics
  type: java.lang.Boolean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Sets whether to cache group membership hierarchies found during
    recursive          membership lookup. If true, each subtree found will be cached.
    This overwrites          the default value defined in GroupMembershipHierarchyCacheMBean.</p> '
  name: EnableGroupMembershipLookupHierarchyCaching
  type: java.lang.Boolean
  writable: true
- defaultValue:
    value:
      value: ou=groups, o=example.com
  descriptionHTML: '<p>The base distinguished name (DN) of the tree in the LDAP directory         that
    contains groups.</p> '
  name: GroupBaseDN
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: (&(cn=%g)(objectclass=groupofuniquenames))
  descriptionHTML: '<p>An LDAP search filter for finding a group given the name of
    the         group. If the attribute is not specified (that is, if the attribute
    is         null or empty), a default search filter is created based on the group         schema.</p> '
  name: GroupFromNameFilter
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: unlimited
  descriptionHTML: "<p>Specifies whether group searches into nested groups are unlimited,\
    \         limited or off. Valid values are <code>unlimited</code>,         <code>limited</code>\
    \ and <code>off</code>.</p><p>For configurations that use only the first level\
    \ of nested group  \thierarchy, this attribute allows improved performance  \t\
    during user searches by turning off the group search or limiting the group search\
    \ level.  \tIf a limited search is specified, the Max Group Membership Search\
    \ Level  \tattribute must be specified.  \tIf an unlimited search is specified,\
    \ the Max Group Membership Search Level  \tattribute is ignored.         If an\
    \ off is specified, the Max Group Membership Search Level attribute is ignored.\
    \ </p> \t<p>Note that when Use Token Groups For Group Membership Lookup is used\
    \  \tduring authentication, all the groups are returned in a single call, and\
    \ the  \trecursion limits and depth limits do not apply. They will apply in management\
    \ \toperations.</p> "
  legalValues:
  - unlimited
  - limited
  - 'off'
  name: GroupMembershipSearching
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: subtree
  descriptionHTML: '<p>Specifies how deep in the LDAP directory tree to search for
    groups.         Valid values are <code>subtree</code> and <code>onelevel</code>.</p> '
  legalValues:
  - subtree
  - onelevel
  name: GroupSearchScope
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Specifies the name of the GUID attribute defined in the LDAP
    server that          corresponds to the LDAP Authentication provider configured
    in the security realm.         </p> '
  name: GuidAttribute
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Determines whether duplicate members are ignored when adding         groups.
    The attribute cycles in the Group membership.</p> '
  name: IgnoreDuplicateMembership
  type: java.lang.Boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether to prevent LDAP connections from timing out.</p> '
  name: KeepAliveEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether or not the group membership search result            should
    match the groupBaseDN.</p> '
  name: MatchGroupBaseDN
  type: java.lang.Boolean
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: "<p>Specifies how many levels of group membership can be searched.\
    \ This         setting is valid only if GroupMembershipSearching is set to   \
    \      <code>limited. </code> Valid values are 0 and positive integers. For  \
    \       example, 0 indicates only direct group memberships will be found, and\
    \ a         positive number indicates the number of levels to search.</p><p> Possible\
    \ values are: </p> \t   \t<p>0 - Indicates only direct groups will be found. That\
    \ is, when searching for  \t\tmembership in Group A, only direct members of Group\
    \ A will be found. If Group  \t\tB is a member of Group A, the members will not\
    \ be found by this search. </p> \t\t<p>Any positive number - Indicates the number\
    \ of levels to search. For example, if  \tthis attribute is set to 1, a search\
    \ for membership in Group A will return  \tdirect members of Group A. If Group\
    \ B is a member of Group A, the members of  \tGroup B will also be found by this\
    \ search. However, if Group C is a member of  \tGroup B, the members of Group\
    \ C will not be found by this search. </p> \t<p>Note that when Use Token Groups\
    \ For Group Membership Lookup is used  \tduring authentication, all the groups\
    \ are returned in a single call, and the  \trecursion limits and depth limits\
    \ do not apply. They will apply in management \toperations.</p> "
  name: MaxGroupMembershipSearchLevel
  type: java.lang.Integer
  writable: true
- defaultValue:
    value:
      value: weblogic.security.providers.authentication.LDAPAuthenticationProviderImpl
  descriptionHTML: '<p>The name of the Java class used to load the LDAP Authentication         provider.</p> '
  name: ProviderClassName
  type: java.lang.String
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Specifies whether to retrieve the user princiapl from            the
    userDN or the username attribute.</p> '
  name: RetrievePrincipalFromUserDN
  type: java.lang.Boolean
  writable: true
- defaultValue:
    value:
      value: (&(uniquemember=%M)(objectclass=groupofuniquenames))
  descriptionHTML: '<p>An LDAP search filter that, given the distinguished name (DN)
    of a         member of a group, returns the DNs of the static LDAP groups that         contain
    that member. If the attribute is not specified (that is, if         the attribute
    is null or empty), a default search filter is created         based on the group
    schema.</p> '
  name: StaticGroupDNsfromMemberDNFilter
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: cn
  descriptionHTML: '<p>The attribute of a static LDAP group object that specifies
    the name         of the group.</p> '
  name: StaticGroupNameAttribute
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: groupofuniquenames
  descriptionHTML: '<p>The name of the LDAP object class that stores static groups.</p> '
  name: StaticGroupObjectClass
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: uniquemember
  descriptionHTML: '<p>The attribute of a static LDAP group object that specifies
    the         distinguished names (DNs) of the members of the group.</p> '
  name: StaticMemberDNAttribute
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies whether or not the user name retrieved from the LDAP
    server             should be used as the Principal in the Subject.</p> '
  name: UseRetrievedUserNameAsPrincipal
  type: java.lang.Boolean
  writable: true
- defaultValue:
    value:
      value: ou=people, o=example.com
  descriptionHTML: '<p>The base distinguished name (DN) of the tree in the LDAP directory         that
    contains users.</p> '
  name: UserBaseDN
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: description
  descriptionHTML: 'No description provided. '
  legalValues:
  - description
  - displayName
  - givenName
  name: UserDescriptionAttribute
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The attribute of an LDAP user object that specifies the         distinguished
    names (DNs) of dynamic groups to which this user         belongs. If such an attribute
    does not exist, WebLogic Server         determines if a user is a member of a
    group by evaluating the URLs on         the dynamic group. If a group contains
    other groups, WebLogic Server         evaluates the URLs on any of the descendents
    (indicates parent         relationship) of the group.</p> '
  name: UserDynamicGroupDNAttribute
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: (&(uid=%u)(objectclass=person))
  descriptionHTML: '<p>An LDAP search filter for finding a user given the name of
    the         user. If the attribute (user name attribute and user object class)
    is         not specified (that is, if the attribute is null or empty), a default         search
    filter is created based on the user schema.</p> '
  name: UserFromNameFilter
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: uid
  descriptionHTML: '<p>The attribute of an LDAP user object that specifies the name
    of the         user.</p> '
  name: UserNameAttribute
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: person
  descriptionHTML: '<p>The LDAP object class that stores users.</p> '
  name: UserObjectClass
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: subtree
  descriptionHTML: '<p>Specifies how deep in the LDAP directory tree to search for
    Users.         Valid values are <code>subtree</code> and <code>onelevel</code>.</p> '
  legalValues:
  - subtree
  - onelevel
  name: UserSearchScope
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: '1.0'
  descriptionHTML: '<p>The version number of the LDAP Authentication provider.</p> '
  name: Version
  type: java.lang.String
