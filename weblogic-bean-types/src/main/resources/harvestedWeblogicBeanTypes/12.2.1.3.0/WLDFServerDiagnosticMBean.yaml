# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.management.configuration.ConfigurationMBean
derivedTypes: [
  ]
descriptionHTML: '<p>Use this interface to configure the WebLogic Diagnostic Framework
  (WLDF) components that are defined for each WebLogic Server instance.</p> '
name: weblogic.management.configuration.WLDFServerDiagnosticMBean
properties:
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>This attribute controls if configuration based data retirement
    functionality is enabled on the server. If disabled, all retirement policies will
    be disabled.</p> '
  name: DataRetirementEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  deprecated: '12.2.1.0.0 Defaults to enabled now '
  descriptionHTML: '<p>If true, diagnostic context creation is enabled. If false,
    the diagnostic context will not be created when requested. However, if the diagnostics
    context already exists because it was propagated from another VM or was created
    through the DyeInjection monitor, the context will be made available.</p> '
  name: DiagnosticContextEnabled
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: FileStoreArchive
  descriptionHTML: '<p>Determines whether the current server persists its harvested
    metrics and event data in a diagnostic store (file-based store) or a JDBC based
    archive. The default store is file-based. </p> '
  legalValues:
  - FileStoreArchive
  - JDBCArchive
  name: DiagnosticDataArchiveType
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: logs/diagnostic_dumps
  descriptionHTML: '<p>Directory where heap and thread dumps will be generated by
    actions. This directory is a relative path with respect to the server directory</p> '
  name: DiagnosticDumpsDir
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The JDBC data source that the server uses to archive its harvested
    metrics and event data.</p> '
  name: DiagnosticJDBCResource
  relationship: reference
  restartNeeded: true
  type: weblogic.management.configuration.JDBCSystemResourceMBean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The schema name to use for accessing JDBC-based archive tables.</p>  <p>If
    multiple WLDF JDBC archive schemas exist in the same database, this value specifies
    the correct schema to use for accessing JDBC-based archive tables in that database.</p>  <p>There
    is no default value. If a schema name is not specified, no schema name is applied
    when WLDF validates the run-time table or is used for the SQL statements.</p> '
  name: DiagnosticJDBCSchemaName
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The smallest addressable block, in bytes, of a file. When a
    native <code>wlfileio</code> driver is available and the block size has not been
    configured by the user, the store selects the minimum OS specific value for unbuffered
    (direct) I/O, if it is within the range [512, 8192].</p> A file store''s block
    size does not change once the file store creates its files. Changes to block size
    only take effect for new file stores or after the current files have been deleted.
    See "Tuning the Persistent Store" in <i>Performance and Tuning for Oracle WebLogic
    Server</i>. '
  name: DiagnosticStoreBlockSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: data/store/diagnostics
  descriptionHTML: '<p>The directory in which the current server maintains its diagnostic
    store.</p> '
  name: DiagnosticStoreDir
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Determines whether OS file locking is used. </p> When file
    locking protection is enabled, a store boot fails if another store instance already
    has opened the store files. Do not disable this setting unless you have procedures
    in place to prevent multiple store instances from opening the same file. File
    locking is not required but helps prevent corruption in the event that two same-named
    file store instances attempt to operate in the same directories. This setting
    applies to both primary and cache files. '
  name: DiagnosticStoreFileLockingEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The I/O buffer size, in bytes, automatically rounded down to
    the nearest power of 2, controls the largest write size.</p>  <ul> <li>When a
    native <code>wlfileio</code> driver is available, the setting applies to off-heap
    (native) memory.</li> <li>When a native <code>wlfileio</code> driver is not available,
    the setting applies to JAVA heap memory.</li> <li>For the best runtime performance,
    Oracle recommends setting <code>DiagnosticStoreIOBufferSize</code> so that it
    is larger than the largest write (multiple concurrent store requests may be combined
    into a single write).</li>  <li>See <code>AllocatedIOBufferBytes</code> to find
    out the actual allocated off-heap (native) memory amount. It is a multiple of
    <code>IOBufferSize</code></li> </ul> '
  name: DiagnosticStoreIoBufferSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: 1342177280
  descriptionHTML: '<p>The maximum file size, in bytes.</p>  <ul> <li>The <code>DiagnosticStoreMaxFileSize</code>
    value affects the number of files needed to accommodate a diagnostic store of
    a particular size (number of files = diagnostic store size/MaxFileSize rounded
    up).</li>  <li>A diagnostic store automatically reuses space freed by deleted
    records and automatically expands individual files up to <code>DiagnosticStoreMaxFileSize</code>
    if there is not enough space for a new record. If there is no space left in exiting
    files for a new record, a diagnostic store creates an additional file.</li>  <li>
    A small number of larger files is normally preferred over a large number of smaller
    files as each file allocates Window Buffer and file handles.</li>  <li> If <code>DiagnosticStoreMaxFileSize</code>
    is larger than 2^24 * <code>DiagnosticStoreBlockSize</code>, then <code>DiagnosticStoreMaxFileSize</code>
    is ignored, and the value becomes 2^24 * <code>DiagnosticStoreBlockSize</code>.
    The default <code>DiagnosticStoreBlockSize</code> is 512, and 2^24 * 512 is 8
    GB. </li> </ul>  <p>Oracle recommends not setting the Diagnostic Store Max File
    Size above the default value of 1,342,177,280.</p> '
  name: DiagnosticStoreMaxFileSize
  restartNeeded: true
  type: long
  writable: true
- defaultValue:
    value:
      value: 4194304
  descriptionHTML: '<p>The maximum amount of data, in bytes and rounded down to the
    nearest power of 2, mapped into the JVM''s address space per diagnostic store
    file. Applies only when a native <code>wlfileio</code> library is loaded.</p>  <p>A
    window buffer does not consume Java heap memory, but does consume off-heap (native)
    memory. If the store is unable to allocate the requested buffer size, it allocates
    smaller and smaller buffers until it reaches <code>DiagnosticStoreMinWindowBufferSize</code>,
    and then fails if it cannot honor <code>DiagnosticStoreMinWindowBufferSize</code>.</p>  <p>Oracle
    recommends setting the max window buffer size to more than double the size of
    the largest write (multiple concurrently updated records may be combined into
    a single write), and greater than or equal to the file size, unless there are
    other constraints. 32-bit JVMs may impose a total limit of between 2 and 4GB for
    combined Java heap plus off-heap (native) memory usage.</p> '
  name: DiagnosticStoreMaxWindowBufferSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The minimum amount of data, in bytes and rounded down to the
    nearest power of 2, mapped into the JVM''s address space per diagnostic store
    file. Applies only when a native <code>wlfileio</code> library is loaded. See
    <a href=''#getDiagnosticStoreMinWindowBufferSize''>Diagnostic Store Maximum Window
    Buffer Size</a>.</p> '
  name: DiagnosticStoreMinWindowBufferSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: 5000
  descriptionHTML: '<p>The interval, in milliseconds, at which queued up instrumentation
    events will be periodically dispatched to the archive.</p> '
  name: EventPersistenceInterval
  type: long
  writable: true
- defaultValue:
    value:
      value: 60000
  descriptionHTML: '<p>The time span, in milliseconds, for which recently archived
    events will be captured in the diagnostic image. All events archived on or after
    ( <code>System.currentTimeMillis() - interval</code> ) will be captured.</p> '
  name: EventsImageCaptureInterval
  type: long
  writable: true
- defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>The default directory where the server stores captured diagnostic
    images.</p>  <p>If you specify a relative pathname, the root of that path is the
    server''s root directory.</p>  <p>If the directory does not exist, it will be
    created when the WebLogic Diagnostic Framework is initialized on the server. Note
    that each image capture request can override this default directory location.</p> '
  name: ImageDir
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 1
  descriptionHTML: '<p>The default timeout period, in minutes, that the server uses
    to delay future diagnostic image-capture requests.</p> '
  name: ImageTimeout
  type: int
  writable: true
- defaultValue:
    value:
      value: 8
  descriptionHTML: '<p>Returns the maximum number of heap dump files to be retained
    which are generated by heap dump actions. If this limit is reached, oldest heap
    dumps will be deleted while creating new heap dump so that this limit is not exceeded.</p> '
  name: MaxHeapDumpCount
  type: int
  writable: true
- defaultValue:
    value:
      value: 100
  descriptionHTML: '<p>Returns the maximum number of thread dump files to be retained
    which are generated by thread dump actions. If this limit is reached, oldest thread
    dump files will be deleted while creating new thread dump file so that this limit
    is not exceeded.</p> '
  name: MaxThreadDumpCount
  type: int
  writable: true
- defaultValue:
    value:
      value: 100
  descriptionHTML: '<p>Return the preferred limit on the size of diagnostic store
    file in MB.</p> '
  name: PreferredStoreSizeLimit
  type: int
  writable: true
- defaultValue:
    value:
      value: 1
  descriptionHTML: '<p>Return the period in hours at which diagnostic store file size
    check will be performed</p> '
  name: StoreSizeCheckPeriod
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Specifies the instrumentation events persistence policy. If
    true, events will be persisted synchronously within the same thread. If false,
    events will be queued up to be persisted in a separate thread.</p> '
  name: SynchronousEventPersistenceEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: ' '
  name: WLDFBuiltinSystemResourceDescriptorBean
  relationship: containment
  transient: true
  type: weblogic.diagnostics.descriptor.WLDFResourceBean
- defaultValue:
    productionModeValue:
      value: Low
    value:
      value: None
  descriptionHTML: '<p>This attribute specifies the WLDF built-in system resource
    type in use for this server.</p>  <p>This attribute has the following settings:</p>
    <ul> <li><code>None</code> No WLDF built-in system resource in use.</li> <li><code>Low</code>
    The Low WLDF built-in system resource. This is the default.</li> <li><code>Medium</code>
    The Medium built-in system resource.</li> <li><code>High</code> The High built-in
    system resource.</li> </ul> '
  legalValues:
  - None
  - Low
  - Medium
  - High
  name: WLDFBuiltinSystemResourceType
  type: java.lang.String
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.WLDFDataRetirementByAgeMBean
  defaultValue: {
    }
  descriptionHTML: '<p>Return the WLDFDataRetirementByAgeMBeans parented by this WLDFServerDiagnosticMBean.</p> '
  name: WLDFDataRetirementByAges
  relationship: containment
  type: weblogic.management.configuration.WLDFDataRetirementByAgeMBean
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>Return the WLDFDataRetirementMBeans parented by this WLDFServerDiagnosticMBean.</p> '
  name: WLDFDataRetirements
  relationship: reference
  transient: true
  type: weblogic.management.configuration.WLDFDataRetirementMBean
- defaultValue:
    value:
      value: Low
  descriptionHTML: '<p>Specifies the volume of diagnostic data that is automatically
    produced by WebLogic Server at run time. Note that the WLDF diagnostic volume
    setting does not affect explicitly configured diagnostic modules. For example,
    this controls the volume of events generated for Flight Recorder.</p>  <p>This
    attribute has the following settings:</p> <ul> <li><code>Off</code> No diagnostic
    data is produced.</li> <li><code>Low</code> Minimal amounts of automatic diagnostic
    data are produced. This is the default.</li> <li><code>Medium</code> Additional
    diagnostic data is automatically generated beyond the amount generated for <code>Low</code>.</li>
    <li><code>High</code> Additional diagnostic data is automatically generated beyond
    the amount generated for <code>Medium</code>.</li> </ul> '
  legalValues:
  - 'Off'
  - Low
  - Medium
  - High
  name: WLDFDiagnosticVolume
  type: java.lang.String
  writable: true
