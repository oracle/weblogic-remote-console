# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.configuration.DeploymentMBean
descriptionHTML: '<p>This bean represents the configuration of virtual web server
  within a weblogic server. Note that a server may define multiple web servers to
  support virtual hosts.</p>  <p>This MBean represents a virtual host.</p> '
name: weblogic.management.configuration.WebServerMBean
properties:
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates whether this server allows the inclusion of the context
    path in the virtual path to <code>context.getRealPath()</code>. (If checked, you
    cannot use sub directories with the same name as <code>contextPath</code>). This
    is a compatibility switch that will be deprecated 9.0.0.0 in future releases.</p>  <p>Gets
    the acceptContextPathInGetRealPath attribute of the WebServerMBean object</p> '
  name: AcceptContextPathInGetRealPath
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: true
    value:
      value: true
  descriptionHTML: '<p>Whether authcookie feature is enabled or not.</p> '
  name: AuthCookieEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>Provides user defined mapping between internet and Java charset
    names.</p> '
  excludeFromRest: No default REST mapping for Map
  name: Charsets
  supported: false
  type: java.util.Map
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates whether the use of Chunk Transfer-Encoding in HTTP/1.1
    is enabled.</p> '
  name: ChunkedTransferDisabled
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Get the Client IP Header from WebSerevrMBean.</p> '
  name: ClientIpHeader
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 use the ServerDebugMBean '
  descriptionHTML: '<p>Indicates whether the debugEnabled attribute is enabled.</p> '
  name: DebugEnabled
  obsolete: 9.0.0.0
  supported: false
  type: boolean
- defaultValue: {
    }
  descriptionHTML: '<p>Provides the Servlet 2.3 Web Application that maps to the "default"
    servlet context (where ContextPath = "/"). This param has been deprecated 9.0.0.0
    starting from 8.1 release. Set context-root="" instead in weblogic.xml or application.xml.
    Alternatively, use getDefaultWebAppDeployment()</p>  <p>Gets the defaultWebApp
    attribute of the WebServerMBean object</p> '
  name: DefaultWebApp
  obsolete: 9.0.0.0
  relationship: reference
  supported: false
  type: weblogic.management.configuration.WebAppComponentMBean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Returns the original context-root for the default Web application
    for this Web server. Alternatively, you can use the context-root attributes in
    application.xml or weblogic.xml to set a default Web application. The context-root
    for a default Web application is /. If "" (empty string) is specified, the Web
    server defaults to /.</p> '
  name: DefaultWebAppContextRoot
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>The name of the HTTP port to which all redirected URLs will
    be sent. If specified, WebLogic Server will use this value rather than the one
    in the HOST header.</p>  <p>Sets the frontendHTTPPort Provides a method to ensure
    that the webapp will always have the correct PORT information, even when the request
    is coming through a firewall or a proxy. If this parameter is configured, the
    HOST header will be ignored and the information in this parameter will be used
    in its place.</p> '
  name: FrontendHTTPPort
  type: int
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>The name of the secure HTTP port to which all redirected URLs
    will be sent. If specified, WebLogic Server will use this value rather than the
    one in the HOST header.</p>  <p>Sets the frontendHTTPSPort Provides a method to
    ensure that the webapp will always have the correct PORT information, even when
    the request is coming through a firewall or a proxy. If this parameter is configured,
    the HOST header will be ignored and the information in this parameter will be
    used in its place.</p> '
  name: FrontendHTTPSPort
  type: int
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The name of the host to which all redirected URLs will be sent.
    If specified, WebLogic Server will use this value rather than the one in the HOST
    header.</p>  <p>Sets the HTTP frontendHost Provides a method to ensure that the
    webapp will always have the correct HOST information, even when the request is
    coming through a firewall or a proxy. If this parameter is configured, the HOST
    header will be ignored and the information in this parameter will be used in its
    place.</p> '
  name: FrontendHost
  type: java.lang.String
  writable: true
- defaultValue:
    secureModeValue:
      value: 60
    value:
      value: 60
  descriptionHTML: '<p>The amount of time this server waits before closing an inactive
    HTTPS connection.</p>  <p>Number of seconds to maintain HTTPS keep-alive before
    timing out the request.</p> '
  name: HttpsKeepAliveSecs
  type: int
  writable: true
- defaultValue:
    secureModeValue:
      value: true
    value:
      value: true
  descriptionHTML: '<p>Indicates whether there should be a persistent connection to
    this server. (This may improve the performance of your Web applications.)</p>  <p>Gets
    the keepAliveEnabled attribute of the WebServerMBean object</p> '
  name: KeepAliveEnabled
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: 30
    value:
      value: 30
  descriptionHTML: '<p>The amount of time this server waits before closing an inactive
    HTTP connection.</p>  <p>Number of seconds to maintain HTTP keep-alive before
    timing out the request.</p> '
  name: KeepAliveSecs
  type: int
  writable: true
- defaultValue:
    value:
      value: 8
  descriptionHTML: '<p>The maximum size (in kilobytes) of the buffer that stores HTTP
    requests. When the buffer reaches this size, the server writes the data to the
    HTTP log file. Use the <code>LogFileFlushSecs</code> property to determine the
    frequency with which the server checks the size of the buffer.</p>  <p>The maximum
    size of the buffer that stores HTTP requests.</p>  <p>Gets the logFileBufferKBytes
    attribute of the WebServerMBean object</p> '
  name: LogFileBufferKBytes
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: int
  writable: true
- defaultValue:
    value:
      value: 7
  deprecated: '9.0.0.0 Use getWebServerLog().getFileCount() '
  descriptionHTML: '<p>The maximum number of log files that this server retains when
    it rotates the log. (This field is relevant only if you check the Limit Number
    of Retained Log Files box.)</p>  <p>The maximum number of log files that the server
    creates when it rotates the log. Only valid if <code>LogFileLimitEnabled</code>
    is true and <code>LogRotationType</code> is either <code>Size</code> or <code>Time</code>.</p> '
  name: LogFileCount
  obsolete: 9.0.0.0
  restartNeeded: true
  supported: false
  type: int
  writable: true
- defaultValue:
    value:
      value: 60
  descriptionHTML: '<p>The interval at which this server checks the size of the buffer
    that stores HTTP requests. When the buffer exceeds the size that is specified
    in the Log Buffer Size field, the server writes the data to the HTTP request log
    file.</p>  <p>The interval (in seconds) at which the server checks the size of
    the buffer that stores HTTP requests. When the buffer exceeds the size that is
    specified in the <code>LogFileBufferKBytes</code> property, the server writes
    the data in the buffer to the HTTP request log file.</p> '
  name: LogFileFlushSecs
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: int
  writable: true
- defaultValue:
    value:
      value: common
  deprecated: '9.0.0.0 Use getWebServerLog().getLogFileFormat(). '
  descriptionHTML: '<p>The format of the HTTP log file. Both formats are defined by
    the W3C. With the <code>extended</code> log format, you use server directives
    in the log file to customize the information that the server records.</p>  <p>Specifies
    the format of the HTTP log file. Both formats are defined by the W3C. With the
    extended log format, you use server directives in the log file to customize the
    information that the server records.</p> '
  legalValues:
  - common
  - extended
  name: LogFileFormat
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 Use getWebServerLog().getNumberOfFilesLimited() '
  descriptionHTML: '<p>Indicates whether the number of files that this WebLogic Server
    retains to store old messages should be limited. After the server reaches this
    limit, it overwrites the oldest file.</p>  <p>Indicates whether a server will
    limit the number of log files that it creates when it rotates the log. The limit
    is based on <code>getLogFileCount</code>.</p> '
  name: LogFileLimitEnabled
  obsolete: 9.0.0.0
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: logs/access.log
  deprecated: '9.0.0.0 Use getWebServerLog().getFileName() '
  descriptionHTML: '<p>The name of the file that stores HTTP requests. If the pathname
    is not absolute, the path is assumed to be relative to the root directory of the
    machine on which this server is running.</p>  <p>The name of the file that stores
    the HTTP-request log. If the pathname is not absolute, the path is assumed to
    be relative to the server''s root directory.</p>  <p>This value is relevant only
    if HTTP logging is enabled.</p>  <p>The current logfile is always the one whose
    name equals value of the this attribute. If you have enabled log file rotation,
    when the current file exceeds the size or time limit, it is renamed.</p>  <p>To
    include a time and date stamp in the file name when the log file is rotated, add
    <code>java.text.SimpleDateFormat</code> variables to the file name. Surround each
    variable with percentage (<code>%</code>) characters.</p>  <p>For example, if
    the file name is defined to be <code>access_%yyyy%_%MM%_%dd%_%hh%_%mm%.log</code>,
    the log file will be named <code>access_yyyy_mm_dd_hh_mm.log</code>.</p>  <p>When
    the log file is rotated, the rotated file name contains the date stamp. For example,
    if the log file is rotated on 2 April, 2003 at 10:05 AM, the log file that contains
    the old messages will be named <code>access_2003_04_02_10_05.log</code>.</p>  <p>If
    you do not include a time and date stamp, the rotated log files are numbered in
    order of creation. For example, <code>access.log00007</code>.</p> '
  name: LogFileName
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 1440
  deprecated: '9.0.0.0 Use getWebServerLog().getFileTimeSpan() (hours) '
  descriptionHTML: '<p>The number of minutes at which this server saves old HTTP requests
    to another log file. This field is relevant only if you set Rotation Type to <code>date</code>.</p>  <p>The
    interval (in minutes) at which the server saves old HTTP requests to another log
    file. This value is relevant only if you use the <code>date</code>-based rotation
    type.</p> '
  name: LogRotationPeriodMins
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: int
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The start time for a time-based rotation sequence of the log
    file, in the format <code>MM-dd-yyyy-k:mm:ss</code>. (This field is only relevant
    if you set Rotation Type to <code>>date</code>>.)</p>  <p>Determines the start
    time for a time-based rotation sequence. At the time that this value specifies,
    the server renames the current log file. Thereafter, the server renames the log
    file at an interval that you specify in <code>LogRotationPeriodMins</code>.</p>  <p>Use
    the following format: <code>MM-dd-yyyy-k:mm:ss</code> where</p>  <ul> <li><code>MM</code>  <p>is
    the month as expressed in the Gregorian calendar</p> </li>  <li><code>dd</code>  <p>is
    the day of the month</p> </li>  <li><code>yyyy</code>  <p>is the year</p> </li>  <li><code>k</code>  <p>is
    the hour in a 24-hour format.</p> </li>  <li><code>mm</code>  <p>is the minute</p>
    </li>  <li><code>ss</code>  <p>is the second</p> </li> </ul>  <p>If the time that
    you specify has already past, then the server starts its file rotation immediately.</p>  <p>By
    default, rotation starts 24 hours from the time that you restart the server instance.</p> '
  name: LogRotationTimeBegin
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: size
  deprecated: '9.0.0.0 Use getWebServerLog().getRotationType() '
  descriptionHTML: '<p>The criteria for moving old log messages to a separate file.</p>  <p>Criteria
    for moving old HTTP requests to a separate log file:</p>  <ul> <li><code>size</code>  <p>.
    When the log file reaches the size that you specify in <code>MaxLogFileSizeKBytes</code>,
    the server renames the file as <code><i>LogFileName.n</i></code>.</p> </li>  <li><code>date</code>  <p>.
    At each time interval that you specify in <code>LogRotationPeriodMin</code>, the
    server renames the file as <code><i>LogFileName.n</i></code>.</p> </li> </ul>  <p>After
    the server renames a file, subsequent messages accumulate in a new file with the
    name that you specified in <code>LogFileName</code>.</p> '
  legalValues:
  - size
  - date
  name: LogRotationType
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '9.0.0.0 Use getWebServerLog().getLogTimeInGMT(). '
  descriptionHTML: '<p>Specifies whether the time stamps for HTTP log messages are
    in Greenwich Mean Time (GMT) regardless of the local time zone that the host computer
    specifies.</p>  <p>Use this method to comply with the W3C specification for Extended
    Format Log Files. The specification states that all time stamps for Extended Format
    log entries be in GMT.</p>  <p>This method applies only if you have specified
    the <code>extended</code> message format.</p> '
  name: LogTimeInGMT
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: true
    value:
      value: true
  deprecated: '9.0.0.0 Use getWebServerLog().isLoggingEnabled(). '
  descriptionHTML: '<p>Indicates whether this server logs HTTP requests. (The remaining
    fields on this page are relevant only if you check this box.)</p>  <p>Gets the
    loggingEnabled attribute of the WebServerMBean object</p> '
  name: LoggingEnabled
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 5000
  deprecated: '9.0.0.0 Use getWebServerLog().getFileMinSize() '
  descriptionHTML: '<p>The maximum size (in kilobytes) of the HTTP log file. After
    the log file reaches this size, the server renames it as <code>LogFileName.n</code>.
    A value of 0 indicates that the log file can grow indefinitely. (This field is
    relevant only if you set Rotation Type to <code>size</code>.)</p>  <p>The size
    that triggers the server to move log messages to a separate file. After the log
    file reaches the specified size, the next time the server checks the file size,
    it will rename the current log file as <code><i>FileName.n</i></code> and create
    a new one to store subsequent messages.</p>  <p>This property is relevant only
    if you choose to rotate files by <code>size</code>.</p> '
  name: MaxLogFileSizeKBytes
  obsolete: 9.0.0.0
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: int
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The maximum post size this server allows for reading HTTP POST
    and PUT data in a servlet request.</p>  <p>A value less than 0 indicates an unlimited
    size.</p>  <p>Gets the maxPostSize attribute of the WebServerMBean object</p> '
  name: MaxPostSize
  type: int
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>Max Post Time (in seconds) for reading HTTP POST data in a
    servlet request. MaxPostTime &lt; 0 means unlimited</p>  <p>Gets the maxPostTimeSecs
    attribute of the WebServerMBean object</p> '
  name: MaxPostTimeSecs
  type: int
  writable: true
- defaultValue:
    value:
      value: 10000
  descriptionHTML: '<p>Max Request Parameter Count this server allows for reading
    maximum HTTP POST Parameters count in a servlet request.</p>  <p>Gets the maxRequestParameterCount
    attribute of the WebServerMBean object</p> '
  name: MaxRequestParameterCount
  type: int
  writable: true
- defaultValue:
    value:
      value: 10000
  deprecated: 'Use getMaxRequestParameterCount() '
  descriptionHTML: '<p>Max Request Parameter Count this server allows for reading
    maximum HTTP POST Parameters count in a servlet request.</p>  <p>Gets the maxRequestParamterCount
    attribute of the WebServerMBean object</p> '
  exclude: true
  name: MaxRequestParamterCount
  supported: false
  type: int
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The maximum size of a single header (name and value) that this
    server allows in a servlet request.</p>  <p>A value less than 0 indicates an unlimited
    size.</p>  <p>Gets the maxSingleHeaderSize attribute of the WebServerMBean object.</p> '
  name: MaxSingleHeaderSize
  type: int
  writable: true
- defaultValue:
    value:
      value: 131072
  descriptionHTML: '<p>The maximum total headers size this server allows for reading
    HTTP headers in a servlet request.</p>  <p>A value less than 0 indicates an unlimited
    size.</p>  <p>Gets the maxTotalHeadersSize attribute of the WebServerMBean object.</p> '
  name: MaxTotalHeadersSize
  type: int
  writable: true
- defaultValue:
    value:
      value: 503
  descriptionHTML: '<p>Get the response code to be used when an application is overloaded.
    An application can get overloaded when the number of pending requests has reached
    the max capacity specified in the WorkManager or when the server is low on memory.
    The low memory condition is determined using OverloadProtectionMBean.getFreeMemoryPercentLowThreshold().</p> '
  name: OverloadResponseCode
  type: int
  writable: true
- defaultValue:
    secureModeValue:
      value: 30
    value:
      value: 30
  descriptionHTML: '<p>Timeout (in seconds) for reading HTTP POST data in a servlet
    request. If the POST data is chunked, the amount of time the server waits between
    the end of receiving the last chunk of data and the end of receiving the next
    chunk of data in an HTTP POST before it times out. (This is used to prevent denial-of-service
    attacks that attempt to overload the server with POST data.)</p>  <p>Gets the
    postTimeoutSecs attribute of the WebServerMBean object</p> '
  name: PostTimeoutSecs
  type: int
  writable: true
- defaultValue:
    secureModeValue:
      value: false
    value:
      value: false
  descriptionHTML: '<p>Indicates whether this server name is sent with the HTTP response.
    (This is useful for wireless applications where there is limited space for headers.)</p>  <p>Indicates
    whether this server instance includes its name and WebLogic Server version number
    in HTTP response headers.</p> '
  name: SendServerHeaderEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates whether the singleSignonDisabled attribute is enabled</p> '
  name: SingleSignonDisabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>Adds a URL connection factory resource into JNDI.</p> '
  excludeFromRest: No default REST mapping for Map
  name: URLResource
  supported: false
  type: java.util.Map
  writable: true
- defaultValue:
    secureModeValue:
      value: false
    value:
      value: false
  descriptionHTML: ' '
  name: UseHeaderEncoding
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Enables use of the highest compatible HTTP protocol version-string
    in the response. E.g. HTTP spec suggests that HTTP/1.1 version-string should be
    used in response to a request using HTTP/1.0. This does not necessarily affect
    the response format.</p> '
  name: UseHighestCompatibleHTTPVersion
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates whether the session ID should include JVM information.
    (Checking this box may be necessary when using URL rewriting with WAP devices
    that limit the size of the URL to 128 characters, and may also affect the use
    of replicated sessions in a cluster.) When this box is selected, the default size
    of the URL will be set at 52 characters, and it will not contain any special characters.</p>  <p>Gets
    the WAPEnabled attribute of the WebServerMBean object</p> '
  name: WAPEnabled
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: 'Returns the Log settings for the WebServer/VirtualHost. '
  name: WebServerLog
  relationship: containment
  type: weblogic.management.configuration.WebServerLogMBean
- defaultValue: {
    }
  descriptionHTML: '<p>Set the WorkManager name that will be used to execute servlet
    requests that need their session retrieved from a remote server since the current
    server is neither the primary nor the secondary for the request. This can happen
    if request stickness is lost for example due to hardware LB configuration issues.
    Creating a dedicated WorkManager with a max threads constraint ensures that threads
    are available to service requests for which the current server is the primary.</p> '
  exclude: true
  name: WorkManagerForRemoteSessionFetching
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 512
  descriptionHTML: '<p>The default size of the blocks to be written to the network
    layer.</p>  <p>Gets the writeChunkBytes attribute of the WebServerMBean object</p> '
  name: WriteChunkBytes
  type: int
roles:
  allowed:
  - Deployer
