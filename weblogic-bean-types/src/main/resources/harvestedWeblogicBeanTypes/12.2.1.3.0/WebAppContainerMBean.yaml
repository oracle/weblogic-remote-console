# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.configuration.ConfigurationMBean
descriptionHTML: '<p>This MBean is used to specify domain-wide defaults for the WebApp
  container. In general, these properties can be overridden at the cluster level (in
  ClusterMBean, if the same property is present there), the server level (in ServerMBean,
  if the same property is present there) or for a specific Web application (in weblogic.xml).</p> '
name: weblogic.management.configuration.WebAppContainerMBean
properties:
- defaultValue:
    secureModeValue:
      value: false
    value:
      value: false
  descriptionHTML: '<p>In the security-constraints elements defined in a web application''s
    web.xml deployment descriptor, the auth-constraint element indicates the user
    roles that should be permitted access to this resource collection. Here role-name
    = "*" is a compact syntax for indicating all roles in the Web application. In
    previous releases, role-name = "*" was treated as all users/roles defined in the
    realm.</p>  <p>This parameter is a backward-compatibility switch to restore old
    behavior. Default behavior is one required by the specification, meaning all roles
    defined in the web application.</p>  <p>If set, the value defined in weblogic.xml
    (container-descriptor -> allow-all-roles) takes precedence (if set) over this
    value. </p> '
  name: AllowAllRoles
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: true
    value:
      value: true
  descriptionHTML: '<p>Specifies whether the AuthCookie feature is enabled or not.</p> '
  name: AuthCookieEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Global property to determine if we need to generate a new SessionID
    after authentication. When this property is set to "false", the previous sessionID
    will be retained even after authorization. </p> '
  name: ChangeSessionIDOnAuthentication
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: false
    value:
      value: false
  descriptionHTML: '<p>Specifies whether or not to honor the WL-Proxy-Client-Cert
    header coming with the request. </p> '
  name: ClientCertProxyEnabled
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: false
    value:
      value: false
  descriptionHTML: '<p> Indicates whether or not to apply filters to dispatched requests.
    This is a backward compatibility flag. Until version 8.1, WebLogic Server applied
    ServletFilters (if configured for the web application) on request dispatches (and
    includes/forwards). Servlet 2.4 has introduced the "Dispatcher" element to make
    this behavior explicit. The default value is Dispatcher=REQUEST. In order to be
    compliant with the Java EE specification, the default value for FilterDispatchedRequestsEnabled
    is false beginning with WebLogic Server 9.0. Note that if you are using old descriptors
    (meaning web.xml does not have version=2.4), then WebLogic Server automatically
    uses FilterDispatchedRequestsEnabled = true for the web applications, unless filter-dispatched-requests-enabled
    is explicitly set to false in weblogic.xml. This means that old applications will
    work fine without any modification. Additionally, during migration of old domains
    to the 9.0 domain, the migration plug-in automatically sets this flag to true.
    </p> '
  name: FilterDispatchedRequestsEnabled
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Get the GzipCompressionMBean, which represents GZIP compression
    support configuration. </p> '
  name: GzipCompression
  relationship: containment
  type: weblogic.management.configuration.GzipCompressionMBean
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p> Returns the value of HttpTraceSupportEnabled. </p> '
  name: HttpTraceSupportEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Global property to determine the behavior of the JSP compiler.
    When this property set to "true", the JSP compiler throws a translation error
    for JSPs that do not conform to the JSP2.0 specification. This property exists
    for backward compatibility.</p> '
  name: JSPCompilerBackwardsCompatible
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p> Global property to determine the behavior of monitoring in
    JAX-RS applications. When the property is set to <code>true</code> (or not set)
    the monitoring is turned on (if not overridden by properties set directly in application).
    If the property is set to <code>false</code> the monitoring for all JAX-RS applications
    is disabled. </p> '
  name: JaxRsMonitoringDefaultBehavior
  type: boolean
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The maximum post size this server allows for reading HTTP POST
    data in a servlet request. A value less than 0 indicates an unlimited size.</p> '
  name: MaxPostSize
  type: int
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>Maximum post time (in seconds) for reading HTTP POST data in
    a servlet request. MaxPostTime &lt; 0 means unlimited</p> '
  name: MaxPostTimeSecs
  type: int
  writable: true
- defaultValue:
    value:
      value: 10000
  descriptionHTML: '<p>The maximum request parameter count this server allows for
    reading maximum HTTP POST parameters count in a servlet request.</p> <p/> <p>Gets
    the maxRequestParameterCount attribute of the WebServerMBean object.</p> '
  name: MaxRequestParameterCount
  type: int
  writable: true
- defaultValue:
    value:
      value: 10000
  deprecated: 'Use getMaxRequestParameterCount() '
  descriptionHTML: '<p>The maximum request parameter count this server allows for
    reading maximum HTTP POST parameters count in a servlet request.</p> <p/> <p>Gets
    the maxRequestParamterCount attribute of the WebServerMBean object.</p> '
  exclude: true
  name: MaxRequestParamterCount
  supported: false
  type: int
  writable: true
- defaultValue:
    value:
      value: -1
  descriptionHTML: '<p>The maximum size of a single header (name and value) this server
    allows in a servlet request.</p>  <p>A value less than 0 indicates an unlimited
    size.</p> '
  name: MaxSingleHeaderSize
  type: int
  writable: true
- defaultValue:
    value:
      value: 131072
  descriptionHTML: '<p>The maximum total headers size this server allows for reading
    HTTP headers in a servlet request.</p>  <p>A value less than 0 indicates an unlimited
    size.</p> '
  name: MaxTotalHeadersSize
  type: int
  writable: true
- defaultValue:
    value:
      value: ./config/mimemappings.properties
  descriptionHTML: '<p>Returns the name of the file containing mime-mappings for the
    domain.</p> <p>The Format of the file should be: extension=mime-type </p> <p>
    For Example:</p> <p>htm=text/html</p> <p>gif=image/gif</p> <p>jpg=image/jpeg</p>
    <p/> <p>If this file does not exist, WebLogic Server uses an implicit mime-mapping
    set of mappings defined in weblogic.utils.http.HttpConstants (DEFAULT_MIME_MAPPINGS).
    To remove a mapping defined in implicit map, set it to blank. </p> '
  name: MimeMappingFile
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p> When OptimisticSerialization is turned on, WebLogic Server
    does not serialize-deserialize context and request attributes upon getAttribute(name)
    when a request gets dispatched across servlet contexts. This means you will need
    to make sure that the attributes common to web applications are scoped to a common
    parent classloader (they are application-scoped) or placed in the system classpath
    if the two web applications do not belong to the same application. When OptimisticSerialization
    is turned off (which is the default), WebLogic Server does serialize-deserialize
    context and request attributes upon getAttribute(name) to avoid the possibility
    of ClassCastExceptions. The value of OptimisticSerialization can also be overridden
    for specific web applications by setting the optimistic-serialization value in
    weblogic.xml. </p> '
  name: OptimisticSerialization
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>This parameter is used to enable overload protection in the
    web application container against low memory conditions. When a low memory situation
    occurs, new session creation attempts will result in weblogic.servlet.SessionCreationException.
    The application code needs to catch this exception and take proper action. Alternatively
    appropriate error-pages can be configured in web.xml against weblogic.servlet.SessionCreationException.
    This check is performed only on memory and replicated sessions. </p> '
  name: OverloadProtectionEnabled
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p> Returns the P3P header value that will be sent with all responses
    for HTTP requests (if non-null). The value of this header points to the location
    of the policy reference file for the website.</p> <p/> <p>Alternatively, a servlet
    filter can be used to set the P3P header.</p> '
  name: P3PHeaderValue
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    secureModeValue:
      value: 30
    value:
      value: 30
  descriptionHTML: '<p>The amount of time this server waits between receiving chunks
    of data in an HTTP POST data before it times out. (This is used to prevent denial-of-service
    attacks that attempt to overload the server with POST data.)</p> '
  name: PostTimeoutSecs
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Beginning with the 9.0 release, the FORM/BASIC authentication
    behavior has been modified to conform strictly to the Java EE Specification. If
    a user has logged-in but does not have privileges to access a resource, the 403
    (FORBIDDEN) page will be returned. Turn this flag on to enable the old behavior,
    which was to return the user to the login form.</p> '
  name: ReloginEnabled
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p> The retain-original-url property is used in FORM based authentication
    scenarios. When this property is set to true, after a successful authentication,
    WebLogic Server will redirect back to the web resource (page/servlet) retaining
    the protocol (http/https) used to access the protected resource in the original
    request. If set to false (which is the default value), WebLogic Server will redirect
    back to the protected resource using the current protocol. The retain-original-url
    value can also be specified at per web application level in weblogic.xml. The
    value in weblogic.xml, if specified, overrides the domain level value.</p> '
  name: RetainOriginalURL
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Global property which determines the behavior of the JSP compiler
    when a jsp:param attribute "name" has a request time value. Without this property
    set to "true", the JSP compiler throws an error for a JSP using a request time
    value for the "name" attribute as mandated by the JSP 2.0 specification. This
    property exists for backward compatibility.</p> '
  name: RtexprvalueJspParamName
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p> ServletAuthenticationFormURL is used for backward compatibility
    with previous releases of Weblogic Server. If ServletAuthenticationFormURL is
    set to true (default), then ServletAuthentication.getTargetURLForFormAuthentication()
    and HttpSession.getAttribute(AuthFilter.TARGET_URL) will return the URL of the
    protected target resource. If set to false, the above APIs will return the URI
    of the protected target resource. By default, the value is set to true.(new method
    added in 9.0.0.1) </p> '
  name: ServletAuthenticationFormURL
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    productionModeValue:
      value: -1
    value:
      value: 1
  descriptionHTML: ' '
  name: ServletReloadCheckSecs
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Global property to determine the behavior of getRealPath()
    for archived web applications. When this property is set to "true", getRealPath()
    will return the canonical path of the resource files. </p> '
  name: ShowArchivedRealPathEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates whether the session ID should include JVM information.
    (Checking this box may be necessary when using URL rewriting with WAP devices
    that limit the size of the URL to 128 characters, and may also affect the use
    of replicated sessions in a cluster.) When this box is selected, the default size
    of the URL will be set at 52 characters, and it will not contain any special characters.</p> '
  name: WAPEnabled
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: false
    value:
      value: false
  descriptionHTML: '<p>Specifies whether or not the proprietary <code>WL-Proxy-Client-IP</code>
    header should be honored. (This is needed only when WebLogic Server plug-ins are
    configured.)</p> '
  name: WeblogicPluginEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Indicates whether or not WorkContextPropagation is enabled.
    By default, it is turned on. There is a little overhead involved in propagating
    WorkContexts. Therefore, if you don''t want WorkContext propagation, turn this
    value off in production environments. </p> '
  name: WorkContextPropagationEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: NONE
  descriptionHTML: '<p> WebLogic Server uses the X-Powered-By HTTP header, as recommended
    by the Servlet 3.1 specification, to publish its implementation information.</p>
    <p/> <p> Following are the options: </p> <ul> <li>"NONE" (default):  X-Powered-By
    header will not be sent </li> <li>"SHORT":           "Servlet/3.1 JSP/2.3"  </li>
    <li>"MEDIUM":          "Servlet/3.1 JSP/2.3 (WebLogic/12.2)" </li> <li>"FULL":            "Servlet/3.1
    JSP/2.3 (WebLogic/12.2 JDK/1.8)" </li> </ul> '
  legalValues:
  - NONE
  - SHORT
  - MEDIUM
  - FULL
  name: XPoweredByHeaderLevel
  type: java.lang.String
  writable: true
