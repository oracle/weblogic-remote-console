# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.management.configuration.CommonLogMBean
derivedTypes: [
  ]
descriptionHTML: '<p>Configures the threshold severity level and filter settings for
  logging output.</p> <p>Specifies whether the server logging is based on a Log4j
  implementation or the default Java Logging APIs.</p> <p>Redirects the JVM stdout
  and stderr output to the registered log destinations.</p> '
name: weblogic.management.configuration.LogMBean
properties:
- defaultValue: {
    }
  descriptionHTML: '<p>The filter configuration for log events being sent to the domain
    log.</p> '
  name: DomainLogBroadcastFilter
  relationship: reference
  type: weblogic.management.configuration.LogFilterMBean
  writable: true
- defaultValue:
    value:
      value: Notice
  descriptionHTML: '<p>The minimum severity of log messages going to the domain log
    from this server''s log broadcaster. Messages with a lower severity than the specified
    value will not be published to the domain log.</p> '
  legalValues:
  - Debug
  - Info
  - Warning
  - Error
  - Notice
  - Critical
  - Alert
  - Emergency
  - 'Off'
  name: DomainLogBroadcastSeverity
  type: java.lang.String
  writable: true
- defaultValue:
    productionModeValue:
      value: 10
    value:
      value: 1
  descriptionHTML: '<p>Broadcasts log messages to the domain log in batch mode.</p>  <p>The
    size of the buffer for log messages that are sent to the domain log. The buffer
    is maintained on the Managed Server and is broadcasted to the domain log when
    it is full.</p>  <p>If you notice performance issues due to a high rate of log
    messages being generated, set this value higher. This will cause the buffer to
    be broadcasted less frequently from the Managed Server to the domain log. In production
    environments, it is not recommended to set the buffer size lower than the production
    default of 10.</p> '
  name: DomainLogBroadcasterBufferSize
  type: int
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '12.1.3.0 '
  descriptionHTML: '<p>Specifies whether the server logging is based on a Log4j implementation.
    By default, WebLogic logging uses an implementation based on the Java Logging
    APIs which are part of the JDK.</p>  <p>Applications that use the WebLogic Message
    Catalog framework or the NonCatalogLogger will not be affected by the underlying
    Logging implementation.</p> '
  name: Log4jLoggingEnabled
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The filter configuration for the server log file.</p>  <p>A
    filter configuration defines simple filtering rules to limit the volume of log
    messages written to the log file.</p> '
  name: LogFileFilter
  relationship: reference
  type: weblogic.management.configuration.LogFilterMBean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: 'Enable or disable log monitoring. '
  name: LogMonitoringEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 30
  descriptionHTML: 'Timer interval in seconds to check the counts of messages logged
    during the interval. '
  name: LogMonitoringIntervalSecs
  type: int
  writable: true
- defaultValue:
    value:
      value: 1000
  descriptionHTML: 'Maximum number of unique message signatures that will be monitored
    during the throttle interval. '
  name: LogMonitoringMaxThrottleMessageSignatureCount
  type: int
  writable: true
- defaultValue:
    value:
      value: 50
  descriptionHTML: 'Cut-off length of the log message for evaluation during throttle
    period. The log message length is truncated to this length for evaluation of repeated
    logging events. '
  name: LogMonitoringThrottleMessageLength
  type: int
  writable: true
- defaultValue:
    value:
      value: 1500
  descriptionHTML: 'The threshold number of messages logged during the evaluation
    period which enables or disables the throttling. <p> Once throttling is enabled
    messages with the same repeating message signatures are throttled. Every nth repeated
    message specified by this attribute is logged in a monitoring cycle. </p> '
  name: LogMonitoringThrottleThreshold
  type: int
  writable: true
- defaultValue: {
    }
  deprecated: '12.1.3.0 '
  descriptionHTML: '<p>The filter configuration for messages that are stored in the
    log memory buffer. By default, all log messages are cached.</p> '
  name: MemoryBufferFilter
  relationship: reference
  supported: false
  type: weblogic.management.configuration.LogFilterMBean
  writable: true
- defaultValue:
    value:
      value: Trace
  deprecated: '12.1.3.0 '
  descriptionHTML: '<p>The minimum severity of log messages going to the memory buffer
    of recent log events. Messages with a lower severity than the specified value
    will not be cached in the buffer.</p> '
  legalValues:
  - Trace
  - Debug
  - Info
  - Warning
  - Error
  - Notice
  - Critical
  - Alert
  - Emergency
  - 'Off'
  name: MemoryBufferSeverity
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    productionModeValue:
      value: 500
    value:
      value: 10
  deprecated: '12.1.3.0 '
  descriptionHTML: '<p>The size of the memory buffer that holds the last n log records.
    This is used to support viewing the most recent log record entries (tail viewing)
    from the WebLogic Administration Console.</p> '
  name: MemoryBufferSize
  supported: false
  type: int
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Specifies the platform logger and the associated level names
    set through the WebLogic Server configuration.</p>  <p>Note the following behavior:</p>
    <ul> <li>The configuration is applicable for <code>java.util.logging.Logger</code>
    instances in the JDK''s default global LogManager.</li> <li>WebLogic Server loggers
    are configured in terms of <code>weblogic.logging.Severities</code> through the
    <code>LoggerSeverities</code> attribute. These loggers are not available in the
    JDK''s default global LogManager.</li> <li>If your WebLogic domain includes Oracle
    JRF and is configured to use Oracle Diagnostic Logging (ODL), the <code>java.util.logging</code>
    levels set on the <code>LogMBean.PlatformLoggerLevels</code> attribute are ignored.
    For information about how to configure ODL logging for JDK platform loggers, see
    <a href="http://www.oracle.com/pls/topic/lookup?ctx=fmw122130&amp;id=ASADM215"
    rel="noopener noreferrer" target="_blank">Managing Log Files and Diagnostics Data</a>
    in <i>Administering Oracle Fusion Middleware</i>.</li> </ul> '
  name: PlatformLoggerLevels
  type: java.util.Properties
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Specifies whether the stderr of the JVM in which a WebLogic
    Server instance runs is redirected to the WebLogic Logging system. When this attribute
    is enabled, the stderr content is published to all the registered log destinations,
    such as the server terminal console and log file.</p>  <p>Note that JVM messages
    are redirected asynchronously. In the event of an overload situation, these messages
    may be dropped. As a best practice, Oracle recommends using one of the supported
    logging APIs instead.</p> '
  name: RedirectStderrToServerLogEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Specifies whether the stdout of the JVM in which a WebLogic
    Server instance runs is redirected to the WebLogic logging system. When this attribute
    is enabled, the stdout content is published to all the registered log destinations,
    such as the server terminal console and log file.</p>  <p>Note that JVM messages
    are redirected asynchronously. In the event of an overload situation, these messages
    may be dropped. As a best practice, Oracle recommends using one of the supported
    logging APIs instead.</p> '
  name: RedirectStdoutToServerLogEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '12.1.3.0 '
  descriptionHTML: '<p>Specifies whether application log messages are propagated to
    the parent node in the Logger tree or to the WebLogic Server log by means of the
    Logging Bridge. By default, this attribute is disabled, which results in application
    log messages being propagated to the WebLogic Server log.</p>  <p>Note the following
    behavior:</p> <ul> <li>If WebLogic Server is configured to be based upon the the
    Java Logging API (the default), the Logging Bridge is made available as a <code>java.util.logging.Handler</code>
    object.</li> <li>If  WebLogic Server is configured to be based upon a Log4j implementation,
    the Logging Bridge is made available as a <code>org.apache.log4j.Appender</code>
    object.</li> <li>If the <code>ServerLoggingBridgeUseParentLoggersEnabled</code>
    is disabled, applications that use either the Java Logging API or Log4j have their
    log messages redirected by the Logging Bridge to the WebLogic Server log. </li>
    <li>If the <code>ServerLoggingBridgeUseParentLoggersEnabled</code> is enabled,
    applications that use the Java Logging API have their log messages propagated
    to the parent node in the global Java Logging Logger tree.</li> <li>If the <code>ServerLoggingBridgeUseParentLoggersEnabled</code>
    is enabled, applications that use Log4j have their log messages propagated to
    the parent node in the Log4j Logger tree.</li> </ul> '
  name: ServerLoggingBridgeUseParentLoggersEnabled
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The filter configuration for log events being sent to the standard
    out.</p> '
  name: StdoutFilter
  relationship: reference
  type: weblogic.management.configuration.LogFilterMBean
  writable: true
