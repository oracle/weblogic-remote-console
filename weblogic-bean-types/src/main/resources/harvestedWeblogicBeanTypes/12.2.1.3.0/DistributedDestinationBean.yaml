# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.j2ee.descriptor.wl.NamedEntityBean
derivedTypes:
- weblogic.j2ee.descriptor.wl.DistributedQueueBean
- weblogic.j2ee.descriptor.wl.DistributedTopicBean
descriptionHTML: 'This bean contains all the attributes of distributed destinations
  that are common between distributed queues and distributed topics. '
name: weblogic.j2ee.descriptor.wl.DistributedDestinationBean
properties:
- defaultValue: {
    }
  descriptionHTML: '<p>The name used to bind a virtual destination to the JNDI tree.
    Applications can use the JNDI name to look up the virtual destination.</p> <p>If
    not specified, then the destination is not bound into the JNDI namespace.</p>
    <p> '
  name: JNDIName
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: Round-Robin
  descriptionHTML: '<p>Determines the load balancing policy for producers sending
    messages to a distributed destination in order to balance the message load across
    the members of the distributed set. </p>  <ul> <li> <b>Round-Robin</b> - The system
    maintains an ordering of physical topic members within the set by distributing
    the messaging load across the topic members one at a time in the order that they
    are defined in the configuration file. Each WebLogic Server maintains an identical
    ordering, but may be at a different point within the ordering. If weights are
    assigned to any of the topic members in the set, then those members appear multiple
    times in the ordering. </li>   <li> <b>Random</b> - The weight assigned to the
    topic members is used to compute a weighted distribution for the members of the
    set. The messaging load is distributed across the topic members by pseudo-randomly
    accessing the distribution. In the short run, the load will not be directly proportional
    to the weight. In the long run, the distribution will approach the limit of the
    distribution. A pure random distribution can be achieved by setting all the weights
    to the same value, which is typically set to 1.</li> </ul> '
  legalValues:
  - Round-Robin
  - Random
  name: LoadBalancingPolicy
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: All
  descriptionHTML: '<p> The SAF Export Policy controls which applications can send
    JMS messages to this destination through Store-and-Forward.</p>  <ul>  <li> <b>All</b>
    - This destination allows everyone to send JMS messages to it through SAF.</li>  <li>
    <b>None</b> - This destination does not allow anyone to send JMS messages from
    a remote server to it through SAF.</li>  </ul> <p> This attribute is dynamically
    configurable. A dynamic change of this attribute will affect only messages sent
    after the update has been made. </p> '
  legalValues:
  - All
  - None
  name: SAFExportPolicy
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: Hash
  descriptionHTML: '<p>Gets the "unit-of-order-routing" element. </p>  <p>A WLMessageProducer
    with Unit of Order  uses the "unit-of-order-routing" element rather than the "load-balancing-policy"
    criteria to select the Distributed Destination Member. </p>  <p>Unit of Order
    may have been set programmatically with WLProducer, or administratively on the
    ConnectionFactory or Destination.  <ul> <li> <b>Hash</b> - producers will compute
    the Distributed Destination Member from the hash code of the Unit of Order. <li>
    <b>PathService</b> - the configured Path Service will determine the Distributed
    Destination Member. </ul> </p> '
  legalValues:
  - Hash
  - PathService
  name: UnitOfOrderRouting
  restartNeeded: true
  type: java.lang.String
  writable: true
roles:
  allowed:
  - Deployer
