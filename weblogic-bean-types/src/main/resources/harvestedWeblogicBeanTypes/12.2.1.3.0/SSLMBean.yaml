# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.management.configuration.ConfigurationMBean
derivedTypes: [
  ]
descriptionHTML: '<p>This MBean represents the configuration of the SSL protocol.</p> '
name: weblogic.management.configuration.SSLMBean
properties:
- defaultValue:
    value:
      value: true
  descriptionHTML: ' '
  name: AcceptKSSDemoCertsEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Test if the AllowUnEncryptedNullCipher is enabled</p> <p>see
    <code>setAllowUnencryptedNullCipher(boolean enable)</code> for the NullCipher
    feature.</p> '
  name: AllowUnencryptedNullCipher
  type: boolean
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The name of the Java class that implements the <code>weblogic.security.acl.CertAuthenticator</code>
    class, which is deprecated in this release of WebLogic Server. This field is for
    Compatibility security only, and is only used when the Realm Adapter Authentication
    provider is configured.</p>  <p>The <code>weblogic.security.acl.CertAuthenticator</code>
    class maps the digital certificate of a client to a WebLogic Server user. The
    class has an <code>authenticate()</code> method that WebLogic Server calls after
    validating the digital certificate presented by the client.</p> '
  name: CertAuthenticator
  obsolete: 'true'
  restartNeeded: true
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 3
  descriptionHTML: '<p>The number of certificates held that have not been redeemed
    by tokens.</p> '
  exclude: true
  name: CertificateCacheSize
  obsolete: 'true'
  restartNeeded: true
  supported: false
  type: int
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>Indicates the cipher suites being used on a particular WebLogic
    Server.</p>  <p>The strongest negotiated cipher suite is chosen during the SSL
    handshake. The set of cipher suites used by default by JSEE depends on the specific
    JDK version with which WebLogic Server is configured.</p>  <p>For a list of possible
    values, see <a href="http://www.oracle.com/pls/topic/lookup?ctx=fmw122130&amp;id=SECMG502"
    rel="noopener noreferrer" target="_blank">Cipher Suites</a>.</p> '
  name: Ciphersuites
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: 'Determines the alias of the client SSL certificate to be used
    as identity for outbound SSL connections. The certificate is assumed to be stored
    in the server configured keystore. <p/> Note that to use the client SSL certificate,
    <code>setUseClientCertForOutbound</code> must be enabled. '
  name: ClientCertAlias
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The passphrase used to retrieve the private key for the client
    SSL certificate specified in <code>getClientCertAlias</code> from the server configured
    keystore. This passphrase is assigned to the private key when the private key
    is generated.</p>  <p>Note that this attribute is usually used when outbound SSL
    connections specify a client SSL certificate identity.</p>  <p>Note that when
    you get the value of this attribute, WebLogic Server does the following:</p>  <ol>
    <li>Retrieves the value of the <code>ClientCertPrivateKeyPassPhraseEncrypted</code>
    attribute.</li> <li>Decrypts the value and returns the unencrypted passphrase.</li>
    </ol> '
  encrypted: true
  name: ClientCertPrivateKeyPassPhrase
  type: java.lang.String
  writable: true
- array: true
  defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The encrypted passphrase used to retrieve the private key for
    the client SSL certificate specified in <code>getClientCertAlias</code> from the
    server configured keystore. This passphrase is assigned to the private key when
    the private key is generated.</p>  <p>To compare a password that a user enters
    with the encrypted value of this attribute, go to the same WebLogic Server instance
    that you used to set and encrypt this attribute, and use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the user-supplied password. Then compare the encrypted values.</p>  <p>Note
    that this attribute is usually used when outbound SSL connections specify a client
    SSL certificate identity.</p> '
  encrypted: true
  name: ClientCertPrivateKeyPassPhraseEncrypted
  type: byte
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates whether or not clients must present digital certificates
    from a trusted certificate authority to WebLogic Server.</p> '
  name: ClientCertificateEnforced
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: 'Indicate whether TLS client initiated secure renegotiation is
    accepted. '
  name: ClientInitSecureRenegotiationAccepted
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: true
    value:
      value: false
  descriptionHTML: '<p>Indicates whether the server can be reached through the default
    SSL listen port.</p>  <p>If the administration port is enabled for the WebLogic
    Server domain, then administrative traffic travels over the administration port
    and application traffic travels over the Listen Port and SSL Listen Port. If the
    administration port is disabled, then all traffic travels over the Listen Port
    and SSL Listen Port.</p> '
  name: Enabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 500
  descriptionHTML: '<p>Indicates the number of times WebLogic Server can use an exportable
    key between a domestic server and an exportable client before generating a new
    key. The more secure you want WebLogic Server to be, the fewer times the key should
    be used before generating a new key.</p> '
  name: ExportKeyLifespan
  type: int
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Not used.</p> '
  exclude: true
  name: HandlerEnabled
  obsolete: 'true'
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    secureModeValue:
      value: false
    value:
      value: false
  descriptionHTML: '<p>Specifies whether to ignore the installed implementation of
    the <code>weblogic.security.SSL.HostnameVerifier</code> interface (when this server
    is acting as a client to another application server).</p> '
  name: HostnameVerificationIgnored
  type: boolean
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The name of the class that implements the <code>weblogic.security.SSL.HostnameVerifier</code>
    interface.</p>  <p>This class verifies whether the connection to the host with
    the hostname from URL should be allowed. The class is used to prevent man-in-the-middle
    attacks. The <code>weblogic.security.SSL.HostnameVerifier</code> has a <code>verify()</code>
    method that WebLogic Server calls on the client during the SSL handshake.</p> '
  name: HostnameVerifier
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: KeyStores
  descriptionHTML: '<p>Indicates where SSL should find the server''s identity (certificate
    and private key) as well as the server''s trust (trusted CAs).</p>  <ul> <li>
    <p>If set to <code>KEYSTORES</code>, then SSL retrieves the identity and trust
    from the server''s keystores (that are configured on the Server).</p> </li>  <li>
    <p>If set to <code>FILES_OR_KEYSTORE_PROVIDERS</code>, then SSL first looks in
    the deprecated KeyStore providers for the identity and trust. If not found, then
    it looks in the flat files indicated by the SSL Trusted CA File Name, Server Certificate
    File Name, and Server Key File Name attributes.</p> </li> </ul>  <p>Domains created
    in WebLogic Server version 8.1 or later, default to <code>KEYSTORES</code>. Domains
    created before WebLogic Server version 8.1, default to <code>FILES_OR_KEYSTORE_PROVIDERS.</code></p> '
  legalValues:
  - KeyStores
  - FilesOrKeyStoreProviders
  name: IdentityAndTrustLocations
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: BuiltinSSLValidationOnly
  descriptionHTML: '<p>Indicates the client certificate validation rules for inbound
    SSL.</p>  <p>This attribute only applies to ports and network channels using 2-way
    SSL.</p> '
  legalValues:
  - BuiltinSSLValidationOnly
  - BuiltinSSLValidationAndCertPathValidators
  name: InboundCertificateValidation
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: 'Determines whether the SSL implementation in Weblogic Server is
    JSSE based. '
  name: JSSEEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Indicates whether or not the private key for the WebLogic Server
    has been encrypted with a password. This attribute is no longer used as of WebLogic
    Server version 7.0.</p>  <ul> <li> <p>If the attribute is set to <code>true,</code>
    the private key requires a password be supplied in order to use the key.</p> </li>  <li>
    <p>If the attribute is set to <code>false</code>, the private key is unencrypted
    and may be used without providing a password.</p> </li> </ul> '
  exclude: true
  name: KeyEncrypted
  obsolete: 'true'
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 7002
  descriptionHTML: '<p>The TCP/IP port at which this server listens for SSL connection
    requests.</p> '
  name: ListenPort
  type: int
  writable: true
- defaultValue:
    value:
      value: 25000
  descriptionHTML: '<p>Specifies the number of milliseconds that WebLogic Server waits
    for an SSL connection before timing out. SSL connections take longer to negotiate
    than regular connections.</p>  <p>If clients are connecting over the Internet,
    raise the default number to accommodate additional network latency.</p> '
  name: LoginTimeoutMillis
  type: int
  writable: true
- defaultValue:
    derivedDefault: true
  descriptionHTML: 'Get the minimum SSL/TLS protocol version currently configured. '
  name: MinimumTLSProtocolVersion
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: BuiltinSSLValidationOnly
  descriptionHTML: '<p>Indicates the server certificate validation rules for outbound
    SSL.</p>  <p>This attribute always applies to outbound SSL that is part of WebLogic
    Server (that is, an Administration Server talking to the Node Manager). It does
    not apply to application code in the server that is using outbound SSL unless
    the application code uses a <code>weblogic.security.SSL.ServerTrustManager</code>
    that is configured to use outbound SSL validation.</p> '
  legalValues:
  - BuiltinSSLValidationOnly
  - BuiltinSSLValidationAndCertPathValidators
  name: OutboundCertificateValidation
  type: java.lang.String
  writable: true
- defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>The string alias used to store and retrieve the outbound private
    key in the keystore. This private key is associated with either a server or a
    client digital certificate. This attribute value is derived from other settings
    and cannot be physically set.</p>  <p>The returned value is determined as follows:</p>
    <ul> <li>If the <code>isUseClientCertForOutbound</code> returns true, the value
    from <code>getClientCertAlias</code> is returned.</li> <li> Otherwise, the value
    from <code>getServerPrivateKeyAlias</code> is returned.</li> </ul> '
  name: OutboundPrivateKeyAlias
  type: java.lang.String
- defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>The passphrase used to retrieve the outbound private key from
    the keystore. This passphrase is assigned to the private key when it is generated.
    This attribute value is derived from other settings and cannot be physically set.</p>  <p>The
    returned value is determined as follows:</p> <ul> <li>If the <code>isUseClientCertForOutbound</code>
    returns true, the value from <code>getClientCertPrivateKeyPassPhrase</code> is
    returned.</li> <li> Otherwise, the value from <code>getServerPrivateKeyPassPhrase</code>
    is returned.</li> </ul> '
  encrypted: true
  name: OutboundPrivateKeyPassPhrase
  type: java.lang.String
- array: true
  defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>The passphrase used to retrieve the encrypted outbound private
    key from the keystore. This passphrase is assigned to the private key when it
    is generated. This attribute value is derived from other settings and cannot be
    physically set.</p>  <p>The returned value is determined as follows:</p> <ul>
    <li>If the <code>isUseClientCertForOutbound</code> returns true, the value from
    <code>getClientCertPrivateKeyPassPhraseEncrypted</code> is returned.</li> <li>
    Otherwise, the value from <code>getServerPrivateKeyPassPhraseEncrypted</code>
    is returned.</li> </ul> '
  encrypted: true
  name: OutboundPrivateKeyPassPhraseEncrypted
  type: byte
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Indicates whether warning messages are logged in the server
    log when SSL connections are rejected.</p> '
  name: SSLRejectionLoggingEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: 'Indicate whether SSLv2Hello is enabled '
  name: SSLv2HelloEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: server-certchain.pem
  deprecated: '7.0.0.0 server certificates (and chains) should be stored in keystores. '
  descriptionHTML: '<p>The full directory location and name of the file containing
    an ordered list of certificate authorities trusted by WebLogic Server.</p>  <p>The
    <code>.pem</code> file extension indicates that method that should be used to
    read the file. Note that as of WebLogic Server version 7.0, the digital certificate
    for WebLogic Server should not be stored in a file.</p> '
  name: ServerCertificateChainFileName
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: server-cert.der
  deprecated: '8.1.0.0 server certificates (and chains) should be stored in keystores. '
  descriptionHTML: '<p>The full directory location of the digital certificate file
    (<code>.der</code> or <code>.pem</code>) for the server.</p>  <p>The pathname
    should either be absolute or relative to the directory from which the server is
    booted. This field provides backward compatibility for security configurations
    that stored digital certificates in files.</p>  <p>The file extension ( <code>.der</code>
    or <code>.pem</code>) tells WebLogic Server how to read the contents of the file.</p> '
  name: ServerCertificateFileName
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: server-key.der
  deprecated: '8.1.0.0 private keys should be stored in keystores. '
  descriptionHTML: '<p>The full directory location of the private key file (<code>.der</code>
    or <code>.pem</code>) for the server.</p>  <p>The pathname should either be absolute
    or relative to the directory from which the server is booted. This field provides
    backward compatibility for security configurations that store private keys in
    files. For a more secure deployment, Oracle recommends saving private keys in
    keystores.</p>  <p>The file extension (<code>.der</code> or <code>.pem</code>)
    indicates the method that should be used to read the file.</p> '
  name: ServerKeyFileName
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The string alias used to store and retrieve the server''s private
    key in the keystore. This private key is associated with the server''s digital
    certificate.</p> '
  name: ServerPrivateKeyAlias
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The passphrase used to retrieve the server''s private key from
    the keystore. This passphrase is assigned to the private key when it is generated.</p> '
  encrypted: true
  name: ServerPrivateKeyPassPhrase
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The encrypted passphrase used to retrieve the server''s private
    key from the keystore. This passphrase is assigned to the private key when it
    is generated.</p>  <p>To set this attribute, use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the value. Then set this attribute to the output of the encrypt() method.</p>  <p>To
    compare a password that a user enters with the encrypted value of this attribute,
    go to the same WebLogic Server instance that you used to set and encrypt this
    attribute and use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the user-supplied password. Then compare the encrypted values.</p> '
  encrypted: true
  name: ServerPrivateKeyPassPhraseEncrypted
  type: byte
  writable: true
- defaultValue:
    value:
      value: trusted-ca.pem
  deprecated: '8.1.0.0 trusted CAs should be stored in keystores. '
  descriptionHTML: '<p>The full directory location of the file that specifies the
    certificate authorities trusted by the server.</p>  <p>The pathname should either
    be absolute or relative to the directory from which the server is booted. This
    field provides backward compatibility for security configurations that store trusted
    certificate authorities in files.</p>  <p>The file specified in this attribute
    can contain a single digital certificate or multiple digital certificates. The
    file extension ( <code>.der</code> or <code>.pem</code>) tells WebLogic Server
    how to read the contents of the file.</p> '
  name: TrustedCAFileName
  supported: false
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>The form of SSL that should be used.</p>  <p>By default, WebLogic
    Server is configured to use one-way SSL (implied by the <code>Client Certs Not
    Requested</code> value). Selecting <code>Client Certs Requested But Not Enforced</code>
    enables two-way SSL. With this option, the server requests a certificate from
    the client, but the connection continues if the client does not present a certificate.
    Selecting <code>Client Certs Requested And Enforced</code> also enables two-way
    SSL and requires a client to present a certificate. However, if a certificate
    is not presented, the SSL connection is terminated.</p> '
  name: TwoWaySSLEnabled
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: 'Determines whether to use the configured client SSL certificate
    as identity for outbound SSL connections. <p/> Note that to use a client SSL certificate,
    one must be specified in <code>setClientCertAlias</code>. '
  name: UseClientCertForOutbound
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  descriptionHTML: '<p>Enables the use of native Java libraries.</p>  <p>WebLogic
    Server provides a pure-Java implementation of the SSL protocol. Native libraries
    enhance the performance for SSL operations on the Solaris, Windows NT, and IBM
    AIX platforms.</p> '
  exclude: true
  name: UseJava
  obsolete: 'true'
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: 'Sets whether the client should use the server certificates/key
    as the client identity when initiating an outbound connection over https. '
  name: UseServerCerts
  type: boolean
  writable: true
