# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.configuration.ForeignJNDIObjectMBean
descriptionHTML: 'This class represents a JMS connection factory that resides on another
  server, and is accessed via JNDI. A remote connection factory can be used to refer
  to another instance of WebLogic JMS running in a different cluster or server, or
  a foreign JMS provider, as long as that provider supports JNDI. This MBean will
  always be a sub-element of the ForeignJMSServerMBean. '
name: weblogic.management.configuration.ForeignJMSConnectionFactoryMBean
properties:
- defaultValue: {
    }
  descriptionHTML: '<p>Enables the JMS connection testing mechanism that insures a
    connection created from this connection factory is still valid. If not checked,
    then the connection testing mechanism will be disabled.</p> '
  name: ConnectionHealthChecking
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: ' '
  name: LocalJNDIName
  nullable: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The password that will be used in conjunction with the user
    name specified in the "Username" attribute.  <p>As of 8.1 sp4, when you get the
    value of this attriubte, WebLogic Server does the following:</p> <ol><li>Retrieves
    the value of the <code>PasswordEncrypted</code> attribute. <li>Decrypts the value
    and returns the unencrypted password as a String. </ol>  <p>When you set the value
    of this attribute, WebLogic Server does the following:</p> <ol><li>Encrypts the
    value.</li> <li>Sets the value of the <code>PasswordEncrypted</code> attribute
    to the encrypted value.</li> </ol>  <p>Using <code>Password()</code> is a potential
    security risk because the String object (which contains the unencrypted password)
    remains in the JVM''s memory until garbage collection removes it and the memory
    is reallocated. Depending on how memory is allocated in the JVM, a significant
    amount of time could pass before this unencrypted data is removed from memory.</p>  <p>Instead
    of using this attribute, use <code>PasswordEncrypted</code>.</p> '
  encrypted: true
  name: Password
  nullable: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The encrypted password that will be used in conjunction with
    the user name specified in the "Username" attribute.</p>  <p>To set this attribute,
    use <code>weblogic.management.EncryptionHelper.encrypt()</code> to encrypt the
    value. Then set this attribute to the output of the encrypt() method.</p>  <p>To
    compare a password that a user enters with the encrypted value of this attribute,
    go to the same WebLogic Server instance that you used to set and encrypt this
    attribute and use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the user-supplied password. Then compare the encrypted values.</p> '
  name: PasswordEncrypted
  type: byte
  writable: true
- defaultValue: {
    }
  descriptionHTML: ' '
  name: RemoteJNDIName
  nullable: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The user name that will be passed when opening a connection
    to the remote JMS server (represented by this foreign JMS connection factory).
    If not set, then no user name will be used.</p> '
  name: Username
  nullable: true
  type: java.lang.String
  writable: true
