# Copyright (c) 2020, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

baseTypes:
- weblogic.management.configuration.DeploymentMBean
descriptionHTML: '<p>This bean defines a Jolt connection pool.</p> '
name: weblogic.management.configuration.JoltConnectionPoolMBean
properties:
- defaultValue:
    secureModeValue:
      value: null
  descriptionHTML: '<p>The application password for this Jolt connection pool. (This
    is required only when the security level in the Tuxedo domain is <code>USER_AUTH</code>,
    <code>ACL</code> or <code>MANDATORY_ACL</code>).</p> <p>As of 8.1 sp4, when you
    get the value of this attribute, WebLogic Server does the following:</p> <ol><li>Retrieves
    the value of the <code>ApplicationPasswordEncrypted</code> attribute.</li> <li>Decrypts
    the value and returns the unencrypted password as a String.</li> </ol>  <p>When
    you set the value of this attribute, WebLogic Server does the following:</p> <ol><li>Encrypts
    the value.</li> <li>Sets the value of the <code>ApplicationPasswordEncrypted</code>
    attribute to the encrypted value.</li> </ol> <p>Using this attribute (<code>ApplicationPassword</code>)
    is a potential security risk because the String object (which contains the unencrypted
    password) remains in the JVM''s memory until garbage collection removes it and
    the memory is reallocated. Depending on how memory is allocated in the JVM, a
    significant amount of time could pass before this unencrypted data is removed
    from memory.</p>  <p>Instead of using this attribute, use <code>ApplicationPasswordEncrypted</code>.</p> '
  encrypted: true
  getRoles:
    allowed:
    - Deployer
  name: ApplicationPassword
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue:
    secureModeValue:
      value: null
  descriptionHTML: '<p>The encrypted application password for this connection pool.</p>
    <p>To set this attribute, use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the value. Then set this attribute to the output of the encrypt() method.</p>  <p>To
    compare a password that a user enters with the encrypted value of this attribute,
    go to the same WebLogic Server instance that you used to set and encrypt this
    attribute and use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the user-supplied password. Then compare the encrypted values.</p> '
  encrypted: true
  getRoles:
    allowed:
    - Deployer
  name: ApplicationPasswordEncrypted
  restartNeeded: true
  type: byte
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The list of Jolt Server Listeners (JSLs) addresses that is
    used if the connection pool cannot estabilish connections to the Primary Addresses,
    or if the primary connections fail.</p>  <p>The format of each address is: <code>//hostname:port</code>.
    Multiple addresses should be separated by commas.</p>  <p>These JSLs need not
    reside on the same host as the primary JSLs.</p> '
  name: FailoverAddresses
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The encrypted identity passphrase.</p>  <p>When you get the
    value of this attribute, WebLogic Server does the following:</p> <ol><li>Retrieves
    the value of the <code>KeyPassPhraseEncrypted</code> attribute.</li> <li>Decrypts
    the value and returns the unencrypted password as a String.</li> </ol>  <p>When
    you set the value of this attribute, WebLogic Server does the following:</p> <ol><li>Encrypts
    the value.</li> <li>Sets the value of the <code>KeyPassPhraseEncrypted</code>
    attribute to the encrypted value.</li> </ol> <p>Using this attribute (<code>KeyPassPhrase</code>)
    is a potential security risk because the String object (which contains the unencrypted
    password) remains in the JVM''s memory until garbage collection removes it and
    the memory is reallocated. Depending on how memory is allocated in the JVM, a
    significant amount of time could pass before this unencrypted data is removed
    from memory.</p>  <p>Instead of using this attribute, use <code>KeyPassPhraseEncrypted</code>.</p> '
  encrypted: true
  name: KeyPassPhrase
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue:
    value:
      value: null
  descriptionHTML: '<p>Returns encrypted identity pass phrase.</p> '
  encrypted: true
  name: KeyPassPhraseEncrypted
  type: byte
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The path and file name of the keystore containing the private
    key used in SSL mutual authentication.</p> '
  name: KeyStoreName
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The encrypted identity keystore''s passphrase. If empty or
    null, then the keystore will be opened without a passphrase.</p>  <p>When you
    get the value of this attribute, WebLogic Server does the following:</p> <ol><li>Retrieves
    the value of the <code>KeyStorePassPhraseEncrypted</code> attribute.</li> <li>Decrypts
    the value and returns the unencrypted password as a String.</li> </ol>  <p>When
    you set the value of this attribute, WebLogic Server does the following:</p> <ol><li>Encrypts
    the value.</li> <li>Sets the value of the <code>KeyStorePassPhraseEncrypted</code>
    attribute to the encrypted value.</li> </ol> <p>Using this attribute (<code>KeyStorePassPhrase</code>)
    is a potential security risk because the String object (which contains the unencrypted
    password) remains in the JVM''s memory until garbage collection removes it and
    the memory is reallocated. Depending on how memory is allocated in the JVM, a
    significant amount of time could pass before this unencrypted data is removed
    from memory.</p>  <p>Instead of using this attribute, use <code>KeyStorePassPhraseEncrypted</code>.</p> '
  encrypted: true
  name: KeyStorePassPhrase
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue:
    value:
      value: null
  descriptionHTML: '<p>Returns encrypted pass phrase defined when creating the keystore.</p> '
  encrypted: true
  name: KeyStorePassPhraseEncrypted
  type: byte
  writable: true
- defaultValue:
    value:
      value: 1
  descriptionHTML: '<p>The maximum number of connections that can be made from this
    Jolt connection pool.</p> '
  name: MaximumPoolSize
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>The minimum number of connections to be added to this Jolt
    connection pool when WebLogic Server starts.</p> '
  name: MinimumPoolSize
  restartNeeded: true
  type: int
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The list of addresses for the primary Jolt Server Listeners
    (JSLs) on the Tuxedo system.</p>  <p>The format of each address is: <code>//hostname:port</code>.
    Multiple addresses should be separated by commas.</p> '
  name: PrimaryAddresses
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 0
  descriptionHTML: '<p>The number of seconds the client waits to receive a response
    before timing out.</p> '
  name: RecvTimeout
  restartNeeded: true
  type: int
  writable: true
- defaultValue:
    secureModeValue:
      value: true
    value:
      value: false
  descriptionHTML: '<p>Indicates whether this Jolt connection pool passes the connection
    pool''s security context (user name, password and other information) from the
    WebLogic Server user to the Tuxedo domain.</p>  <p>If you enable the connection
    pool to pass the security context, you must start the Jolt Service Handler (JSH)
    with the <code>-a</code> option. When the JSH gets a message with the caller''s
    identity, it calls <code>impersonate_user()</code> to get the appkey for the user.
    JSH caches the appkey, so the next time the caller makes a request, the appkey
    is retrieved from the cache and the request is forwarded to the service. A cache
    is maintained by each JSH, which means that there will be a cache maintained for
    all the session pools connected to the same JSH.</p>  <p>You must enable Security
    Context if Tuxedo requires secured connections.</p> '
  name: SecurityContextEnabled
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The path and file name of the keystore containing the trust
    certificates.</p> '
  name: TrustStoreName
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The encrypted trust keystore''s passphrase. If empty or null,
    then the keystore will be opened without a passphrase.</p>  <p>When you get the
    value of this attribute, WebLogic Server does the following:</p> <ol><li>Retrieves
    the value of the <code>TrustStorePassPhraseEncrypted</code> attribute.</li> <li>Decrypts
    the value and returns the unencrypted password as a String.</li> </ol>  <p>When
    you set the value of this attribute, WebLogic Server does the following:</p> <ol><li>Encrypts
    the value.</li> <li>Sets the value of the <code>TrustStorePassPhraseEncrypted</code>
    attribute to the encrypted value.</li> </ol> <p>Using this attribute (<code>TrustStorePassPhrase</code>)
    is a potential security risk because the String object (which contains the unencrypted
    password) remains in the JVM''s memory until garbage collection removes it and
    the memory is reallocated. Depending on how memory is allocated in the JVM, a
    significant amount of time could pass before this unencrypted data is removed
    from memory.</p>  <p>Instead of using this attribute, use <code>TrustStorePassPhraseEncrypted</code>.</p> '
  encrypted: true
  name: TrustStorePassPhrase
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue:
    value:
      value: null
  descriptionHTML: '<p>Returns encrypted pass phrase defined when creating the keystore.</p> '
  encrypted: true
  name: TrustStorePassPhraseEncrypted
  type: byte
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>A user name that applications specify to connect to this Jolt
    connection pool. If Security Context is enabled, this name must be the name of
    an authorized Tuxedo user. (Specifying a Tuxedo user name is required if the Tuxedo
    authentication level is <code>USER_AUTH</code>.)</p> '
  name: UserName
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The user password for this Jolt connection pool.</p> <p>As
    of 8.1 sp4, when you get the value of this attribute, WebLogic Server does the
    following:</p> <ol><li>Retrieves the value of the <code>UserPasswordEncrypted</code>
    attribute.</li> <li>Decrypts the value and returns the unencrypted password as
    a String.</li> </ol>  <p>When you set the value of this attribute, WebLogic Server
    does the following:</p> <ol><li>Encrypts the value.</li> <li>Sets the value of
    the <code>UserPasswordEncrypted</code> attribute to the encrypted value.</li>
    </ol> <p>Using this attribute (<code>UserPassword</code>) is a potential security
    risk because the String object (which contains the unencrypted password) remains
    in the JVM''s memory until garbage collection removes it and the memory is reallocated.
    Depending on how memory is allocated in the JVM, a significant amount of time
    could pass before this unencrypted data is removed from memory.</p>  <p>Instead
    of using this attribute, use <code>UserPasswordEncrypted</code>.</p> '
  encrypted: true
  getRoles:
    allowed:
    - Deployer
  name: UserPassword
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The user password for this connection pool.</p>  <p>To set
    this attribute, use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the value. Then set this attribute to the output of the encrypt() method.</p>  <p>To
    compare a password that a user enters with the encrypted value of this attribute,
    go to the same WebLogic Server instance that you used to set and encrypt this
    attribute and use <code>weblogic.management.EncryptionHelper.encrypt()</code>
    to encrypt the user-supplied password. Then compare the encrypted values.</p> '
  encrypted: true
  getRoles:
    allowed:
    - Deployer
  name: UserPasswordEncrypted
  restartNeeded: true
  type: byte
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The Tuxedo user role for this Jolt connection pool. (This is
    required only when the security level in the Tuxedo domain is <code>USER_AUTH</code>,
    <code>ACL</code>, or <code>MANDATORY_ACL</code>).</p> '
  name: UserRole
  restartNeeded: true
  type: java.lang.String
  writable: true
