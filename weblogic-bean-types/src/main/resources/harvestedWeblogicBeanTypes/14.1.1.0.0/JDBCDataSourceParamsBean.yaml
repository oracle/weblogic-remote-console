# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.descriptor.SettableBean
derivedTypes: [
  ]
descriptionHTML: 'Contains the basic usage parameters of a data source.  <p> Configuration
  parameters for the basic usage of a data source are specified using a data source
  parameters bean. </p> '
name: weblogic.j2ee.descriptor.wl.JDBCDataSourceParamsBean
properties:
- defaultValue:
    value:
      value: Failover
  descriptionHTML: '<p>The algorithm determines the connection request processing
    for the multi data source.</p>  <p>You can specify one of the following algorithm
    types:</p>  <ul> <li><b>Failover</b>  <p>Connection requests are sent to the first
    data source in the list; if the request fails, the request is sent to the next
    data source in the list, and so forth. The process is repeated until a valid connection
    is obtained, or until the end of the list is reached, in which case an exception
    is thrown.</p> </li>  <li><b>Load balancing</b>  <p>The multi data source distributes
    connection requests evenly to its member data sources. With this algorithm, the
    multi data source also provides failover processing. That is, if a request fails,
    the multi data source sends the request to the next data source in the list until
    a valid connection is obtained, or until the end of the list is reached, in which
    case an exception is thrown.</p> </li> </ul> '
  legalValues:
  - Load-Balancing
  - Failover
  name: AlgorithmType
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The name of the application class to handle the callback sent
    when a multi data source is ready to failover or fail back connection requests
    to another data source within the multi data source.</p>  <p>The name must be
    the absolute name of an application class that implements the <code>weblogic.jdbc.extensions.ConnectionPoolFailoverCallback</code>
    interface.</p> '
  name: ConnectionPoolFailoverCallbackHandler
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The list of data sources to which the multi data source will
    route connection requests. The order of data sources in the list determines the
    failover order.</p> '
  name: DataSourceList
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>For multi data sources with the <code>failover</code> algorithm,
    enables the multi data source to failover connection requests to the next data
    source if all connections in the current data source are in use.</p> '
  name: FailoverRequestIfBusy
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: OnePhaseCommit
  descriptionHTML: '<p>Determines the transaction protocol (global transaction processing
    behavior) for the data source. Options include:</p>  <ul> <li> <p>TwoPhaseCommit
    - Standard XA transaction processing. Requires an XA driver.</p> </li>  <li> <p>LoggingLastResource
    - A performance enhancement for one non-XA resource.</p> </li>  <li> <p>EmulateTwoPhaseCommit
    - Enables one non-XA resource to participate in a global transaction, but has
    some risk to data.</p> </li>  <li> <p>OnePhaseCommit - One-phase XA transaction
    processing using a non-XA driver. This is the default setting.</p> </li>  <li>
    <p>None - Support for local transactions only.</p> </li> </ul> '
  legalValues:
  - TwoPhaseCommit
  - LoggingLastResource
  - EmulateTwoPhaseCommit
  - OnePhaseCommit
  - None
  name: GlobalTransactionsProtocol
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue:
    derivedDefault: true
  descriptionHTML: '<p>The JNDI path for this Data Source. By default, the JNDI name
    is the name of the data source.</p>  <p>Applications that look up the JNDI path
    get a <code>javax.sql.DataSource</code> instance that corresponds to this data
    source. </p> '
  name: JNDINames
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  descriptionHTML: '<p>Enables WebLogic Server to keep the physical database connection
    associated with the logical connection when committing a global transaction instead
    releasing it and getting another physical connection when needed.</p>  <p>Setting
    this option to true may require additional connections to be configured on the
    database.</p>  <p>Use this setting to work around specific problems with JDBC
    XA drivers.</p> '
  name: KeepConnAfterGlobalTx
  redeployNeeded: true
  restartNeeded: true
  type: boolean
  writable: true
- defaultValue:
    value:
      value: true
  deprecated: '10.3.4.0 '
  descriptionHTML: '<p>Enables WebLogic Server to keep the physical database connection
    associated with the logical connection when committing a local transaction instead
    releasing it and getting another physical connection when needed.</p>  <p>Setting
    this option to true may require additional connections to be configured on the
    database.</p>  <p>Use this setting to work around specific problems with JDBC
    XA drivers.</p> '
  name: KeepConnAfterLocalTx
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: '<p>The name of the switching callback class for a Proxy data source.</p>
    <p>This class implements the <code>weblogic.jdbc.extensions.DataSourceSwitchingCallback</code>
    interface.</p> '
  name: ProxySwitchingCallback
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: null
  descriptionHTML: 'Specifies the switching properties passed to the switching callback
    method for a Proxy data source. '
  name: ProxySwitchingProperties
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: false
  deprecated: '12.2.1.0.0 '
  descriptionHTML: '<p>Enables multiple rows to be "prefetched" (that is, sent from
    the server to the client) in one server access.</p>  <p>This parameter applies
    only to the deprecated JDBC over RMI.</p>  <p>When an external client accesses
    a database using JDBC through WebLogic Server, row prefetching improves performance
    by fetching multiple rows from the server to the client in one server access.
    WebLogic Server ignores this setting and does not use row prefetching when the
    client and WebLogic Server are in the same JVM.</p> '
  name: RowPrefetch
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: boolean
  writable: true
- defaultValue:
    value:
      value: 48
  deprecated: '12.2.1.0.0 '
  descriptionHTML: '<p>If row prefetching is enabled, specifies the number of result
    set rows to prefetch for a client.</p>  <p>This parameter applies only to the
    deprecated JDBC over RMI.</p>  <p>The optimal prefetch size depends on the particulars
    of the query. In general, increasing this number will increase performance, until
    a particular value is reached. At that point further increases do not result in
    any significant performance increase. Very rarely will increased performance result
    from exceeding 100 rows. The default value should be reasonable for most situations.</p> '
  name: RowPrefetchSize
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: int
  writable: true
- defaultValue:
    value:
      value: Global
  descriptionHTML: '<p>Specifies the scoping of the data source.</p>  <p>You can specify
    one of the following scopes:</p>  <ul> <li><b>Global</b>  <p>Specifies that the
    data source is bound in the cluster-wide JNDI tree with the JNDIName specified
    so that the data source is available for use to any JDBC client across the cluster.</p>  <p>This
    is the default setting.</p> </li>  <li><b>Application</b>  <p>Specifies that the
    data source is bound in the application''s local namespace with the JNDIName specified
    so that the data source is available for use only by JDBC clients within the application.  This
    can only be used for packaged datasources and is ignored for JDBC System resources.</p>
    </li> </ul> '
  legalValues:
  - Global
  - Application
  name: Scope
  redeployNeeded: true
  restartNeeded: true
  type: java.lang.String
  writable: true
- defaultValue:
    value:
      value: 256
  deprecated: '12.2.1.0.0 '
  descriptionHTML: '<p>Specifies the data chunk size for steaming data types.</p>  <p>This
    parameter applies only to the deprecated JDBC over RMI.</p>  <p>Streaming data
    types (for example resulting from a call to <code>getBinaryStream()</code>) are
    sent in sized chunks from WebLogic Server to the client as needed.</p> '
  name: StreamChunkSize
  redeployNeeded: true
  restartNeeded: true
  supported: false
  type: int
  writable: true
roles:
  allowed:
  - Deployer
