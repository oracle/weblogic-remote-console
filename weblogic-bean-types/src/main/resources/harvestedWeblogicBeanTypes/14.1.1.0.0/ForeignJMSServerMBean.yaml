# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.management.configuration.DeploymentMBean
derivedTypes: [
  ]
descriptionHTML: 'This class represents a JNDI provider that is outside the WebLogic
  JMS server. It is a parent element of the ForeignJMSConnectionFactory and ForeignJMSDestination
  MBeans. It contains information that allows WebLogic Server to reach the remote
  JNDI provider. This way, a number of connection factory and destination objects
  can be defined on one JNDI directory. <p/> '
name: weblogic.management.configuration.ForeignJMSServerMBean
properties:
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The remote connection factories.</p> '
  name: ConnectionFactories
  relationship: reference
  restartNeeded: true
  supported: false
  transient: true
  type: weblogic.management.configuration.ForeignJMSConnectionFactoryMBean
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The URL that WebLogic Server will use to contact the JNDI provider.
    The syntax of this URL depends on which JNDI provider is being used. For WebLogic
    JMS, leave this field blank if you are referencing WebLogic JMS objects within
    the same cluster. This value corresponds to the standard JNDI property, <tt>java.naming.provider.url</tt>.</p>
    <p/> <p><i>Note:</i> If this value is not specified, look-ups will be performed
    on the JNDI server within the WebLogic Server instance where this connection factory
    is deployed.</p> '
  name: ConnectionURL
  nullable: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  deprecated: '9.0.0.0 Replaced by the ForeignServerBean type in the new JMS module. '
  descriptionHTML: '<p>The remote destinations.</p> '
  name: Destinations
  relationship: reference
  restartNeeded: true
  supported: false
  transient: true
  type: weblogic.management.configuration.ForeignJMSDestinationMBean
  writable: true
- array: true
  creators:
  - weblogic.management.configuration.ForeignJMSConnectionFactoryMBean
  defaultValue: {
    }
  deprecated: '9.0.0.0 Replaced by the ForeignServerBean type in the new JMS module. '
  descriptionHTML: 'Get all the Members '
  name: ForeignJMSConnectionFactories
  obsolete: 9.0.0.0
  relationship: containment
  supported: false
  type: weblogic.management.configuration.ForeignJMSConnectionFactoryMBean
- array: true
  creators:
  - weblogic.management.configuration.ForeignJMSDestinationMBean
  defaultValue: {
    }
  deprecated: '9.0.0.0 Replaced by the ForeignServerBean type in the new JMS module. '
  descriptionHTML: 'Get all the Members '
  name: ForeignJMSDestinations
  obsolete: 9.0.0.0
  relationship: containment
  supported: false
  type: weblogic.management.configuration.ForeignJMSDestinationMBean
- defaultValue:
    value:
      value: weblogic.jndi.WLInitialContextFactory
  descriptionHTML: '<p>The name of the class that must be instantiated to access the
    JNDI provider. This class name depends on the JNDI provider and the vendor that
    are being used. This value corresponds to the standard JNDI property, <tt>java.naming.factory.initial</tt>.</p>
    <p/> <p><i>Note:</i> This value defaults to <tt>weblogic.jndi.WLInitialContextFactory</tt>,
    which is the correct value for WebLogic Server.</p> '
  name: InitialContextFactory
  nullable: true
  type: java.lang.String
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>Any additional properties that must be set for the JNDI provider.
    These properties will be passed directly to the constructor for the JNDI provider''s
    <tt>InitialContext</tt> class.</p> <p/> <p><i>Note:</i> This value must be filled
    in using a <tt>name=value&lt;return&gt;name=value</tt> format.</p> '
  name: JNDIProperties
  type: java.util.Properties
  writable: true
- defaultValue: {
    }
  descriptionHTML: '<p>The encrypted value of the value set via java.naming.security.credentials
    property of the JNDIProperties attribute. set via <code> setJNDIPropertiesCredential
    </code>, '
  encrypted: true
  name: JNDIPropertiesCredential
  restartNeeded: true
  type: java.lang.String
  writable: true
- array: true
  defaultValue: {
    }
  descriptionHTML: '<p>The encrypted value of the value set via java.naming.security.credentials
    property of the JNDIProperties attribute. set via <code> setJNDIPropertiesCredentialEncrypted
    </code>, '
  encrypted: true
  name: JNDIPropertiesCredentialEncrypted
  restartNeeded: true
  type: byte
  writable: true
