# Copyright (c) 2020, 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions: [
  ]
baseTypes:
- weblogic.descriptor.SettableBean
derivedTypes:
- weblogic.security.providers.authentication.LDAPAuthenticatorMBean
- weblogic.management.security.authentication.UserEditorMBean
descriptionHTML: '<p>Provides two methods for changing a user''s password. An Authentication
  provider MBean can optionally implement this MBean. The WebLogic Server Administration
  Console detects when an Authentication provider implements this MBean and automatically
  provides a tab for using these methods.</p>  <p>CSS v4 introduced a new Password
  Validaton Service to check password against a set of rules when doing changing password
  operations with authentication provider MBeans such as <code>createUser</code>,
  <code>changeUserPassword</code> and <code>resetUserPassword</code>. The rules can
  be specified through configuring Password Validation Provider into the security
  realm, for further information, see <code>weblogic.management.security.RealmMBean</code>.</p>  <p>All
  OOTB authentication providers in CSS will automatically call the Password Validation
  Service if their MBeans inherit <code>UserPasswordEditorMBean</code> interface.
  The service is also available for all those customized authentication providers
  whose MBeans inherit <code>UserPasswordEditorMBean</code>, to introduce the Password
  Validation Service into a customized authentication proivder, the following approach
  must be met:</p> <ol> <li> <p>In the <code>initialize</code> method of a customized
  provider implementation, must retrieve the Password Validation Service and register
  the service into a helper class such as <code>weblogic.security.provider.authentication.AuthenticationSecurityHelper</code>,
  the code might like as below:</p>  <p><code> import com.bea.common.security.service.PasswordValidationService;<br>
  import com.bea.common.security.legacy.ExtendedSecurityServices;<br> import com.bea.common.security.internal.legacy.helper.PasswordValidationServiceConfigHelper;<br>
  import weblogic.security.provider.authentication.AuthenticationSecurityHelper;<br>
  ......<br> ExtendedSecurityServices extendedSecurityServices = (ExtendedSecurityServices)securityServices;<br>
  PasswordValidationService serivce = (PasswordValidationService)extendedSecurityServices.getServices().getService(PasswordValidationServiceConfigHelper.getServiceName(providerMBean.getRealm()));<br>
  AuthenticationSecurityHelper.getInstance(providerMBean).registerPasswordValidationService(service);<br>
  ......</code></p> </li> <li> <p>In the <code>createUser</code>, <code>changeUserPassword</code>
  and(or) <code>resetUserPassword</code> methods of a customized authentication provider
  MBean, call the helper class to validate the new password to determine if the new
  password is valid. The code might be:</p>  <p><code> import weblogic.security.provider.authentication.AuthenticationSecurityHelper;<br>
  .....<br> AuthenticationSecurityHelper.getInstance(providerMBean).validatePassword(userName,password);<br>
  .....</code></p> </li> </ol> '
name: weblogic.management.security.authentication.UserPasswordEditorMBean
properties: [
  ]
