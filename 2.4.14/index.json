[
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/preface/",
	"title": "Preface",
	"tags": [],
	"description": "",
	"content": "Oracle WebLogic Remote Console Online Help describes how to use WebLogic Remote Console to administer WebLogic Server domains, whether through their Administration Server or as WebLogic Deploy Tooling metadata model files.\nAudience This document is intended for users who are responsible for administering WebLogic Server domains.\nDocumentation Accessibility For information about Oracle\u0026rsquo;s commitment to accessibility, visit the Oracle Accessibility Program website at http://www.oracle.com/pls/topic/lookup?ctx=acc\u0026amp;id=docacc.\nAccess to Oracle Support Oracle customers that have purchased support have access to electronic support through My Oracle Support. For information, visit http://www.oracle.com/pls/topic/lookup?ctx=acc\u0026amp;id=info or visit http://www.oracle.com/pls/topic/lookup?ctx=acc\u0026amp;id=trs if you are hearing impaired.\nDiversity and Inclusion Oracle is fully committed to diversity and inclusion. Oracle respects and values having a diverse workforce that increases thought leadership and innovation. As part of our initiative to build a more inclusive culture that positively impacts our employees, customers, and partners, we are working to remove insensitive terms from our products and documentation. We are also mindful of the necessity to maintain compatibility with our customers\u0026rsquo; existing technologies and the need to ensure continuity of service as Oracle\u0026rsquo;s offerings and industry standards evolve. Because of these technical constraints, our effort to remove insensitive terms is ongoing and will take time and external cooperation.\nRelated Resources For more information, see these Oracle resources:\nUnderstanding Oracle WebLogic Server - provides an overview of Oracle WebLogic Server features and describes how you can use them to create enterprise-ready solutions. Installing and Configuring Oracle WebLogic Server and Coherence - describes how to install and configure WebLogic Server and Coherence. Understanding Domain Configuration for Oracle WebLogic Server - describes WebLogic Server domains and how they are configured. Administering Oracle WebLogic Server with RESTful Management Services - describes how to use WebLogic Server RESTful management interfaces for administration, monitoring, deploying, and configuration tasks which are exposed for developing RESTful clients, including WebLogic Remote Console. WebLogic Remote Console Accessibility Notes for Oracle WebLogic Server - describes the accessibility features available in WebLogic Remote Console. Conventions The following text conventions are used in this document:\nThis table summarizes text conventions used in this document. Convention\nMeaning\nboldface Boldface type indicates graphical user interface elements associated with an action, or terms defined in text or the glossary.\nitalic Italic type indicates book titles, emphasis, or placeholder variables for which you supply particular values.\nmonospace Monospace type indicates commands within a paragraph, URLs, code in examples, text that appears on the screen, or text that you enter.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/",
	"title": "About WebLogic Remote Console",
	"tags": [],
	"description": "",
	"content": "WebLogic Remote Console Oracle WebLogic Remote Console is a graphical user interface that administers Oracle WebLogic Server domains.\nWebLogic Remote Console relies on REST APIs to provide flexibility, enabling it to connect to domains in varied environments: on physical or virtual machines, in containers or Kubernetes pods, in the cloud. Additionally, you can use WebLogic Remote Console to manage WebLogic Deploy Tooling (WDT) metadata models - meaning you can build domain templates and then manage them within the same environment.\nWebLogic Remote Console is compatible with WebLogic Server 12.2.1.4.0 or later and adjusts its user interface to match the features available to the relevant WebLogic Server release.\nUse WebLogic Remote Console to:\nManage WebLogic Server instances and clusters Create and modify WDT metadata models Deploy, manage, and monitor applications Configure security parameters, including managing users, groups, and roles Configure WebLogic Server services, such as database connectivity (JDBC), and messaging (JMS) The current release of WebLogic Remote Console is 2.4.14. See what improvements were added at https://github.com/oracle/weblogic-remote-console/releases.\nClick to expand to view documentation for older releases 2.4.13 2.4.12 2.4.11 2.4.10 2.4.9 2.4.8 2.4.7 2.4.6 2.4.5 2.4.4 2.4.2 2.4.1 2.4.0 2.3.0 2.2.0 2.1.0 2.0.0 1.1.0 Related Content WebLogic Remote Console is part of the thriving WebLogic Server community. Explore the following related products so you can use the console to its full capacity.\nRead general Oracle WebLogic Server documentation in the Oracle Help Center for comprehensive descriptions of the concepts and features of WebLogic Server.\nRead the WebLogic Deploy Tooling documentation to learn how to transform WDT model files into fully functional WebLogic Server domains.\nRead the WebLogic Kubernetes Toolkit User Interface documentation to understand how to deploy WebLogic Server to Kubernetes clusters.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/set-console/",
	"title": "Get Started",
	"tags": [],
	"description": "",
	"content": "WebLogic Remote Console is easy to install and you can quickly start managing your domains.\nWebLogic Remote Console is available in two formats:\nDesktop WebLogic Remote Console, a desktop application installed on your computer. Hosted WebLogic Remote Console, a web application deployed to an Administration Server and accessed through a browser. Generally, the two formats have similar functionality, though the desktop application offers certain conveniences that are not possible when using a browser.\nIf your environment has restrictions on installing applications, consider enabling Hosted WebLogic Remote Console. See Deploy Hosted WebLogic Remote Console.\nSystem Requirements Review the system requirements needed to run WebLogic Remote Console.\nWebLogic Remote Console is compatible with WebLogic Server 12.2.1.4.0 and later.\nHosted WebLogic Remote Console is only supported on Administration Servers running WebLogic Server 14.1.2.0.0 or later, and is subject to the same system requirements as its associated WebLogic Server release. To see the applicable certification matrix for your release of WebLogic Server, refer to Oracle Fusion Middleware Supported System Configurations.\nDesktop WebLogic Remote Console is supported on the following platforms.\nTable 1. Requirements. For the best experience, make sure your environment meets the following requirements. Platform Minimum Requirement Linux 64 bit only.\nDebian 11 and later Fedora 40 and later Oracle Linux 7 and later Ubuntu 16.04 and later macOS 13 (Ventura) or later\nNote: Intel machines must be 64 bit.\nWindows 64 bit only.\nWindows 10 and later.\nWe recommend setting the viewport of WebLogic Remote Console to 1300 px or wider. On narrower viewports, UI elements may overlap or disappear.\nInstall Desktop WebLogic Remote Console Desktop WebLogic Remote Console is a version of WebLogic Remote Console that is based on the Electron framework and installed as a desktop application.\nDownload the latest version of WebLogic Remote Console from the WebLogic Remote Console GitHub Repository. Choose the appropriate installer for your operating system.\nFollow the typical process for installing applications on your operating system.\nLaunch WebLogic Remote Console.\nIf you are using WebLogic Server 14.1.1.0 or earlier, you can enhance the functionality for managing Administration Servers by installing the WebLogic Remote Console extension. See Install the WebLogic Remote Console Extension. The extension comes pre-installed in WebLogic Server 14.1.2.0 and later.\nDeploy Hosted WebLogic Remote Console Hosted WebLogic Remote Console is a version of WebLogic Remote Console that is hosted on the Administration Server of the domain and accessed through a browser.\nHosted WebLogic Remote Console is useful for situations where it is not feasible to install external applications in your environment. Deploying Hosted WebLogic Remote Console is only supported on Administration Servers running WebLogic Server 14.1.2.0.0 or later.\nStart the Administration Server.\nDeploy the Hosted WebLogic Remote Console application using the WebLogic Scripting Tool (WLST).\nOpen a command line terminal and go to ORACLE_HOME/oracle_common/common/bin.\nInvoke WLST with the following options:\nwlst.sh *WL_HOME*/server/bin/remote_console_deployment.py t3://*hostname*:*port* *username* \u0026lt; *password.txt* Where:\nWL_HOME is the top-level installation directory for WebLogic Server. hostname is the host name of the Administration Server. port is the port number of the Administration Server. username is a user account capable of deploying applications. password.txt is the path to a file containing the password for the specified user account. For example: wlst.sh /Users/smithdoe/Oracle/Middleware/Oracle_Home/wlserver/server/bin/remote_console_deployment.py t3://localhost:7001 admin \u0026lt; /Users/smithdoe/password.txt Hosted WebLogic Remote Console is now deployed and will remain active as long as the weblogic-remote-console-app application is deployed and the Administration Server is running.\nDo not stop or delete the Hosted WebLogic Remote Console application, weblogic-remote-console-app, if you want to continue to use Hosted WebLogic Remote Console.\nTo use Hosted WebLogic Remote Console to manage the running Administration Server, see Start Hosted WebLogic Remote Console.\nStart Hosted WebLogic Remote Console Hosted WebLogic Remote Console is a version of WebLogic Remote Console that is accessible using a browser.\nBefore you can start Hosted WebLogic Remote Console, you must have deployed it. See Deploy Hosted WebLogic Remote Console.\nStart the Administration Server.\nOpen a browser and enter http://hostname:port/rconsole (or for HTTPS, https://hostname:port/rconsole).\nWhere hostname and port match the values you set when you deployed Hosted WebLogic Remote Console.\nIf your Administration Server is behind a firewall or load balancer, or otherwise externally unavailable, you must manually expose the rconsole/* endpoint to make it accessible, similar to exposing console/* for the WebLogic Server Administration Console.\nThis is in addition to exposing the management/* endpoint which is required for general domain configuration.\nLog in to Hosted WebLogic Remote Console.\nIn the Providers drawer, select This Server.\nHosted WebLogic Remote Console is active as long as the weblogic-remote-console-app application is deployed and the Administration Server is running.\nYou can use Hosted WebLogic Remote Console to connect to and manage other providers beyond the Administration Server it is hosted on. See Connect to a Provider.\nInstall the WebLogic Remote Console Extension The WebLogic Remote Console extension enhances the management capabilities of WebLogic Remote Console for Administration Server connections.\nFor an overview of the functionality provided by the WebLogic Remote Console extension, see Features of the WebLogic Remote Console Extension.\nYou only need to perform this procedure if you are running WebLogic Server 14.1.1.0.0 or earlier. As of WebLogic Server 14.1.2.0.0, the WebLogic Remote Console extension is automatically installed in your domain.\nUnder DOMAIN_HOME, create a folder and name it management-services-ext.\nDownload the latest WebLogic Remote Console extension, console-rest-ext-2.4.13.war, from the WebLogic Remote Console GitHub Repository.\nSave the extension under management-services-ext.\nYou do not need to deploy console-rest-ext-2.4.13.war as an application in your domain.\nRestart the Administration Server.\nIn WebLogic Remote Console, disconnect and then reconnect to the Administration Server.\nThe WebLogic Remote Console extension is updated with WebLogic Remote Console. Whenever you update WebLogic Remote Console, make sure you also update the extension to match.\nIf you need to update the WebLogic Remote Console extension separately from the console, follow the instructions outlined in step 2 of Upgrade Desktop WebLogic Remote Console.\nWith the release of WebLogic Remote Console 2.4.11, the versioning scheme of the WebLogic Remote Console extension was updated to match that of WebLogic Remote Console. There are no versions between console-rest-ext-9.0.war (released with WebLogic Remote Console 2.4.10) and console-rest-ext-2.4.11.war (released with WebLogic Remote Console 2.4.11).\nFeatures of the WebLogic Remote Console Extension The WebLogic Remote Console extension adds many features to WebLogic Remote Console that are useful for the administration of WebLogic Server domains.\nWhen the WebLogic Remote Console extension is installed, it grants the following capabilities to WebLogic Remote Console:\nView pending changes - Identify any changes that are saved to the domain but not yet committed. Pending changes are listed in the Shopping Cart.\nAccess the Security Data Tree perspective - Edit security data that is stored in the embedded LDAP server, including, but not limited to, managing:\nUsers and Groups\nRoles and Policies\nCredential Mappings\nYou can also view (but not edit) the users and groups for any authentication provider that supports it.\nCreate and edit application deployment plans - Use deployment plans to extend or override an application\u0026rsquo;s deployment descriptors.\nManage JMS messages - Import, export, or delete messages.\nManage JTA transactions - Import, export, or delete transactions.\nTest data source connections - Verify that the domain can successfully connect to the configured database.\nView objects in JNDI structure - Examine objects such as Java EE services and components such as RMI, JMS, EJBs, and JDBC data sources.\nUpload applications or database client data for redeployment - Update and redeploy applications or database client data with new versions that were not already deployed to the Administration Server.\nThe redeployment of applications or database client data that are already on the server is supported without the extension.\nAnalyze server connection issues - Test connections between the Administration Server and Managed Servers or clusters.\nFor installation instructions, see Install the WebLogic Remote Console Extension.\nProvider Types Use WebLogic Remote Console to connect to the following provider types, each of which offers a different approach for managing your WebLogic Server domains.\nThe provider types available in WebLogic Remote Console Provider Description Administration Server Connect to a running WebLogic Server domain through its Administration Server. WDT Model Files Edit WebLogic Deploy Tooling (WDT) metadata models of WebLogic Server domains. WDT Composite Models Combine and compare settings across multiple WDT model files. Property Lists Edit the key-value pairs that enable the use of variables in WDT model files. Connect to a Provider You can connect WebLogic Remote Console to a WebLogic Administration Server, WDT model file, or another provider.\nOpen the Providers drawer and click More ︙.\nChoose a provider type from the list:\nAdd Admin Server Connection Provider Add WDT Model File Provider Add WDT Composite Model File Provider Add Property List Provider Create Provider for new WDT Model File Create Provider for New Property List For information on the different providers, see Provider Types. Fill in any required connection details for the selected provider.\nClick OK to establish the connection.\nThe Administration Server must be running for the connection to succeed.\nUpgrade Desktop WebLogic Remote Console Upgrade to the latest version of Desktop WebLogic Remote Console and take advantage of the latest features in both the console and WebLogic Server.\nIf a newer version of Desktop WebLogic Remote Console is available, an alert will appear in the menu bar.\nIn Desktop WebLogic Remote Console, open Updates Available, then Download and install.\nDesktop WebLogic Remote Console update runs in the background so you can continue working in WebLogic Remote Console with no interruptions. The next time the console is launched, the updates will apply.\nYou can also go directly to the WebLogic Remote Console GitHub Repository to download and apply the update manually.\nUpdate the WebLogic Remote Console extension.\nFor the best experience, you should keep the versions of WebLogic Remote Console and its extension in sync with each other. That is, when you are running WebLogic Remote Console 2.4.13, you should have console-rest-ext-2.4.13.war installed.\nWith the release of WebLogic Remote Console 2.4.11, the versioning scheme of the extension was updated to match WebLogic Remote Console. Due to this change, the extension version jumps from console-rest-ext-9.0.war to console-rest-ext-2.4.11.war.\nWhile connected to the domain, open the Providers drawer and beside the provider connection, click the Get Info icon to see the Console Extension Version. If it matches WebLogic Remote Console version, you can skip the rest of the steps. Otherwise, continue.\nGo to DOMAIN_HOME/management-services-ext and delete the existing WebLogic Remote Console extension.\nDownload the WebLogic Remote Console extension that matches your WebLogic Remote Console from the WebLogic Remote Console GitHub Repository. It will be within the matching WebLogic Remote Console release section.\nSave the extension to DOMAIN_HOME/management-services-ext.\nRestart the Administration Server.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/set-console/get-know-console/",
	"title": "Get to Know the Console",
	"tags": [],
	"description": "",
	"content": "WebLogic Remote Console is your portal to managing WebLogic Server domains from a unified interface, whether they are running domains or model templates.\nWhen you launch WebLogic Remote Console for the first time, it opens a Startup Tasks dialog box with options to connect to a new provider, such as an Administration Server or WDT model file. WebLogic Remote Console remembers your connection details so on subsequent visits, it will open on your last project, letting you continue where you left off.\nThe structure of WebLogic Remote Console remains similar across provider types, with variances as appropriate for the provider type.\nKey Elements of the Interface Open the Providers drawer to see and manage your saved provider connections.\nBrowse the Navigation Tree to see the structure of the provider as a node tree. In providers based on domains, such as Administration Servers or WDT model files, the node tree builds upon the MBean structure that defines a WebLogic Server domain. Beside the Navigation Tree is the NavStrip. On providers with multiple perspectives, you can also use the icons in the NavStrip to move between perspectives.\nClick above the NavStrip to hide the Navigation Tree when you want a bigger editing area. Click it again to bring the Navigation Tree back.\nThe Content Pane is the main editing area for managing your domains or property lists. As you move through the nodes of the Navigation Tree, the Content Pane updates to match your new position.\nTool Bar The Tool Bar, near the top of WebLogic Remote Console, groups together quick actions that you can use to navigate or manipulate the interface.\nTool bar icons only appear on pages where they are applicable. For example, the Shopping Cart, used to indicate pending changes, only appears in Administration Server providers.\nTable 1. Tool Bar. Tool bar icons that may appear along the top of the Content Pane. Tool Bar Icon Description Home Sends you to the Home Page of the provider. Landing Page Sends you to the Landing Page of the current perspective. Visibility of History Triggers a record of the pages you visit. When active, a drop-down list appears where you can see, and return to, your previous pages. History is limited to the current perspective. Click More ︙, then Clear History Entries to delete your navigation history.\nHelp Shows reference information about the attributes present on the current page. Reload Refreshes any forms or tables on the current page with the latest available data.When Auto Reload Interval is enabled, this icon will bounce continuously.\nAuto Reload Interval Sets a time interval (in seconds) for how often WebLogic Remote Console should reload a page to refresh its information. If you select another tab or move to another page, automatic reload stops.To stop auto reload, click the bouncing Reload icon or click Auto Reload Interval and set the interval to 0.\nShopping Cart Indicates if there are pending changes ready to be committed to a WebLogic Server domain.When the Shopping Cart is full, you can click it to see the pending changes and then commit or discard them.\nRefresh Page Values Updates the Content Pane with the latest values. Explore your Domain WebLogic Server domains can be complex structures, so WebLogic Remote Console provides multiple methods to locate your objective.\nNavigation Tree: Expand the nodes of the Navigation Tree to browse its children and gain a high level understanding of the hierarchical relationship of a WebLogic Server domain.\nBreadcrumbs: The Content Pane provides a breadcrumb menu to orient you as you descend further into a node branch. You can also click on a node\u0026rsquo;s page title in the Breadcrumb menu to find links to related nodes that take you directly to the related content.\nSearch: Use the search bar to find any MBeans in the domain that match your query. Searches are restricted to within the current provider and perspective. Previous search queries can be found as the last node in the Navigation Tree, nested under the Recent Searches node.\nDashboards: If you find yourself regularly reviewing specific data within your domain, you may want to make use of Dashboards, which let you curate complex search filters and compare disparate information about your domain. For more information, see Dashboards.\nChange Indicators When you modify an MBean attribute, WebLogic Remote Console adds a black outline to the attribute\u0026rsquo;s field to indicate that it is no longer set to the default value.\nTo return an MBean attribute to its default setting, right-click inside the attribute\u0026rsquo;s field and click Restore to default. Save and commit the change.\nThe domain configuration file, config.xml, only describes MBean attributes if they are set to non-default values. After you use Restore to default, the (now unnecessary) attribute will be removed from the file.\nChange Console Preferences You can customize Desktop WebLogic Remote Console to suit your needs.\nGo to File, then Preferences. (On macOS, go to WebLogic Remote Console, then Application Preferences ).\nChoose a section tab and make your changes as needed.\nClose the Preferences dialog box to apply your changes.\nCustomize a Table You can choose which columns are visible in a table, hiding irrelevant data so you can focus on the important details.\nFind a table that you want to customize. For example, in the Edit Tree, go to Environment, then Servers.\nClick Customize Table to display the list of Available Columns.\nThe available column options differ by table as not all columns (that is, properties) are applicable to all tables.\nUse the arrows to move your wanted columns from Available Columns to Selected Columns. Move any unwanted columns back to Available Columns. Move the columns to Selected Columns in the order that you want them to appear in the table. There must be at least one column under Selected Columns.\nClick Apply to save your changes.\nChanges to table columns will persist indefinitely and apply to that specific table across all applicable providers. If you change the table columns for Server Templates in wdt-model_1, then those changes will also affect the Server Templates table in wdt-model_2 and admin-server_1 (Edit Tree).\nTo return a table to its default set of columns, open Customize Table and click Reset.\nProjects Use projects to organize providers in a way that makes sense for your workflow.\nYou can add as many providers to a project as you want. You can even add the same provider to multiple projects.\nFor simplicity, we recommend that if you use property lists with your WDT model files, then you should keep the property list provider in the same project as the WDT model file.\nCreate a Project To arrange providers into a collection:\nOpen File, then New Project.\nEnter a name for the new project.\nOpen the Providers drawer and beside the project\u0026rsquo;s name, click More ︙. Select one of the following options to add a provider:\nAdd Admin Server Connection Provider Add WDT Model File Provider Add WDT Composite Model File Provider Add Property List Provider Create Provider for New WDT Model File Create Provider for New Property List For more information on the different provider types, see Provider Types Fill in any required information.\nClick OK to add the provider to your project.\nAdd more providers to the project.\nYou can add or remove providers from the project at any point. To switch to another project, open File, then Switch to project and choose the project that you want to switch to.\nDeleting a project will not affect the providers within the project.\nExport a Project If you use WebLogic Remote Console on multiple computers, exporting a project is a convenient way to share a project across multiple computers.\nIf the project contains a WDT model file, make sure the location of the WDT model file is accessible to all the computers where this project will be imported to.\nIn the Providers drawer, click More ︙ and select Export Providers as Project.\nEnter a name for the exported project. When imported into another WebLogic Remote Console, this will be the name of the project.\nEnter a name for the file of the exported project.\nClick OK and choose a file location to save the exported project file.\nWebLogic Remote Console creates a JSON file with the project details that you can import into other instances of WebLogic Remote Console.\nImport a Project You can import the project details of an existing project to rapidly ramp up productivity in a new installation of WebLogic Remote Console.\nExport a project and save the file to the computer where you want to import it. See Export a Project.\nOn the computer where you want to import the file, start WebLogic Remote Console.\nIn the Providers drawer, click More ︙ and select Import Project.\nClick Upload File and browse to the exported project file.\nClick Import.\nThe imported project automatically becomes the current project loaded in WebLogic Remote Console.\nEnable Keyboard Navigation on macOS On devices running macOS, you must specifically enable keyboard navigation before you can use the Tab key (or Shift + Tab keys) to navigate between the controls in WebLogic Remote Console.\nOn your device running macOS, open the Apple main menu and select System Settings.\nClick the Keyboard item in the sidebar.\nTurn on the Keyboard Navigation option.\nIf you plan to use the Safari browser with Hosted WebLogic Remote Console, then do the following:\nOpen the Safari browser and open its main menu.\nSelect Settings.\nOn the Advanced tab, turn on the Press Tab to highlight each item on a webpage option.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/set-console/contribute-wrc-repository/",
	"title": "Contribute to WebLogic Remote Console",
	"tags": [],
	"description": "",
	"content": "Contributions from the community to the WebLogic Remote Console project help us build a better experience together. You can contribute by raising a bug or enhancement request or by submitting pull requests to address an issue yourself.\nOpen an issue in the WebLogic Remote Console GitHub repository that describes the issue you plan to address or the enhancement request.\nIf you only want to file an enhancement request, you can stop here - you\u0026rsquo;re done! Thank you for helping to improve WebLogic Remote Console.\nIf you want to fix an issue yourself, you must sign the Oracle Contributor Agreement (OCA) before you can submit a pull request. For instructions, see the Oracle Contributor Agreement.\nFork the WebLogic Remote Console GitHub repository.\nCreate a branch in your forked repository and implement your changes. Include the issue number in your branch\u0026rsquo;s name. For example, 1234-fixlink.\nTest your changes. Build WebLogic Remote Console as described in Build from Source.\nIf the base image was changed, update the samples.\nCommit your changes. Make sure to include a git commit signoff that lists your name and the email address that matches its entry in the OCA Signatories list. For example, Signed-off-by: Your Name you@example.org. You can add this automatically by adding the \u0026ndash;signoff option to your git commit command: git commit\u0026ndash;signoff. We cannot merge pull requests from contributors who have not signed the OCA.\nSubmit the pull request. Include a link to its related issue and describe what you hope to accomplish with your changes and how to validate them.\nThank you for your contribution. We will assign reviewers to your pull request.\nBuild from Source If you want to contribute to the WebLogic Remote Console project or just want a better understanding of how WebLogic Remote Console works, then you can generate the project from its source code to create a local build.\nMake sure the following software is installed in your local environment.\nJava SE 11 or later Maven 3.6.1 or later Node.js 18.0.0 or later To verify that you have installed the correct versions of the listed software, run: java -version mvn --version node -v Install the Oracle JET 15.1.0 client libraries.\nIn Windows environments, run:\nnpm install --location=global @oracle/ojet-cli@~15.1.0 In Linux or macOS environments, run:\nsudo npm install --location=global @oracle/ojet-cli@~15.1.0 You can run ojet \u0026ndash;version to verify it installed correctly.\nClone the WebLogic Remote Console repository from the WebLogic Remote Console GitHub repository.\nOpen a command-line interface and navigate to the home directory of the cloned repository.\nRun mvn clean install.\nAfter the build finishes, confirm that /installer/target/console.zip was created.\nFrom the home directory of the repository, run the build-electron.sh script.\nThe WebLogic Remote Console executable file is created under /electron/dist/.\nRun WebLogic Remote Console in the Browser You can choose to run WebLogic Remote Console from within a browser.\nWe do not recommend using the browser application to manage domains. It has significant limitations in both security and functionality and should be used for development purposes only.\nYou must have a modern internet browser installed to run WebLogic Remote Console in the browser.\nBuild WebLogic Remote Console from its source code. Follow the instructions at Build from Source.\nCopy /installer/target/console.zip to a new directory and extract its contents.\nOpen a command window and navigate to the new directory.\nRun java -jar console.jar.\nOpen a browser window and enter http://localhost:8012 in the address bar.\nConnect to a provider and you can manage it as you would in the regular WebLogic Remote Console.\nTo end the session, enter Ctrl+C in the command window.\nUnsaved changes made in the browser application do not persist after you close the browser tab. If you accidentally close or refresh the browser tab, you may lose all of your changes. Changes to an Administration Server provider remain in a pending state and can generally be recovered in a new session. Changes to WDT model files, WDT Composite files, and property lists are lost if you do not click Download File at the end of your session.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/set-console/support-information/",
	"title": "Support Information",
	"tags": [],
	"description": "",
	"content": "WebLogic Remote Console offers several avenues to receive support and help.\nStay up-to-date with the latest release of WebLogic Remote Console to get the latest features and fixes. If you experience issues, try upgrading to the latest release, which may address your issue. For more information, see Upgrade Desktop WebLogic Remote Console.\nOracle Documentation In addition to the current guide, you can retrieve information on WebLogic Remote Console from within the user interface. Click the Help icon in the Tool Bar or in dialog boxes to reveal descriptions of the fields on your current page.\nYou can also view general documentation for WebLogic Server at Oracle WebLogic Server in the Oracle Help Center.\nOracle Support Support for WebLogic Remote Console is available to Oracle customers that have purchased support for WebLogic Server.\nCommunity Support Join our Slack channel at #remote-console in the Oracle WebLogic workspace! Ask questions, make suggestions, or just get in touch with developers and other users of WebLogic Remote Console.\nVisit our GitHub repository where you can contribute directly to the development of WebLogic Remote Console, whether it\u0026rsquo;s through raising issues or submitting your own code.\nUpcoming Features WebLogic Remote Console is one of several tools available to manage your WebLogic Server domain. For a list of alternative administration options, see Choosing the Appropriate Technology for Your Administrative Tasks in Understanding Oracle WebLogic Server.\nWebLogic Remote Console is an evolving product that continues to add new features with each release. As WebLogic Remote Console is an open-source product, you can view our progress in our WebLogic Remote Console GitHub repository.\nFrequently Asked Questions This section provides answers to frequently asked questions about WebLogic Remote Console.\nMy domain is behind a firewall. How do I connect to WebLogic Remote Console? For WebLogic Remote Console to connect to a domain\u0026rsquo;s Administration Server, the management endpoint of the domain, management/*, must be publicly accessible. If your Administration Server is behind a firewall or load balancer, or otherwise externally unavailable, you will need to expose the endpoint manually.\nIf you use the Hosted WebLogic Remote Console, you will also need to expose rconsole/*.\nTip:\nIf you needed to expose console/* to access the WebLogic Server Administration Console for your domain, simply follow the same procedure to expose management/* for WebLogic Remote Console.\nCan I connect WebLogic Remote Console to domains running in WebLogic on Oracle Cloud Infrastructure? Yes, you can. First, make sure that the domain’s Administration Server is publicly accessible so WebLogic Remote Console can establish a connection to it. Then, in WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nCan I connect WebLogic Remote Console to domains running on other cloud providers such as Amazon Web Services, Google Cloud, Microsoft Azure and so on? Yes, you can connect to other cloud providers. You’ll need to make sure the domain’s Administration Server is publicly accessible to allow a connection between WebLogic Remote Console and the cloud provider. Then, in WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nVisit your cloud providers\u0026rsquo; documentation for more specific instructions on how to expose the management/* endpoint of the WebLogic Server.\nCan I connect WebLogic Remote Console to domains running in Kubernetes with the WebLogic Kubernetes Operator? Yes. For details on how to set up access to WebLogic Server domains running on Kubernetes, see Use the WebLogic Remote Console in the WebLogic Kubernetes Operator User Guide.\nWhich versions of WebLogic Server can I use with WebLogic Remote Console? WebLogic Remote Console is compatible with WebLogic Server 12.2.1.4 or later.\nCan I use both WebLogic Remote Console and WebLogic Server Administration Console to manage WebLogic Server Administration Servers? It depends on the WebLogic Server release that you have installed. The Administration Console was removed in WebLogic Server 14.1.2.0.0 and therefore is not available as of that release.\nHowever, if you\u0026rsquo;re running WebLogic Server 14.1.1.0 or earlier, then you can continue to use the Administration Console for domain management alongside WebLogic Remote Console. Any changes you make in WebLogic Remote Console are reflected in the Administration Console.\nAs with any combination of system administration tools, avoid using them simultaneously as it can cause configuration conflicts and unexpected behavior.\nTo see a full list of the tools that you can use to administer WebLogic Server, see Overview of WebLogic Server System Administration in Understanding Oracle WebLogic Server.\nDo I need to upgrade my installation of WebLogic Remote Console whenever I upgrade or patch WebLogic Server? No, older releases of WebLogic Remote Console will continue to work with newer releases of WebLogic Server. However, we recommend that you update WebLogic Remote Console (and its extension) as frequently as possible to take advantage of any fixes and improvements, both to WebLogic Remote Console itself and those added in WebLogic Server patches.\nFor example, if new fields or WebLogic MBeans were added in a WebLogic Server update, then outdated versions of WebLogic Remote Console will not detect or display those fields.\nAre there any security risks associated with WebLogic Remote Console? No, WebLogic Remote Console accesses WebLogic Administration Servers through its standard WebLogic REST API, which is available out of the box. However, since your computer will be accessing potentially sensitive data, you need to make sure it is protected and secure.\nWhy does WebLogic Remote Console disagree with attributes that I set at the command line? When you make changes to the domain configuration using system properties, the properties override but do not change the config.xml file. The Edit Tree perspective, which is generated from config.xml, will only show the state of the domain as specified in the configuration file. In contrast, the Configuration View Tree perspective shows the current and effective state of the domain, including command line options.\nSee Perspectives in the Administration Server Provider.\nAs an example, if your domain is set to secured production mode and you choose to temporarily disable secured production mode with the following system property, -Dweblogic.securemode.SecureModeEnabled=false, then only the Configuration View Tree will accurately report the domain mode as production mode. The Edit Tree (and config.xml) will continue to report that secured production mode is enabled, even though it is not.\nSee Verifying Attribute Values That Are Set on the Command Line in Command Reference for Oracle WebLogic Server.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/administration-server/",
	"title": "Administration Server",
	"tags": [],
	"description": "",
	"content": "WebLogic Remote Console connects directly to a WebLogic Administration Server to view and edit its domain.\nWebLogic Remote Console administers your domain by connecting to its Administration Server through REST APIs generated by WebLogic Server RESTful management services. The WebLogic RESTful management services dynamically generate REST resources mapped from WebLogic Server MBeans. WebLogic Remote Console builds upon these REST resources to produce a graphical user interface that reflects the MBean structure of your domain and that can connect to domains running remotely.\nSee About the WLS RESTful Management Interface in Administering Oracle WebLogic Server with RESTful Management Services for more information.\nFor an overview of WebLogic Server domains, their contents, and general guidance on domain configuration, see Understanding Oracle WebLogic Server Domains in Understanding Domain Configuration for Oracle WebLogic Server.\nWebLogic Remote Console is one of several tools available to administer your WebLogic Server domain, each with its own advantages. See Choosing the Appropriate Technology for Your Administrative Tasks in Understanding Oracle WebLogic Server for a list of other system administration options.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/administration-server/domain-configuration/",
	"title": "Domain Configuration",
	"tags": [],
	"description": "",
	"content": "Use WebLogic Remote Console to make configuration changes to your WebLogic Server domain through its Administration Server.\nConnect to an Administration Server You can connect to a running WebLogic Server domain through its Administration Server and then manage its configurations using WebLogic Remote Console.\nStart the Administration Server.\nSee Starting and Stopping Servers in Administering Server Startup and Shutdown for Oracle WebLogic Server for instructions.\nOpen the Providers drawer and click More ︙.\nFrom the list, select Add Admin Server Connection Provider.\nEnter a name for the Administration Server.\nThis name appears in the Project list of providers so you can identify which domain you\u0026rsquo;re connected to.\nFor domains running WebLogic Server 14.1.2.0.0 or later only: If you have configured WebLogic Server to delegate authentication to an external service using a browser, enable the Use Web Authentication option. Otherwise, leave it unselected and enter credentials for a local user account as described in step 6.\nFor more information, see Configure Web Authentication.\nEnter a username and password for a user account in the domain.\nLog in with a user who has the necessary privileges for the tasks you plan to perform. To prevent unauthorized modifications, WebLogic Remote Console limits which tasks and screens are available to a user, based on their role.\nIn the URL field, enter the URL for the Administration Server.\nFor example:\nhttp://localhost:7001 Make sure that the management/* endpoint of your Administration Server is accessible by WebLogic Remote Console. If your Administration Server\u0026rsquo;s endpoints are behind a firewall, load balancer, or otherwise externally unavailable, you will need to expose the endpoint manually.\nIf you are using Hosted WebLogic Remote Console, you will also need to expose the rconsole/* endpoint.\nIf you want WebLogic Remote Console to ignore warnings about expired, untrusted, or missing certificates when connecting to an Administration Server, enable the Make Insecure Connection checkbox. We recommend that you only enable this setting for development or demonstration environments.\nIf this WebLogic Server domain resides in a different network, you can still facilitate communication between it and WebLogic Remote Console. In the Proxy Override field, enter a proxy server address.\nYou can also set a proxy address that applies to all Administration Server connections. See Connect using a Proxy Server.\nClick OK.\nAfter you connect successfully, you can begin managing your WebLogic Server domain. To understand how WebLogic Remote Console presents a domain structure, see Perspectives in the Administration Server Provider.\nYou can view and update the connection details for an Administration Server provider in the Providers drawer.\nConnect using SSL/TLS If you want to connect to a WebLogic Server domain using SSL/TLS, you may need to perform some additional configuration steps in WebLogic Remote Console.\nIf you specified HTTPS for the domain URL when you connected to the Administration Server, then WebLogic Remote Console uses SSL/TLS to communicate with the domain.\nThe SSL/TLS connection requires trust in the WebLogic Server domain, where the trust configuration is handled by the underlying JDK JSSE support. By default, the JDK uses the cacerts truststore provided with the JDK. If the domain requires additional trust, separate trust, or is using the WebLogic Server demo trust, then you’ll need to configure SSL/TLS trust.\nYou can either use WebLogic Remote Console to specify the type and location of the trust store (as described below), or use the keytool utility to import the required trust certificates into the cacerts truststore supplied with the JDK. See The keytool Command in Java Development Kit Version 17 Tool Specifications.\nIn WebLogic Remote Console, go to File, then Settings. (On macOS, go to WebLogic Remote Console, then Settings.)\nUnder the Networking section, in the Trust Store Type field, enter the algorithm name for your trust store. Depending on the Trust Store Type that you provide, additional fields may appear.\nSee JDK Providers Documentation in the Java Security Developer\u0026rsquo;s Guide for specific algorithm names.\nClick Choose a trust store file to browse to the file location of your trust store.\nClick Change beside Trust Store Key, then enter the secret for your trust store key.\nClick Save to add the secret.\nClick Save to apply your changes.\nConfigure Web Authentication You can delegate authentication of users from WebLogic Remote Console to an external authentication service.\nBy default, WebLogic Remote Console uses the Basic HTTP authentication scheme to authenticate users. If you want to replace Basic authentication with another authentication scheme, perhaps to support a single sign-on flow, you can enable the Use Web Authentication option to send users through an alternative login process, using the browser.\nThis functionality is only available on domains running WebLogic Server 14.1.2.0.0 or later.\nWhen web authentication is enabled, the default Basic authentication HTTP header is replaced by using a WebLogic Server token for REST communications. Users are sent to a login endpoint that is generated by taking the domain URL of the connected Administration Server and then adding the Remote Console Helper Context Path (the default is console), and then login. For example, the full URL might look like: https://administrationServer:7002/console/login.\nIn the URL, notice that the protocol is https and the port number is 7002 (the default port number for the SSL/TLS listen port). To use web authentication, you must configure SSL/TLS.\nWeb authentication in WebLogic Remote Console is facilitated by the WebLogic Remote Console Helper, an application included with WebLogic Server. If necessary, you can customize settings for this application to fit your web authentication process.\nFor user accounts that are authenticated through the embedded LDAP server (WebLogic Authentication provider) or another supported LDAP or RDBMS authentication provider, you do not need to perform any further configuration.\nHowever, if you want to authenticate virtual users, you must make these users known to WebLogic Server by adding them to an LDAP or RDBMS authentication provider as the REST communication from WebLogic Remote Console does not directly support the use of virtual users.\nThe general process for setting up web authentication is as follows:\nConfigure SSL/TLS for your domain. See Set Up SSL/TLS.\nConfigure your authentication provider.\nIn Administering Security for Oracle WebLogic Server, see:\nAbout Configuring the Authentication Providers in WebLogic Server Configuring the WebLogic Authentication Provider Configuring LDAP Authentication Providers Configuring RDBMS Authentication Providers Ensure that both the login and management endpoints (console/ and management/, respectively) of your Administration Server are accessible by WebLogic Remote Console. If your Administration Server\u0026rsquo;s endpoints are behind a firewall, load balancer, or otherwise externally unavailable, you will need to expose those endpoints manually.\nIf you want to customize the login endpoint, update the Remote Console Helper Context Path attribute (see step 4) with a new endpoint and restart WebLogic Server. Be aware that this only replaces console; you cannot change the login segment.\nThen, go to File, then Settings. (On macOS, go to WebLogic Remote Console, then Settings.) Under the Other Java System Properties section, click + to add a new row and enter console.ssoDomainLoginUri=/newEndpoint/login.\nIf you modify the Remote Console Helper Context Path, it can prevent WebLogic Remote Console from successfully connecting to the Administration Server. Do not change it unless you understand how changing the login endpoint will affect access to your environment.\nCustomize the Remote Console Helper.\nIn the Edit Tree, go to Environment, then Domain.\nClick Show Advanced Fields.\nEdit the following Remote Console Helper attributes as needed:\nRemote Console Helper Enabled Remote Console Helper Context Path Remote Console Helper Cookie Name Remote Console Helper Session Timeout Remote Console Helper Protected Cookie Enabled Remote Console Helper Token Timeout Click Save.\nIf you want to support the authentication of virtual users, then you must add each virtual user to the default authentication provider (WebLogic Authentication provider) or another configured LDAP or RDBMS provider. The REST communication from WebLogic Remote Console does not directly support the use of virtual users.\nMake sure to add the users as members of a group with permissions to accomplish their responsibilities, such as Administrators, Operators, or so on.\nIf you add the virtual user to the WebLogic Authentication provider, then you can use WebLogic Remote Console to create the user as described in Create a User. Otherwise, to add a virtual user to the provider, you\u0026rsquo;ll need to use an external tool specific to the provider.\nWhen connecting to the Administration Server using WebLogic Remote Console:\nEnable the Use Web Authentication option.\nEnsure the Administration Server URL is using https and the SSL/TLS listen port (default is 7002). If the administration port is enabled, the default port value is 9002 instead.\nFor example:\nhttps://administrationServer:7002 https://administrationServer:9002 Enable SAML 2.0 SSO for WebLogic Remote Console If you configure WebLogic Server as a SAML 2.0 Service Provider site, you can use it to implement single sign-on (SSO) functionality for WebLogic Remote Console.\nFor an overview of the steps required to set up web authentication in WebLogic Remote Console, see Configure Web Authentication.\nAs this functionality relies on web authentication, it is only supported on domains running WebLogic Server 14.1.2.0.0 or later.\nConfigure WebLogic Server as a SAML 2.0 Service Provider site as described in Configuring a Service Provider Site for SAML 2.0 Single Sign-On in Administering Security for Oracle WebLogic Server.\nMake sure to:\nAdd /console/login to the list of Identity Provider partner redirect URIs. See Configure Redirect URIs in Administering Security for Oracle WebLogic Server.\nSecure the published site URL by using https and the SSL/TLS listen port. For example, https://wls.example.com:7002/saml2. See About SAML 2.0 General Services in Administering Security for Oracle WebLogic Server.\nIf you want to support the authentication of virtual users, then you need to configure an LDAP or RDBMS authentication provider and add each virtual user to that provider. The REST communication from WebLogic Remote Console does not directly support the use of virtual users.\nIf you add the virtual user to the WebLogic Authentication provider, then you can use WebLogic Remote Console to create the user as described in Create a User. Otherwise, to add a virtual user to the provider, you\u0026rsquo;ll need to use an external tool specific to the provider.\nMake sure to add the users as members of the Administrators group.\nUpdate the Remote Console Helper attributes to support SAML 2.0 SSO.\nIn WebLogic Remote Console, in the Edit Tree, go to Environment, then Domain.\nClick Show Advanced Fields.\nUpdate the values for the following Remote Console Helper attributes as specified:\nRemote Console Helper Cookie Name: JSESSIONID Remote Console Helper Protected Cookie Enabled: false Click Save.\nConnect using a Proxy Server You may need to configure settings for a proxy server to facilitate communication between WebLogic Remote Console and a WebLogic Server domain that resides in a different network.\nYou can configure a global proxy server that applies to all Administration Server connections or you can assign proxy server settings individually to each Administration Server connection.\nYou can also configure a combination of global and individual settings; the individual proxy server settings will override the global proxy server settings.\nTo apply a global proxy server that affects all Administration Server connections:\nGo to File, then Settings. (On macOS, go to WebLogic Remote Console, then Settings.)\nUnder the Networking section, in the Proxy Address field, enter the address of the proxy server, including both the host name and port number.\nClick Save to apply your changes.\nAlthough it is possible to create multiple global proxy servers using Java system properties, we do not recommend it. Configuring multiple global proxy servers can lead to unexpected and unwanted behavior. This applies even if the proxy servers use different protocols: if you use Java system properties to add a proxy server that uses HTTPS and then another that uses SOCKS, WebLogic Remote Console will ignore the SOCKS proxy server.\nThe proxy server value in the Settings dialog box takes precedence over global proxy server settings that were set using Java system properties.\nTo apply proxy server settings to a single Administration Server connection:\nOpen the Providers drawer.\nBeside the Administration Server provider where you want to configure a proxy server, click Settings.\nIn the Proxy Override field, enter the address of the proxy server, including both the host name and port number.\nIf you want to bypass a global proxy server and make a direct connection, enter DIRECT.\nClick OK.\nChange Network Timeout Settings You can change the default settings for the connection and read timeout limits used with a WebLogic Server domain from WebLogic Remote Console.\nGo to File, then Settings. (On macOS, go to WebLogic Remote Console, then Settings.)\nUnder the Networking section, in the Administration Server Connection Timeout field, specify an interval (in milliseconds) to determine how long the WebLogic Remote Console should wait for a successful connection to a domain. The default is 10 seconds (10 000 milliseconds).\nIn the Administration Server Read Timeout field, specify an interval (in milliseconds) to determine how long the WebLogic Remote Console should wait for a response from the server. The default is 20 seconds (20 000 milliseconds).\nClick Save to apply your changes.\nWhen changing network timeout settings, the primary impact will be to the response time for Console threads, while the application will show no data when a timeout occurs. Timeouts are more likely to occur during requests where WebLogic Server experiences longer initialization or execution times, such as during runtime monitoring actions of servers.\nDisable Host Name Verification in Connections to the Domain When using WebLogic demo trust to connect to a domain, it may be necessary to disable host name verification.\nWhen host name verification is disabled, WebLogic Remote Console does not verify that the host name in the URL to which a connection is made matches the host name in the digital certificate that the server sends back as part of the SSL connection.\nGo to File, then Settings. (On macOS, go to WebLogic Remote Console, then Settings.)\nUnder the Networking section, under Disable Host Name Verification, select Yes to disable host name verification or No to enable host name verification.\nClick Save to apply your changes.\nUsing Java System Properties WebLogic Remote Console supports the use of Java system properties to customize the console if a specific setting is not available.\nIf the equivalent setting already exists in the Settings dialog box, we recommend using that configuration option instead of a Java system property. For example, use the Proxy Address option under Networking rather than https.proxyHost and https.proxyPort.\nTo add a Java system property to WebLogic Remote Console:\nGo to File, then Settings. (On macOS, go to WebLogic Remote Console, then Settings.) Under the Other Java System Properties section, click + to add a new row and enter the Java system property as a name-value pair, separated by =. For example, server.port=8092. To delete a property, select the row and click -.\nExamples Lists some examples of supported Java system properties Usage Syntax To set the SameSite cookie attribute if required for web browser support.\nWhen WebLogic Remote Console establishes a connection with the WebLogic Server domain, a HTTP cookie is established with the Web Browser session.\nFor security reasons, the SameSite attribute of the HTTP cookie may need to be set for the Web Browser to accept the HTTP session cookie.\nSet both properties:\nconsole.enableSameSiteCookieValue=true console.valueSameSiteCookie=Lax|Strict The default is Lax.\nTo specify an alternative location for the JDK.\njavaPath=pathToJDK To specify a custom logging configuration file so you can control the logging information that WebLogic Remote Console collects.\nThe custom logging configuration file must follow the Java format for configuration files. You can see an example of a Java logging configuration file at $JAVA_HOME/conf/logging.properties.\nIf a problem occurs with your custom logging configuration file, WebLogic Remote Console will fallback to use its default logging configuration file. STDOUT includes a log message indicating which file was used.\njava.util.logging.config.file=\u0026lt;path-to-logging.properties\u0026gt; Configuring a WebLogic Server Domain After you connect to an Administration Server with WebLogic Remote Console, you are ready to make configuration changes to your domain.\nFor a comprehensive explanation of domain configuration in WebLogic Server, see Understanding Oracle WebLogic Server Domains in Understanding Domain Configuration for Oracle WebLogic Server.\nIn WebLogic Remote Console, it is a generally two step process to apply configuration changes to your domain.\nStep One: Edit When you make changes to your domain, they are saved in a Pending state. They are not active in the domain but you can make changes in other areas without losing them and even if you log out of WebLogic Remote Console, the domain will retain those changes.\nYou can see your pending changes in the Shopping Cart. In the Shopping Cart, click View Changes. If you cannot see specific changes in the Shopping Cart, Install the WebLogic Remote Console Extension.\nWebLogic Remote Console protects your edits from being overwritten by other users by enforcing a configuration lock that prevents other users from making changes to the domain during your editing session. You will retain this lock until you commit (or discard) your changes.\nThe configuration lock only prevents conflicts from other users. If you use the same user account to log in to another WebLogic Server system administration tool such as the WebLogic Scripting Tool (WLST), then WebLogic Server considers both sessions as the same edit session.\nAvoid using making changes using multiple tools simultaneously. When one session commits its changes, it releases the configuration lock and discards changes from the other session.\nStep Two: Commit When you are satisfied with your changes, you must commit them for the changes to apply to the domain. Open the Shopping Cart and then click Commit Changes.\nSome configuration changes apply to the domain immediately - these are called dynamic changes. Other configuration changes require a server restart to take effect and are called non-dynamic changes. A server restart required icon appears beside any attribute that is non-dynamic.\nIf your set of changes contains both dynamic and non-dynamic changes, then none of the changes will take effect until after a server restart. This ensures that the configuration changes are not partially, and potentially imperfectly, implemented.\nWebLogic Remote Console releases the configuration lock after your changes are committed.\nYou may not need to restart all servers to apply non-dynamic changes. In the Monitoring Tree, go to Environment, then Servers to see which servers require a restart.\nAny actions are performed within the Monitoring Tree or Security Data tree perspectives do not require a commit step. They are active immediately after the changes are saved.\nBack Up Configuration Files You can set WebLogic Server to save a domain\u0026rsquo;s existing configuration state before pending changes are committed. If you ever need to reverse a change, then WebLogic Server has the previous set of configuration files (including the central configuration file, config.xml) available as a back up.\nIn the Edit Tree, go to Environment, then Domain.\nClick Show Advanced Fields.\nTurn on the Configuration Archive Enabled option.\nIn the Archive Configuration Count field, enter the number of archive files to retain.\nWhen the maximum number of archive files is reached, older archive files will be discarded.\nClick Save.\nBackups of the previous configuration files are saved in the DOMAIN_HOME/configArchive directory, in JAR files named config-1.jar, config-2.jar, and so on. The archived files are rotated so that the newest file has a suffix with the highest number. For more information, see configArchive in Understanding Domain Configuration for Oracle WebLogic Server.\nPerspectives in the Administration Server Provider The Administration Server provider is split into multiple perspectives, each of which focuses on a different management area for a WebLogic Server domain.\nEdit Tree: an editable view of the WebLogic Server domain. Use this perspective when you want to make changes and commit them to the domain. Configuration View Tree: a read-only view of the WebLogic Server domain. Enter this perspective if you want to see the current settings of the domain, without making any changes. Monitoring Tree: an overview of the runtime statistics for the running domain. You can view statistics per server or aggregated across all servers in the domain. For example, compare applications running on Server1 vs. applications running on one or more servers. The Monitoring Tree also provides some control operations such as starting and stopping servers or applications. Security Data Tree: an editable view of the security providers\u0026rsquo; data in the security realm. This includes users, groups, policies, and so on. Although the Edit Tree and the Configuration View Tree perspectives look similar, they are generated from two separate collections of configuration MBeans, which results in important and distinct nuances between the two perspectives:\nChanges made in the Edit Tree perspective do not appear in the Configuration View Tree perspective until you commit them, or, for non-dynamic changes, until you restart the server. Certain dynamically computed domain contents do not appear in the Edit Tree. For example, Dynamic clusters (and their servers) Situational configurations Changes made from the command line using system properties Changes to some production mode-related settings For more information on the differences between editable Configuration MBeans and read-only Configuration MBeans, see Managing Configuration Changes in Understanding Domain Configuration for Oracle WebLogic Server.\nWhere do I? The majority of domain configuration is performed within the Edit Tree perspective. However, there are some tasks that are performed in the Monitoring Tree or the Security Data Tree perspectives. These tasks do not require a commit step and become active immediately after your changes are saved.\nThe Configuration View Tree perspective is read-only and no management tasks are performed within it. Therefore, it\u0026rsquo;s not included in this table.\nTable 1. Tasks in Each Perspective. Identifies which perspective is responsible for different management tasks. Task Edit Tree Monitoring Tree Security Data Tree Start or stop a server ✔ Deploy an application ✔ Start or stop an application ✔ Configure servers, clusters, and machines ✔ Manage access control ✔ Manage users, groups, roles, policies ✔ Configure security providers ✔ Configure database connectivity ✔ Configure messaging ✔ Diagnose domain issues ✔ Configure SSL/TLS ✔ Create dashboards ✔ Access Limitations To prevent unauthorized changes to your WebLogic Server domains, WebLogic Remote Console limits its functionality based on a user\u0026rsquo;s role.\nIf you log in as a user with more limited permissions, you can be blocked from accessing certain areas or performing certain tasks within WebLogic Remote Console. Administrators always have full access to WebLogic Remote Console.\nThese restrictions are based on the default security policies assigned to each role. If you customize the policies to add or remove access beyond the default policies, those changed permissions will not be reflected in WebLogic Remote Console. It will continue to hide or show functionality based on the default security policies.\nFor more information, see Users, Groups, And Security Roles in Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nTable 2 provides some examples of the limitations that users in non-Administrator roles might encounter.\nTable 2. Access Limitations based on Role. Some examples of the limitations based on role. Role Limitations Deployer User can view but not edit server or domain configurations. They can also modify areas related to application deployment including some JDBC and JMS resources. Monitor User access to WebLogic Remote Console is entirely read-only. Operator User can start and stop servers but cannot see the Edit Tree perspective. Configure Managed Servers Managed Servers are subordinate servers that are managed indirectly through the domain\u0026rsquo;s Administration Server.\nIn a typical production environment, you should create one or more Managed Servers in the domain to host business applications and only use the Administration Server to configure and monitor the Managed Servers.\nYou can configure Managed Servers as standalone instances or organize them into clusters. See Managed Servers and Managed Server Clusters in Understanding Oracle WebLogic Server.\nCreate a Managed Server In the Edit Tree, go to Environment, then Servers.\nClick New.\nEnter a name for the new server.\nSee Domain and Server Name Restrictions in Understanding Domain Configuration for Oracle WebLogic Server.\nYou can copy the settings from an existing server onto your new server. Select a server from the Copy settings from another server drop-down list.\nOnly the server\u0026rsquo;s settings will be copied. Children, such as channels, are not copied. Any settings that are not supported by the WebLogic Server REST API are also not copied.\nClick Create.\nThis process creates a standalone Managed Server. If you want to add the Managed Server to a cluster, follow the instructions in Assign a Managed Server to a Cluster.\nStart a Managed Server Start a Managed Server from WebLogic Remote Console.\nConfigure Node Manager for use with Managed Servers.\nIf you have already configured Node Manager, you can skip to the next step.\nChoose a Node Manager implementation. See Node Manager Implementations in Administering Node Manager for Oracle WebLogic Server.\nConfigure your Node Manager implementation. See either Configuring Java Node Manager or Configuring Script-Based Node Manager in Administering Node Manager for Oracle WebLogic Server.\nStart Node Manager on the computer that you want to host the Managed Server.\nConfigure the Managed Server to communicate with Node Manager.\nIf you have already configured communication between your Managed Servers and the Node Manager, you can skip to the next step.\nConfigure Machines.\nAssign a Server Instance to a Machine.\nConfigure Startup Arguments for a Managed Server.\nChange the startup mode for the Managed Server. The default is RUNNING. See Specify a Startup Mode.\nStart Node Manager on the computer that you want to host the Managed Server.\nThe WebLogic Server custom installation process optionally installs and starts Node Manager as a Windows service on Windows systems. If it\u0026rsquo;s not already running, you can start Node Manager manually at a command prompt or with a script. See Starting and Stopping Node Manager in Administering Node Manager for Oracle WebLogic Server.\nIn the Monitoring Tree, go to Environment, then Servers.\nSelect the server you want to start, then click Start.\nNode Manager starts the server on the target machine. When the Node Manager finishes its start sequence, the server\u0026rsquo;s state is indicated in the State column.\nConfigure Startup Arguments for a Managed Server In most environments, Node Manager can start a server without requiring you to specify startup options. However, if you have modified your environment, such as adding classes to the WebLogic Server class path, you must specify startup options before you can use WebLogic Remote Console to start a server.\nIn the Edit Tree, go to Environment, then Servers.\nSelect the Managed Server that you want to configure startup arguments for.\nOn the Advanced tab, select the Node Manager subtab.\nIf you want the server instance to run under a different WebLogic Server user account, enter the username and password of an existing user in the User Name and Password fields. The user must have a role with permission to start servers.\nThe existing username and password are the values that you supplied when you used WebLogic Remote Console or the Configuration Wizard to create the server.\nUpdate any other fields where you want to override the default values provided by the Node Manager.\nWebLogic Remote Console replaces the Node Manager default values, it does not append the new values to the default values. For more information, see Reviewing nodemanager.properties in Administering Node Manager for Oracle WebLogic Server.\nAll paths refer to paths on the Node Manager machine.\nIf you provide values for the Class Path field, make sure that you provide the full class path required to start the Managed Server.\nIf you want to add Arguments, make sure you prepend -D before each argument, like so -Dweblogic.management.startupMode=MODE .\nSee weblogic.Server Command-Line Reference in Command Reference for Oracle WebLogic Server for information on the Java options that set runtime behavior of a WebLogic Server instance and Configuring Node Manager to Use Start and Stop Scripts in Administering Node Manager for Oracle WebLogic Server for information on how JAVA_OPTIONS are combined and how duplicate values are handled.\nClick Save.\nRepeat for every applicable Managed Server.\nSpecify a Startup Mode The startup mode specifies the state in which a server instance should be started. The default is to start in the RUNNING state.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nUnder the General tab, click Show Advanced Fields.\nIn the Startup Mode field, enter one of the following startup modes (in uppercase as shown):\nRUNNING (default): a server offers its services to clients and can operate as a full member of a cluster. ADMIN: the server is up and running, but available only for administration operations, allowing you to perform server and application-level administration tasks without risk to running applications. STANDBY: the server listens for administrative requests only on the domain-wide administration port and only accepts life cycle commands that transition the server instance to either the RUNNING or SHUTDOWN state. Other administration requests are not accepted. If you specify STANDBY, you must also enable the domain-wide administration port. See Configure the Domain-Wide Administration Port. See Understanding Server Life Cycle in Administering Server Startup and Shutdown for Oracle WebLogic Server. Click Save.\nConfigure Clusters A WebLogic Server cluster consists of multiple WebLogic Server server instances running simultaneously and working together to provide increased scalability and reliability.\nA cluster appears to clients as a single WebLogic Server instance. The server instances that constitute a cluster can run on the same machine or be located on different machines. You can increase a cluster’s capacity by adding additional server instances to the cluster on an existing machine or you can add machines to the cluster to host the incremental server instances. Each server instance in a cluster must run the same version of WebLogic Server. See Understanding WebLogic Server Clustering in Administering Clusters for Oracle WebLogic Server.\nYou can also create dynamic clusters which consist of server instances that can be dynamically scaled up or down to meet the resource needs of your applications. A dynamic cluster uses a single server template to define configuration for a specified number of generated (dynamic) server instances. For more information, see Dynamic Clusters in Administering Clusters for Oracle WebLogic Server.\nCreate a Cluster Create a WebLogic Server cluster.\nIn the Edit Tree, go to Environment, then Clusters.\nClick New.\nEnter a name for the cluster.\nClick Create.\nAssign a Managed Server to a Cluster You can add an existing Managed Server to clusters.\nIf you haven\u0026rsquo;t already, create a cluster. See Create a Cluster.\nShut down the Managed Server. You cannot change the cluster of a running server.\nIn the Edit Tree, go to Environment, then Servers.\nSelect the Managed Server you want to add to a cluster.\nFrom the Cluster drop-down list, select the cluster where you want to assign this Managed Server.\nClick Save and commit your changes.\nStart the Managed Server.\nCreate a Dynamic Cluster Create a cluster that dynamically scales depending on the resource needs of your applications.\nIf you haven\u0026rsquo;t already, create a cluster and a server template. See Create a Cluster and Create a Server Template.\nGo to the Environment, then Clusters, then myCluster and select the Dynamic tab.\nSelect a server template from the Server Template drop-down list.\nIf you do not have a server template or if you want to create a new one, click More ︙ beside the Server Template drop-down list and select Create New Server Template. Enter a unique name for the new server template.\nIn the Dynamic Cluster Size field, enter the maximum number of running dynamic server instances allowed for scale up operations in this dynamic cluster. This number is the sum of the Dynamic Cluster Size and the additional number of dynamic server instances allowed for scale up operations.\nIn the Server Name Prefix, specify the naming convention you want to use for the dynamic servers in your cluster.\nIf you want to specify how the dynamic servers in your cluster are distributed across machines, turn on Enable Calculated Machine Associations and then configure Machine Name Match Expression.\nMachine distribution is determined by the pattern set in Machine Name Match Expression. If a machine in the domain matches the expression, then it will be included in the set of machines used by these dynamic servers. The expression is a comma-separated set of values that specifies the machines to match. The value can either match a machine name exactly or, you can use a trailing * to match multiple machine names. If you do not enter a pattern, then all machines in the domain are available to the dynamic servers.\nIf you want to specify whether listen ports are calculated, turn on Enable Calculated Listen Ports.\nClick Save.\nConsider configuring elasticity on the cluster to control how the cluster scales up or down. See Configuring Dynamic Clusters in Configuring Elasticity in Dynamic Clusters for Oracle WebLogic Server for more information.\nRemove a Server from a Cluster You can remove a Managed Server from a cluster without deleting the server instance from the domain.\nIn the Edit Tree, go to Environment, then Servers.\nSelect the Managed Server you want to remove from a cluster to make it a standalone server instance.\nFrom the Cluster drop-down list, select None.\nClick Save.\nDefine a Singleton Service A singleton service is a service running on a Managed Server that is available on only one member of a cluster at a time. WebLogic Server lets you automatically monitor and migrate singleton services from one server to another.\nSingleton services can only be migrated automatically within a cluster. Ensure that you have created and configured a cluster and its member server instances.\nIn the Edit Tree, go to Environment, then Singleton Services.\nClick New.\nEnter a name for the singleton service.\nClick Create.\nFrom the Cluster drop-down list, select the cluster in which you want to apply this singleton service.\nIn the Class Name field, define the fully qualified name of the class. The class must also be contained in the server class path.\nThe class specified in Class Name must implement the singleton service interface to function as a migratable singleton service. See Service Migration in Administering Clusters for Oracle WebLogic Server.\nIn the Additional Migration Attempts field, enter the number of additional attempts that should be tried to reach a migratable service after the service has failed on every possible configured server instance at least once.\nIn the Sleep Time Between Attempts field, enter the interval between migration attempts.\nClick Save.\nIf you want to specify the migration behavior of this target, go to the Migration tab.\nFrom the User Preferred Server drop-down list, select the preferred server instance for this singleton service.\nIn the Constrained Candidate Servers field, choose which server instances in the cluster to use as a backup for services on this singleton service. Move selected server instances from Available to Chosen.\nClick Save.\nBy default, the singleton service iterates through all servers in the cluster to determine the list of candidate servers for migration.\nCreate a Server Template Server templates define non-default settings and attributes that you can apply to a set of server instances.\nWhen you create a server template and then apply it to Managed Servers, you can specify configuration attributes once and then propagate the new attribute settings to server instances without manually configuring each one. When you need to update an attribute, you can simply change the value in the server template, and the new value takes effect in all of the server instances that use that server template. You can also add a server template to a cluster, then all of the servers within the cluster will inherit the server template. See Server Templates in Understanding Domain Configuration for Oracle WebLogic Server.\nIf you need to define any server-specific attributes, you can easily override the server template at the individual server level.\nIn the Edit Tree, go to Environment, then Server Templates.\nClick New.\nEnter a unique name for the server template.\nClick Create\nAfter you create a server template, you can configure its attributes as you would configure a traditional Managed Server.\nApply a Server Template Server templates define common configuration attributes for a set of server instances in one centralized location. When you apply a server template to a Managed Server or a cluster, the server instances inherit the configurations from the server template.\nTo apply a server template to a standalone Managed Server:\nIn the Edit Tree, go to Environment, then Servers.\nSelect the Managed Server where you would like to apply the server template.\nFrom the Template drop-down list, select a template. You can also click More ︙ to create and apply a new server template.\nClick Save.\nTo apply a server template to a cluster:\nIn the Edit Tree, go to Environment, then Clusters.\nSelect the cluster where you would like to apply the server template.\nFrom the Template drop-down list, select a template. You can also click More ︙ to create and apply a new server template.\nClick Save.\nConfigure Machines A machine is the logical representation of the computer that hosts one or more WebLogic Server instances. Each Managed Server must be assigned to a machine.\nAs part of the machine configuration process, you\u0026rsquo;ll also configure each machine in your domain to communicate with Node Manager, a program used to control WebLogic Server instances. A single Node Manager instance is used to control all of the server instances running on the same physical machine. These instances can reside in different clusters, domains, and so on. See About Node Manager in Administering Node Manager for Oracle WebLogic Server.\nIn the Edit Tree, navigate to Environment, then Machines.\nClick New.\nEnter a name for the new machine.\nIf you are creating a machine that will run on a UNIX platform, select UNIX Machine from the Type drop-down list.\nClick Create.\nConfigure the settings of your new machine under Environment, then Machines, then myMachine.\nOn the Node Manager tab, configure the following properties:\nin the Type drop-down list, select the Node Manager type.\nIn the Listen Address field, enter the DNS name or IP address upon which Node Manager listens for incoming requests.\nIf you identify the Listen Address by IP address, you must disable Host Name Verification on Administration Servers that will access Node Manager. For more information and instructions, see Using Host Name Verification in Administering Security for Oracle WebLogic Server and Enable Host Name Verification.\nIn the Listen Port field, enter the port value where Node Manager listens for incoming requests.\nIf you set Type to SSH or RSH, you should also specify values in the Node Manager Home and Shell Commands fields.\nTurn on Debug Enabled if you want to enable Node Manager debugging.\nClick Save.\nThe new machine entry now specifies the attributes required to connect to the Node Manager process running on the machine, as well as identify which WebLogic Server instances reside on the machine.\nNext, see Assign a Server Instance to a Machine.\nAssign a Server Instance to a Machine As part of the process for setting up Node Manager to administer Managed Servers, you must assign a server instance to a machine.\nYou cannot change the machine of a server that\u0026rsquo;s running, therefore you cannot use WebLogic Remote Console to change the machine of the Administration Server. Use an offline tool, such as WLST Offline instead.\nShut down the Managed Server. You cannot change the machine of a running server.\nIn the Edit Tree, go to Environment, then Servers.\nSelect the Managed Server that you want to assign to a machine.\nIn the Machine drop-down list, select the machine to which you want to assign this server.\nClick Save.\nConfigure a Virtual Host A virtual host is a set of host names to which servers or clusters respond. When you use virtual hosting, you use DNS to specify one or more host names that map to the IP address of a server or cluster. You also specify which web applications are served by each virtual host.\nIn the Edit Tree, go to Environment, then Virtual Hosts.\nClick New.\nEnter a name for the virtual host.\nClick Create.\nIn the Virtual Host Names field, enter the host names for which this virtual host will serve requests. Use line breaks to separate host names.\nIn the Network Access Point Name field, enter the dedicated server channel name (NetworkAccessPoint) for which this virtual host serves HTTP requests.\nClick Save.\nOn the HTTP tab, configure HTTP attributes for the virtual host as needed. Click Save.\nOn the Logging tab, configure the default log file settings for the virtual host as needed. Click Save.\nOn the Targets tab, select the servers or clusters where you want to deploy this virtual host.\nClick Save.\nUse Custom Classes to Configure Servers You can create custom Java classes that extend server features or that perform some task when a server instance starts or shuts down.\nThese startup classes or shutdown classes are loaded by the system class loader and therefore are available to all resources on a server instance even if the resources are managed by different containers. For example, EJBs and JMX clients can access startup or shutdown classes even though their containers use their own, higher level class loaders.\nThese are system-level classes so you must place them on the server\u0026rsquo;s class path. If you want to make custom classes available to multiple applications but do not need the classes to be available at the system level, consider deploying them as application startup classes.\nFor more information, see Configuring Server Level Startup and Shutdown Classes in Administering Server Startup and Shutdown for Oracle WebLogic Server.\nConfigure Startup Classes You can create custom Java classes that extend server features or that perform some task when a server instance starts.\nIn the Edit Tree, go to Environment, then Startup Classes.\nClick New.\nEnter a name for the startup class and click Create.\nOn the configuration page for your new startup class, in the Class Name field, enter the fully qualified name of the startup class.\nFor example: mycompany.myclasses.startupclass.\nModify other startup class attributes as necessary.\nClick Save.\nOn the Targets tab, move the server instances or clusters where you want to deploy this startup class over to Chosen.\nClick Save.\nYou must add the startup class to the class path of each server where it is deployed.\nIf you use a script to start server instances, perform these steps.\nOpen the start script in a text editor.\nIn the command that sets the class path, add the path of the directory that contains your class root package and save the script.\nFor example, if you create a startup class named StartBrowser in a package named com.mycompany.startup, and you archive the class file in a JAR file named /myDomain/src/myJAR.jar, then the start script for your server must add /myDomain/src/myJAR.jar to the server\u0026rsquo;s class path.\nRestart the server.\nIf you use Node Manager to start server instances, perform the following steps on every server that will run the startup class.\nGo to Environment, then Servers, then select the server you want to modify.\nOn the Advanced tab, select the Node Manager sub-tab.\nIn the Class Path field, add the pathname for your class or for a JAR file that contains your class.\nFor example, if you create a startup class named StartBrowser in a package named com.mycompany.startup, and you archive the class file in a JAR file named /myDomain/src/myJAR.jar, then the Class Path field should contain this value: /myDomain/src/myJAR.jar to the server\u0026rsquo;s class path.\nEnsure that all of the classes that WebLogic Server requires are also on the class path. Use absolute paths or paths relative to the Node Manager\u0026rsquo;s home directory. Separate multiple classes with either : (BASH) or ; (Windows).\nFor example, /Oracle/Middleware/wlserver/server/lib/weblogicsp.jar:/Oracle/Middleware/wlserver/server/lib/weblogic.jar:/myDomain/src/myJAR.jar\nClick Save.\nRepeat on any additional servers.\nConfigure Shutdown Classes You can create custom Java classes that extend server features or that perform some task when a server instance shuts down.\nIn the Edit Tree, go to Environment, then Shutdown Classes.\nClick New.\nEnter a name for the shutdown class and click Create.\nOn the configuration page for your new shutdown class, in the Class Name field, enter the fully qualified name of the shutdown class.\nFor example: mycompany.myclasses.shutdownclass.\nModify other shutdown class attributes as necessary.\nClick Save.\nOn the Targets tab, move the server instances or clusters where you want to deploy this shutdown class over to Chosen.\nClick Save.\nYou must add the shutdown class to the class path of each server where it is deployed.\nIf you use a script to stop server instances, perform these steps.\nOpen the stop script in a text editor.\nIn the command that sets the class path, add the path of the directory that contains your class root package and save the script.\nFor example, if you create a shutdown class named StopBrowser in a package named com.mycompany.shutdown, and you archive the class file in a JAR file named /myDomain/src/myJAR.jar, then the stop script for your server must add /myDomain/src/myJAR.jar to the server\u0026rsquo;s class path.\nRestart the server.\nIf you use Node Manager to shutdown server instances, perform the following steps on every server that will run the shutdown class.\nGo to Environment, then Servers, then select the server you want to modify.\nOn the Advanced tab, select the Node Manager sub-tab.\nIn the Class Path field, add the pathname for your class or for a JAR file that contains your class.\nFor example, if you create a shutdown class named StopBrowser in a package named com.mycompany.shutdown, and you archive the class file in a JAR file named /myDomain/src/myJAR.jar, then the Class Path field should contain this value: /myDomain/src/myJAR.jar to the server\u0026rsquo;s class path.\nEnsure that all of the classes that WebLogic Server requires are also on the class path. Use absolute paths or paths relative to the Node Manager\u0026rsquo;s home directory. Separate multiple classes with either : (BASH) or ; (Windows).\nFor example, /Oracle/Middleware/wlserver/server/lib/weblogicsp.jar:/Oracle/Middleware/wlserver/server/lib/weblogic.jar:/myDomain/src/myJAR.jar\nClick Save.\nRepeat on any additional servers.\nAfter you delete a shutdown class, it will run the first time you shut down the server. When you shut down the sever subsequently, it will no longer run.\nConfigure Network Connections Configure the network resources for your domain.\nAs your domain increases in complexity, it is imperative to carefully manage the network resources and connections within your domain to ensure secure and reliable communication between servers and applications.\nWebLogic Server uses network channels to organize and define the attributes of its network connections. Among other attributes, network channels can define:\nThe protocol the connection supports The listen address The listen ports for secure and non-secure communication See Understanding Network Channels in Administering Server Environments for Oracle WebLogic Server.\nEach WebLogic Server instance provides default settings for the protocols, listen addresses, and listen ports through which it can be reached. These settings are referred to collectively as the default network channel. This default network channel provides two listen ports through which it receives requests: one for non-SSL/TLS requests and the other for SSL/TLS requests. You can disable one of these ports, but at least one must be enabled.\nYou can also configure your own custom network channels.\nConfigure the Domain-Wide Administration Port An administration port restricts all administrative traffic between server instances in a WebLogic Server domain to a single port. Additionally, only secure, SSL/TLS traffic is accepted and all connections through the port require authentication by a server administrator.\nEnabling the administration port imposes the following restrictions on your domain:\nThe Administration Server and all Managed Servers in your domain must be configured with support for the SSL/TLS protocol. All servers in the domain, including the Administration Server, enable or disable the administration port at the same time. See Configure an Administration Port for the Domain in Securing a Production Environment for Oracle WebLogic Server.\nShut down all Managed Servers in the domain. You cannot enable the administration port dynamically on a Managed Server.\nEnsure that all servers in the domain are properly configured to use SSL/TLS. See Set Up SSL/TLS.\nIn the Edit Tree, go to Environment, then Domain.\nTurn on the Enable Administration Port option.\nIn the Administration Port field, enter the SSL/TLS port number that server instances in the domain should use as the administration port.\nIf multiple server instances run on the same computer in a domain that uses a domain-wide administration port, then you must perform one of the following actions:\nHost the server instances on a multi-homed machine and assign each server instance a unique listen address Override the domain-wide administration port on all but one of the servers instances on the machine. On the Environment: Servers: myServer page for each Managed Server, enter a unique port value in the Local Administration Port Override field. Click Save and then commit your changes.\nRestart the Administration Server and start all the Managed Server instances in the domain.\nMake sure the connection between the Managed Servers and the Administration Server uses the administration port.\nConfigure Custom Network Channels A network channel is a configurable resource that defines the attributes of a network connection to WebLogic Server.\nIn the Edit Tree, go to Environment, then Servers, then myServer, then Channels.\nClick New.\nEnter a name for the new network channel.\nClick Create.\nA node for the new network channel will appear under the Channels node.\nGo to the new node to define the configuration for the new network channel.\nAt minimum, you should define the following information:\nListen address Listen port External listen address External listen port The external listen address and port are used to support Network Address Translation (NAT) firewalls. These should match the IP address or DNS name that clients use to access application on the server. Click Save.\nSpecify a Listen Address Define the listen address that a server uses for incoming connections.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nIn the Listen Address field, enter an IP address or DNS name for this server to use to listen for incoming connections.\nNote that the value you specify for the listen address is not the URL to the host machine and it does not include the communication protocol, listen port, or channel.\nServers can be reached through the following URL: protocol://listen-address:listen-port\nClick Save.\nSpecify Listen Ports Define the listen ports for secure and non-secure communication.\nYou cannot disable both Listen Port Enabled or SSL Listen Port Enabled. At least one type of listen port must be active.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nEnable Listen Port Enabled and enter a port number.\nEnable SSL Listen Port Enabled and enter a port number.\nClick Save.\nIf you plan to configure a domain-wide administration port, make sure the SSL Listen Port and the Administration Port are set to different port numbers.\nConfigure General Protocol Settings You can configure each WebLogic Server instance to communicate over a variety of protocols, such as HTTP, T3, and IIOP. You can also configure a group of communication settings that apply to all protocols.\nThe general protocol settings apply to connections that use the server\u0026rsquo;s default listen port and listen address. If you create network channels for this server, each channel can override these settings. For more information, see Configuring Network Resources in Administering Server Environments for Oracle WebLogic Server.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nOn the Protocols tab, on the General tab, modify the default settings for protocols as necessary.\nClick Save.\nRepeat on applicable servers.\nConfigure HTTP You can define settings for HTTP connections.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nOn the Protocols tab, go to the HTTP subtab and update the settings for HTTP as necessary.\nIf you want to enable the tunneling of connections, turn on the Enable Tunneling option and then enter values in the Tunneling Client Ping and Tunneling Client Timeout fields.\nThese settings apply to all protocols in the server\u0026rsquo;s default network configuration that support tunneling. See Setting Up WebLogic Server for HTTP Tunneling in Administering Server Environments for Oracle WebLogic Server.\nClick Save.\nConfigure T3 Protocol T3 is an Oracle proprietary remote network protocol that implements the Remote Method Invocation (RMI) protocol.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nOn the Protocols tab, in the Complete Message Timeout field, enter the maximum number of seconds that this server should wait for a complete message to be received.\nIn the Maximum Message Size field, enter the maximum number of bytes allowed in messages that are received over all supported protocols, unless overridden by a protocol-specific setting or a custom channel setting.\nTurn on the Enable Tunneling option and then enter values in the Tunneling Client Ping and Tunneling Client Timeout fields.\nThese settings apply to all protocols in the server\u0026rsquo;s default network configuration that support tunneling. See Setting Up WebLogic Server for HTTP Tunneling in Administering Server Environments for Oracle WebLogic Server.\nClick Save.\nConfigure IIOP The IIOP (Internet Inter-ORB Protocol) makes it possible for distributed programs written in different programming languages to communicate over the internet.\nFor information about using RMI-IIOP in your applications, see Understanding WebLogic RMI in Developing RMI Applications for Oracle WebLogic Server.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nOn the Protocols tab, go to the IIOP subtab.\nTurn on the Enable IIOP.\nIf you want to modify the default configuration of IIOP (including the default IIOP user credentials), click Show Advanced Fields and update the options as necessary.\nClick Save.\nChange the Domain Mode The domain mode of your WebLogic Server domain determines its default security configuration. Select the domain mode that best meets the security requirements of the environment in which WebLogic Server runs.\nThe domain modes, in order from least to most secure, are Development Mode, Production Mode, and Secured Production Mode. We recommend that you only use development mode for domains in development or demonstration environments.\nThe default values for various security configurations will change to match the selected domain mode. See Understand How Domain Mode Affects the Default Security Configuration in Securing a Production Environment for Oracle WebLogic Server.\nAs of WebLogic Server 14.1.2.0.0, production mode now turns on secured production mode by default. All new installations of WebLogic Server 14.1.2.0.0 and later follow this behavior. In previous releases, when you enabled production mode, secured production mode was disabled by default and you had to enable it explicitly.\nIf you upgrade from WebLogic Server 14.1.1.0.0 and earlier, the behavior of your domain mode will not change. For example, when a domain in production mode is upgraded from 14.1.1.0.0 to 14.1.2.0.0 or later, it will remain in production mode with secured production mode disabled. However, if you upgrade your domain to 14.1.2.0.0 or later, and then select production mode as the new domain mode, it will enable secured production mode by default.\nShut down all of the Managed Servers in the domain.\nChanges to the domain mode require a full domain restart - a rolling restart is not sufficient.\nIn the Edit Tree, go to Environment, then Domain.\nChange the domain mode:\nDescribes how to change the domain mode. Target domain mode Perform these steps Development Mode Disable the Production Mode option to convert your domain to development mode. Production Mode Enable the Production Mode option to convert your domain to production mode. Note: As of WebLogic Server 14.1.2.0.0, when you select production mode, secured production mode is enabled by default. If you want to apply the features of basic production mode only, then you must explicitly disable the Secured Production Mode option. If you use Node Manager to start your Managed Servers, then you must also add the -Dweblogic.securemode.SecureModeEnabled=false startup argument to each Managed Server. See Configure Startup Arguments for a Managed Server.\nSecured Production Mode Enable the Production Mode and Secured Production Mode options. Note: For more information, see Using Secured Production Mode in Administering Security for Oracle WebLogic Server .\nClick Save.\nCommit your changes and restart your Administration Server. Then, you can start your Managed Servers.\nChanges to the domain mode can affect the default URL of the Administration Server, specifically the protocol and the port number. When SSL/TLS and the administration port are enabled (by default, both are enabled in secured production mode), the default URL ishttps://hostname:9002. When SSL/TLS and the administration port are disabled (by default, both are disabled in development mode), the default URL is http://hostname:7001.\nResume a Server If a server in the STANDBY or ADMIN state, when you are ready for the server to receive requests other than administration requests, you can resume the server to transition it into the RUNNING state.\nFor more information on the different server states, see Understanding Server Life Cycle in Administering Server Startup and Shutdown for Oracle WebLogic Server.\nIn the Monitoring Tree, go to Environment, then Servers.\nSelect the servers that you want to transition into a RUNNING state and click Resume.\nSuspend a Server When you suspend a server, it transitions a server instance from the RUNNING state to the ADMIN state. In the ADMIN state, the server is running, but it is only available for administration operations. This allows you to perform server and application-level administration tasks without risk to running applications.\nFor more information on the different server states, see Understanding Server Life Cycle in Administering Server Startup and Shutdown for Oracle WebLogic Server.\nIn the Monitoring Tree, go to Environment, then Servers.\nSelect the servers that you want to transition into an ADMIN state.\nClick Suspend and choose how the server completes its current tasks:\nWhen work completes: initiates a graceful suspension, which gives WebLogic Server subsystems and services time to complete certain application processing currently in progress. Force suspend now: initiates a forced suspension, in which the server instructs subsystems to immediately drop in-flight requests. Shut Down a Server You can use WebLogic Remote Console to shut down a server instance of WebLogic Server.\nWebLogic Remote Console is one of several tools you can use to shut down a server instance. For other options, see Shutting Down Instances of WebLogic Server in Administering Server Startup and Shutdown for Oracle WebLogic Server.\nIf you shut down the Administration Server, you won\u0026rsquo;t be able to manage the domain from WebLogic Remote Console until it is restarted.\nIf you want to shut down a server gracefully and allow some WebLogic Server subsystems to complete existing tasks, then you can configure graceful shutdown settings.\nThese options only apply when a server is shutdown gracefully. A forceful shutdown ignores them.\nIn the Edit Tree, go to Environment, then Servers, then select the server where you want to apply grace shutdown settings.\nOn the Advanced tab, select the Start/Stop sub-tab.\nTurn on Ignore Sessions During Shutdown to force the server to drop all HTTP sessions immediately instead of waiting for them to complete or timeout.\nWaiting for abandoned HTTP sessions to timeout can significantly lengthen the graceful shutdown process because the default session timeout is one hour.\nSpecify a Graceful Shutdown Timeout in seconds to determine how long the server should wait before forcing a shutdown.\nRepeat on applicable servers.\nIn the Monitoring Tree, go to Environment, then Servers.\nSelect the servers that you want to shut down.\nClick Shutdown and choose how the server completes its tasks:\nWhen work completes: initiates a graceful shutdown, which gives WebLogic Server subsystems time to complete certain application processing currently in progress. Force shutdown now: initiates a forced shutdown, in which the server instructs subsystems to immediately drop in-flight requests. See Understanding Server Life Cycle in Administering Server Startup and Shutdown for Oracle WebLogic Server. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/administration-server/securing-domains/",
	"title": "Securing Domains",
	"tags": [],
	"description": "",
	"content": "WebLogic Server offers a robust set of security tools to protect your WebLogic Server environment from unauthorized access. Use WebLogic Remote Console to secure your system.\nFor general information on security concepts in WebLogic Server, see:\nUnderstanding Security for Oracle WebLogic Server Administering Security for Oracle WebLogic Server Securing Resources Using Roles and Policies for Oracle WebLogic Server Securing a Production Environment for Oracle WebLogic Server Address Potential Security Issues WebLogic Server regularly checks your domain to ensure it complies with its recommended security policies. If a domain does not meet the recommendations, a security warning is logged and displayed in WebLogic Remote Console.\nWhen there are active security warnings in your domain, a red banner appears across the top of the WebLogic Remote Console window. It will remain until you have fixed the security issue.\nFor more information on the issues that might trigger a security warning, see Review Potential Security Issues in Securing a Production Environment for Oracle WebLogic Server.\nDo not rely on the Security Warnings Report alone to determine the security of your domain. While these security configuration settings cover a broad set of potential security issues, other security issues that do not generate warnings may still exist in your domain.\nEnvironments running WebLogic Server 14.1.1.0 and earlier require the July 2021 Patch Set Update (PSU) to see security warnings.\nIn the Security Warnings banner, click View/Refresh Report to see which issues have been flagged.\nYou can also get to the Security Warnings page through the Monitoring perspective, then Environment, then Domain Security Runtime.\nReview the description of the issue to understand the security warning.\nFollow the steps suggested in Resolution Information to fix the problem.\nThe same issue can affect multiple servers within your domain simultaneously. Make sure to fix the issue on every affected server.\nIf you think certain policies don\u0026rsquo;t apply to your environment or are not feasible to implement with your business needs, you can disable individual security checks, with the exception of the minimum JDK version check.\nIf necessary, restart the servers to apply the fix and clear the security warnings.\nSecurity Warning Fixes For the latest information on security warnings and their suggested steps for resolution, see the My Oracle Support article, WebLogic Server Security Warnings (Doc ID 2788605.1).\nThe same issue may affect multiple servers within your domain simultaneously. As you review the Security Warnings Report, make sure that you fix the issue on every affected server. Depending on the problem and its resolution, you may need to restart servers to update the Security Warnings Report.\nSecurity Realms A security realm is a collection of mechanisms designed to protect WebLogic Server resources. Each security realm consists of a set of configured security providers, users, groups, security roles, and security policies. A user must be defined in a security realm in order to access any WebLogic resources belonging to that realm.\nFor more information, see Security Realms in Understanding Security for Oracle WebLogic Server.\nWebLogic Server provisions each new domain with a security realm with pre-configured security configurations. See The Default Security Configuration in WebLogic Server in Administering Security for Oracle WebLogic Server.\nIf the default security configurations do not meet your requirements, you can create a new security realm with custom settings and providers and set it as the default security realm. See Customizing the Default Security Configuration in Administering Security for Oracle WebLogic Server.\nYou can set WebLogic Server to immediately apply non-dynamic changes to a security realm without restarting WebLogic Server. See Enable Automatic Realm Restart.\nRequired Security Providers For a security realm to be valid, the following security providers must be configured:\nAuthentication provider Authorization provider Adjudication provider Credential Mapping provider Certification Path provider Role Mapping provider WebLogic Server includes a default option for each of the required security providers, plus alternative options if the default provider does not suit your needs. You can also create your own custom providers.\nCreate a Security Realm A security realm organizes the security configurations of a domain.\nBefore you create a new security realm, review the considerations outlined in Before You Create a New Security Realm in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms.\nClick New.\nEnter a name for the new security realm.\nTurn on the Create Default Providers option if you want WebLogic Server to add the required security providers to the security realm, ensuring that the new security realm is valid.\nYou can modify the default providers or replace them with another provider as needed.\nIf you do not enable Create Default Providers, then you must manually configure the required security providers before you can commit the new security realm. For a list of which security providers are required, see Required Security Providers.\nClick Create.\nChange Default Security Realm You can configure WebLogic Server to replace the default security configurations with a custom security realm.\nAlthough you can customize the original default security configuration, Oracle recommends creating an entirely new security realm and making changes to security configurations there, which allows you to easily revert to the original default security configuration if necessary.\nIf you haven\u0026rsquo;t done so already, create a new security realm. See Create a Security Realm.\nIn the Edit Tree, go to Environment, then Domain.\nSelect the Security tab.\nFrom the Default Realm drop-down list, select the security realm that you want to make the default.\nClick Save.\nConsider enabling the configuration archive to save previous domain configurations so you can revert to a previous security configuration if necessary. See Back Up Configuration Files.\nRevert to a Previous Security Configuration Certain mistakes when configuring a new security realm or security providers can prevent you from booting the server. If this happens, then you can revert the configuration XML files to reinstate a previous realm configuration and recover from the error.\nYou can only revert to a previous configuration if configuration archiving is enabled and has been saving previous versions of the configuration. See Back Up Configuration Files.\nYou can also use WLST Offline to correct a mistake that prevents you from booting the server.\nThis process will only revert your security realm (meaning, the configuration of the realm and its providers), not the users, groups, roles, or security policies used by the realm, which are persisted in a data store and not in the configuration files.\nLocate the config.jar file that contains the security configuration to which you want to revert, copy it to a temporary directory, and unpack it.\nCopy the unpacked configuration files to the appropriate location in the DOMAIN_HOME/config directory. For information about which directories hold which configuration files, see Domain Directory Contents in Understanding Domain Configuration for Oracle WebLogic Server.\nRestart WebLogic Server.\nEnable Automatic Realm Restart You can set WebLogic Server to immediately apply non-dynamic changes to a security realm without restarting WebLogic Server.\nIn the default security realm, automatic realm restart is disabled by default. In new security realms that you create, automatic realm restart is enabled by default.\nFor more information, see Using Automatic Realm Restart in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms, then myRealm.\nEnable the Automatically Restart after Non-Dynamic Changes option.\nClick Save.\nSecurity Providers The WebLogic Security Service supports a wide variety of security architectures, including multiple security providers.\nBefore you configure security providers for your WebLogic security realm, you should have a good understanding of how the WebLogic Security Service works and what sort of security architecture you want for your WebLogic environment. See:\nOverview of the WebLogic Security Service in Understanding Security for Oracle WebLogic Server Configuring Security Providers in Administering Security for Oracle WebLogic Server. Introduction to Developing Security Providers for WebLogic Server in Developing Security Providers for Oracle WebLogic Server. Understanding WebLogic Resource Security in Securing Resources Using Roles and Policies for Oracle WebLogic Server. Your security architecture can consist of a combination of the default security providers included in WebLogic Server, security providers developed by third parties, or custom security providers that you develop yourself.\nTypes of security providers include:\nAuthentication providers Identity Assertion providers Authorization providers Adjudication providers Role Mapping providers Credential Mapping providers Auditing providers Configure an Authentication or Identity Assertion Provider Use authentication providers to prove the identity of users or system processes. The WebLogic Authentication provider and WebLogic Identity Assertion provider are enabled by default but you can configure additional authentication or identity assertion providers as needed.\nFor more information about the authentication and identity assertion providers included in WebLogic Server, see Choosing an Authentication Provider in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then Authentication Providers.\nClick New.\nIn the Name field, enter a name for the new provider.\nFrom the Type drop-down list, select the type of authentication provider.\nClick Create.\nOn the Configuration page for the new authentication provider, set the appropriate values on the Common and Provider-Specific Parameters tabs.\nClick Save.\nWe recommend that you configure the Password Validation provider immediately after configuring a new WebLogic domain. The password validation provider, which is included with WebLogic Server, can be configured with several out-of-the-box authentication providers to manage and enforce password composition rules. Whenever a password is created or updated in the security realm, the corresponding authentication provider automatically invokes the password validation provider to ensure that the password meets the established composition requirements. For more information, see Configure the Password Validation Provider.\nSet the JAAS Control Flag If you have multiple Authentication providers in your domain, use the JAAS control flag to control how each Authentication provider is used in the login sequence.\nFor information on how WebLogic Server handles multiple Authentication providers, see Using More Than One Authentication Provider in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms and choose the security realm where you want to make changes.\nExpand the Authentication Providers node and choose the Authentication provider that you want to configure.\nSelect an option from the Control Flag drop-down list:\nRequired Requisite Sufficient Optional For information on each value, see Setting the JAAS Control Flag Option in Administering Security for Oracle WebLogic Server. Click Save.\nRepeat for the rest of the Authentication providers in the domain.\nConfigure an Authorization Provider Use Authorization providers to determine who has access to a resource.\nFor more information on Authorization providers, see Configuring an Authorization Provider in Administering Security for Oracle WebLogic Server.\nThe WebLogic Authorization provider was deprecated in WebLogic Server 14.1.1.0.0 and will be removed in a future release. The XACML Authorization provider is the default provider.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then Authorizers.\nClick New.\nIn the Name field, enter a name for the new provider.\nFrom the Type drop-down list, select the type of Authorization provider.\nClick Create.\nOn the new Authorization provider page, set the desired values.\nClick Save.\nConfigure the WebLogic Adjudication Provider An Adjudication provider resolves authorization conflicts by weighing each Authorization provider\u0026rsquo;s access decision and determining whether to permit access to the requested resource.\nIf you only have one Authorization provider configured in the security realm and it is the WebLogic Authorization provider, then an ABSTAIN returned from the single Authorization provider is treated as a DENY.\nEach security realm must have one, and only one, Adjudication provider.\nWebLogic Server offers one Adjudication provider for the WebLogic Security Framework: the WebLogic Adjudication provider. Note that WebLogic Remote Console refers to the WebLogic Adjudication provider as the Default Adjudicator.\nFor more information on Adjudication providers, see Configuring the WebLogic Adjudication Provider in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then Adjudicator.\nClick Create.\nIn the Name field, enter a name for the new provider.\nFrom the Type drop-down list, select the type of Adjudication provider.\nClick Create.\nOn the new Adjudication provider page, set the appropriate values on the Default Adjudicator Parameters tab.\nClick Save.\nConfigure a Role Mapping Provider Role mapping is the process whereby principals (users or groups) are dynamically mapped to security roles at runtime. A Role Mapping provider determines what security roles apply to the principals stored in a subject when the subject is attempting to perform an operation on a WebLogic resource.\nSince these operations usually involve gaining access to a WebLogic resource, Role Mapping providers are typically used with Authorization providers.\nThe WebLogic Role Mapping provider was deprecated in WebLogic Server 14.1.1.0.0 and will be removed in a future release. The XACML Role Mapping provider is the default provider.\nFor more information on Role Mapping providers, see Configuring a Role Mapping Provider in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then Role Mappers.\nClick New.\nIn the Name field, enter a name for the new provider.\nFrom the Type drop-down list, select the type of Role Mapping provider.\nClick Create.\nOn the new Role Mapping provider page, update values as necessary.\nClick Save.\nConfigure an Auditing Provider An Auditing provider collects, stores, and distributes information about operating requests and the outcome of those requests for the purposes of non-repudiation.\nYou can configure multiple Auditing providers in a security realm, but none are required. The default security realm does not include an Auditing provider.\nWebLogic Auditing provider is the standard Auditing provider for the WebLogic Security Framework. Note that the WebLogic Remote Console refers to the WebLogic Auditing provider as the Default Auditor.\nYou can also configure WebLogic Server to audit configuration actions. See Enable Configuration Auditing.\nFor more information on Auditing providers, see Configuring the WebLogic Auditing Provider.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then Auditors.\nClick New.\nIn the Name field, enter a name for the new provider.\nClick Create.\nOn the new Auditing provider page, set the appropriate values on the Default Auditor Parameters tab.\nClick Save.\nConfigure a Credential Mapping Provider A Credential Mapping provider allows WebLogic Server to log into a remote system on behalf of a subject that has already been authenticated. You must have one Credential Mapping provider in a security realm, and you can configure multiple Credential Mapping providers in a security realm.\nFor more information on Credential Mapping providers, see Configuring Credential Mapping Providers in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then Credential Mappers.\nClick New.\nIn the Name field, enter a name for the new provider.\nFrom the Type drop-down list, select the type of Credential Mapper.\nClick Create.\nOn the new Credential Mapping provider page, update the values on the Default Credential Mapper Parameters tab as necessary.\nClick Save.\nAfter you have configured a credential mapping provider, you can map credentials to WebLogic resources. You can create credential mappings for the following WebLogic Server resources:\nApplication deployments EJBs JDBC applications Resource adapters Data sources Remote resources The general process is:\nIn the Edit Tree, configure an MBean. Commit your changes and then restart the server, if necessary. In the Security Data Tree, under Credential Mappers, find the corresponding node for the MBean you configured. You may need to define the properties of the WebLogic resource to identify it, forming a connection between the MBean\u0026rsquo;s configuration data and its security data. See Identify Resources for Credential Mapping. Create mappings for the WebLogic resource. Identify Resources for Credential Mapping Certain WebLogic resources require that you manually form a connection between its MBean configuration data and its security data.\nAs part of this process, you will create the first credential mapping for the resource.\nYou must configure the WebLogic resource before you can add any mappings.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers.\nContinue until you reach the WebLogic resource that you want to prepare for credential mappings.\nFor example:\nEJB component nodes appear under Credential Mappers: credentialMappingProvider: App Deployments: applicationName: EJBs Remote resources appear under Credential Mappers: credentialMappingProvider: Remote Resources. You do not need to identify data sources. Click New and fill in the fields as necessary.\nClick Create.\nA reference to the resource is added under the resource\u0026rsquo;s node. The name of the resource is generated by combining its property values.\nYou cannot delete a reference to a resource with multiple credential mappings. To delete a resource reference, you must delete all of the credential mappings first - which will then delete the resource reference automatically.\nAdd a Credential Mapping You can add a new credential mapping to associate another WebLogic resource to a remote user.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers, then credentialMappingProvider, then wlResourceType, then wlResourceName, then Credential Mappings.\nClick New.\nFill in the fields as needed.\nIf you want to map to a remote user that is already referenced in the remote resource, disable the Create Credential option.\nClick Create.\nThe credential mappings and credentials for each WebLogic resource appear under the resource’s node.\nWhen you delete a credential mapping, the remote user that the WebLogic resource was previously associated with is also deleted if it was the only credential mapping using that remote user.\nRemap a WebLogic Resource You can edit a credential mapping to associate a WebLogic user for a WebLogic resource to a different remote user.\nWebLogic Remote Console must already be aware of the remote user before you can remap the WebLogic Server user. If you want to remap the WebLogic resource to a new remote user, you must first add it to WebLogic Remote Console.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers, then credentialMappingProvider, then wlResourceType, then wlResourceName, then Credential Mappings.\nSelect the credential mapping that you want to edit.\nIn the Remote User field, replace the username of the current remote user with the username of the remote user that you want to remap the WebLogic resource to.\nClick Save.\nAdd a Set of Credentials After you have added the first set of credentials for a remote system to a WebLogic resource, you can add more users from that remote system.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers, then credentialMappingProvider, then wlResourceType, then wlResourceName, then Credentials.\nClick New.\nEnter the username and password for the remote user.\nClick Create.\nYou can now map a WebLogic user for the WebLogic resource to the new set of credentials.\nIf the password of the remote user changes, you’ll need to update it in WebLogic Remote Console or the mapping will break and prevent the WebLogic resource from logging into the remote system.\nDelete a Set of Credentials Each WebLogic resource has its own set of credentials. Removing a set of credential from WebLogic Remote Console will not affect the user in the remote system.\nYou cannot delete a credential that currently has a WebLogic resource mapped to it.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers, then credentialMappingProvider, then wlResourceType, then wlResourceName, then Credentials.\nIf the set of credentials that you want to delete has an active credential mapping, you can either:\nSelect any relevant mappings and update the Remote User field to a new remote user. Delete all of the associated credential mappings. Once all credential mappings associated with this set of credential are deleted, the credential itself will also be automatically deleted and you can skip the rest of the steps. Under the same WebLogic resource, expand the Credentials node.\nDelete the set of credentials.\nClick Save.\nConfigure a Certification Path Provider A Certification Path provider completes and validates certificate chains by using trusted CA based checking.\nThe provider checks the signatures in the chain, ensures that the chain has not expired, and confirms that one of the certificates in the chain is issued by one of the server’s trusted CAs. If any of these checks fail, the chain is not valid. Optionally, the provider checks the certificate chain’s basic constraints.\nFor more information on certificate validation on WebLogic Server, see Configuring the Certificate Lookup and Validation Framework in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then Cert Path Providers.\nClick New.\nIn the Name field, enter a name for the new provider.\nClick Create.\nIf you want to make this Certification Path provider the current builder of certificate chains for this realm, perform the following steps:\nIn the Edit Tree, go to Security, then Realms, then myRealm.\nOn the Cert Path Builder tab, select the Certification Path provider from the Cert Path Builder drop-down list.\nClick Save.\nConfigure the Password Validation Provider When configured in a security realm, the Password Validation provider is automatically invoked by a supported authentication provider whenever a password is created or updated for a user in that realm. The Password Validation provider then performs a check to determine whether the password meets the criteria established by the composition rules, and the password is accepted or rejected as appropriate.\nThe password composition rules you can configure for the Password Validation provider include:\nUser name policies, such as whether the password can be the same as the username. Password length policies, such as a minimum or maximum length. Character policies, such as the minimum or maximum number of alphabetic, numeric, or non-alphanumeric characters required in each password. Passwords cannot contain a curly brace { as the first character.\nIf the Default Authentication provider is configured in the security realm, make sure that the setting for the minimum password length is consistent in both the Default Authentication provider and the Password Validation provider.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then Password Validators.\nClick New.\nEnter a name for the password validator.\nClick Create.\nOn the configuration page of the password validator that you just created, select the System Password Validator Parameters tab.\nUse the configuration options to determine the criteria for an acceptable password.\nClick Save.\nConfigure Custom Security Providers If the security providers provided by WebLogic Server do not meet the needs of your environment, then you can design your own custom security providers.\nCreate a custom security provider. For guidance, see Introduction to Developing Security Providers for WebLogic Server in Developing Security Providers for Oracle WebLogic Server.\nPlace the MBean JAR file for the custom provider in the WL_HOME/server/lib/mbeantypes directory.\nAdd the custom security provider to the domain\u0026rsquo;s security realm using WLST or the WebLogic Server RESTful management interface.\nIf you are adding a deployable Authorization provider and the provider does not support parallel security policy, then set the RealmMBean.DeployableProviderSynchronizationEnabled attribute to true. Next, for the RealmMBean.DeployableProviderSynchronizationTimeout attribute, enter a timeout value (in milliseconds) or accept the default value.\nIf you are adding a deployable Role Mapping provider and the provider does not support role modification, then set the RealmMBean.DeployableProviderSynchronizationEnabled attribute to true. Next, for the RealmMBean.DeployableProviderSynchronizationTimeout attribute, enter a timeout value (in milliseconds) or accept the default value.\nFor more information, see Is Your Custom Authorization Provider Thread Safe? or Is Your Custom Role Mapping Provider Thread Safe? in Developing Security Providers for Oracle WebLogic Server.\nAfter you add the custom security provider to the security realm, you can use WebLogic Remote Console to configure and manage the inherited, standard attributes of the custom security provider. However, you cannot use WebLogic Remote Console to manage the custom attributes from your MDF file.\nConfigure the Embedded LDAP Server The embedded LDAP server contains user, group, group membership, security role, security policy, and credential map information. By default, each WebLogic Server domain has an embedded LDAP server configured with the default values set for each attribute.\nThe WebLogic Authentication, Authorization, Credential Mapping, and Role Mapping providers use the embedded LDAP server as their database. If you use any of these providers in a new security realm, you may want to change the default values for the embedded LDAP server to optimize its use in your environment.\nIn the Edit Tree, go to Environment, then Domain.\nOn the Security tab, select the Embedded LDAP subtab.\nUpdate the values as appropriate for your environment.\nConsider updating the settings for backing up for the embedded LDAP servers. Specifically Backup Hour, Backup Minute, and Backup Copies. For information on how WebLogic Server backs up data for the embedded LDAP server, see Backup and Recovery in Administering Security for Oracle WebLogic Server.\nClick Save and commit your changes.\nRestart the server.\nThe WebLogic Security providers store their data in the embedded LDAP server. When you delete a WebLogic Security provider, the security data in the embedded LDAP server is not automatically deleted. The security data remains in the embedded LDAP server in case you want to use the provider again. Use an external LDAP browser to delete the security data from the embedded LDAP server.\nUsers and Groups WebLogic Server employs users and groups to control access to its resources.\nUsers are entities that can be authenticated in a security realm. A user can be a person, such as application end user, or a software entity, such as a client application, or other instances of a WebLogic Server. As a result of authentication, a user is assigned an identity or principal. Each user is given a unique identity within the security realm. Users may be placed into groups that are associated with security roles, or can be directly associated with security roles.\nGroups are logically ordered sets of users. Users are organized into groups that can have different levels of access to WebLogic resources, depending on their job functions. Managing groups is more efficient than managing large numbers of users individually. All user and group names must be unique within a security realm.\nFor more information, see Users, Groups, And Security Roles in Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nWebLogic Remote Console can only add, edit, or delete the users and groups within the default authentication provider (WebLogic Authentication Provider). If you are using another authentication provider that supports the required WebLogic Server APIs, you can view its users and groups in WebLogic Remote Console, but to manage them, you\u0026rsquo;ll need to use an external tool specific to the provider. Providers that do not support the required WebLogic Server APIs do not appear in the Security Data tree.\nCreate a User You can add users to the WebLogic Authentication provider.\nIn the Security Data Tree, go to Realms, myRealm, then Authentication Providers, then DefaultAuthenticator, then Users.\nClick New.\nEnter a Name, Description, and Password for the user.\nUser names must be unique in the security realm and passwords must be eight characters or longer.\nClick Create.\nIf you want to add the new user to a group, then under the Membership tab, select a group under the Available section and move it to the Chosen section.\nUser groups provide an efficient way to manage multiple users with the same responsibilities.\nCreate a Group You can add groups to the WebLogic Authentication provider.\nIn the Security Data Tree, go to Realms, myRealm, then Authentication Providers, then DefaultAuthenticator, then Groups.\nClick New.\nEnter a Name (and optionally, a Description) for the group.\nGroup names must be unique in the security realm.\nClick Create.\nYou can nest a group under another so it inherits policies. Under the Membership tab, move groups from Available over to Chosen and the current group will be nested under the Chosen groups.\nSet User Lockout Attributes You can control how many login attempts can be made by the same user account before WebLogic Server locks the account.\nFor more information, see How Passwords Are Protected in WebLogic Server and Protecting User Accounts in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Security, then Realms, then myRealm.\nOn the User Lockout tab, turn on the Lockout Enabled option.\nIn the Lockout Threshold field, set the maximum number of invalid user login attempts that you want to allow before the user account is locked.\nModify any additional user lockout attributes as necessary.\nClick Save.\nUnlock a User You can unlock user accounts that became locked because of excessive failed login attempts on a per server basis.\nIn the Monitoring Tree, go to Environment, then Servers, then myServer.\nGo to Security, then Realm Runtimes, then myRealm.\nClick Unlock User.\nEnter the username of the locked user account. If applicable to your domain, you can also enter the identity domain.\nClick Done.\nView Users and Groups If you added an authentication provider other than the default authentication provider (WebLogic Authentication Provider) to your security realm, you can view its users and groups but you cannot edit them in WebLogic Remote Console.\nIn the Security Data Tree, go to Realms, myRealm, then Authentication Providers.\nSelect the authentication provider whose users and groups you want to view.\nExpand the Users or Groups nodes to view the users and groups.\nTo edit these users and groups, you\u0026rsquo;ll need to use an external tool specific to the provider.\nSecurity Policies and Roles Use security policies to manage who can access a resource in a WebLogic Server domain.\nA resource is an entity (such as a Web Service or a server instance) or an action (such as a method in a Web Service or the act of shutting down a server instance). For a list of resource types, see Resource Types You Can Secure with Policies in Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nA security policy specifies which users, groups, or roles can access the resource according to a set of conditions. Whenever possible, you should use security roles to determine access control. A security role, like a security group, grants an identity to a user. Unlike a group, however, membership in a role can be based on a set of conditions that are evaluated at runtime.\nFor most types of WebLogic resources, you can use WebLogic Remote Console to define the security policies and roles that restrict access. For Web applications and EJB resources, you can also use deployment descriptors.\nThe general process to secure a WebLogic resource is:\nCreate users and groups. Manage default security roles or create new ones. We recommend that you use roles to secure WebLogic resources (instead of users or groups) to increase efficiency for administrators who work with many users. You can use the default roles that WebLogic Server provides or create your own. Create and apply security policies. For more information, see Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nSecurity Roles A security role is an identity granted to users or groups based on specific conditions. Multiple users or groups can be granted the same security role and a user or group can be assigned more than one role. Security roles are used by policies to control access a WebLogic resource.\nWebLogic Server provides a default set of roles that you can use with any policy. These are called global roles and you can create your own if the default global roles do not meet your needs.\nYou can also create roles that are only used by policies for a specific resource. These are called scoped roles. For example, You can create a scoped role for a specific EJB that contains highly sensitive business logic. When you create a policy for the EJB, you can specify that only the scoped role can access the EJB.\nIf two roles conflict, the role of a narrower scope overrides the role of the broader scope. For example, a scoped role for an EJB resource overrides a global role or a scoped role for the enterprise application that contains the EJB.\nSecurity roles are created within a security realm, and the roles can be used only when the realm is active.\nFor more information, see Overview of Security Roles in Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nCreate a Global Role Create a new role that applies to all WebLogic resources deployed within a security realm (and thus the entire WebLogic Server domain).\nBefore creating a new global security role, review the Default Global Roles in Securing Resources Using Roles and Policies for Oracle WebLogic Server to assess if an existing role is sufficient for your needs.\nIn the Security Data Tree, go to Realms, then myRealm, then Role Mappers, then XACMLRoleMapper, then Global, then Roles.\nClick New.\nEnter a name for the new global role.\nClick Create.\nAfter a role is created, you can build a policy that uses conditions to determine which users or groups it encompasses. We recommend that whenever possible, you use the Group condition which grants the security role to all members of a specified group.\nCreate a Scoped Role Create a new role that can only be used with policies that apply to specific resources.\nIn the Security Data Tree, go to Realms, then myRealm, then Role Mappers, then XACMLRoleMapper, then myResource, then Roles.\nmyResource is the node path to the resource and may contain multiple node children. For example, to create a scoped role for a queue in a JMS module, your path would be …XACMLRoleMapper, then JMS Modules, then jmsModuleName, then Queues, then queueName, then Roles.\nClick New.\nEnter a name for the new scoped role.\nClick Create.\nAfter a role is created, you can build a policy that uses conditions to determine which users or groups it encompasses. We recommend that whenever possible, that you use the Group condition which grants the security role to all members of a specified group.\nSecurity Policies A security policy specifies the conditions that users, groups, or roles must meet to access a resource. Policies must have one or more conditions and you can combine conditions to create complex policies for more dynamic access control.\nRoot level policies apply to all instances of a specific resource type, for example, all JMS resources in your domain. All default security policies are root level policies.\nYou can also create policies that only apply to a specific resource instance. If the instance contains other resources, the policy will apply to the included resource as well. For example, you can create a policy for an entire JMS system resource, or for a particular queue or topic within that resource.\nThe policy of a narrower scope overrides policy of a broader scope. For example, if you create a security policy for a JMS system resource and a policy for a JMS queue within that system resource, the JMS queue will be protected by its own policy and will ignore the policy for the system resource.\nFor more information, see Security Policies in Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nIt\u0026rsquo;s recommended that you use the Role condition where possible. Basing conditions on security roles lets you create one security policy that takes into account multiple users or groups, and is a more efficient method of management.\nSee Security Policy Conditions in Securing Resources Using Roles and Policies for Oracle WebLogic Server.\nBuilding Security Policies You can build and edit a policy by modifying a condition\u0026rsquo;s arguments or by modifying the relationships between conditions in the policy.\nYou can only edit the arguments of the condition. If you want to use a different predicate for the condition, you must add a new condition.\nConditions have three different types of relationships: AND, OR, and Combination.\nAND: All of the conditions joined by an AND operator must be met. OR: At least one of the conditions joined by an OR operator must be met. Combination: Two or more conditions are combined and must be evaluated as a group. Conditions within a combination are themselves related to each other through AND or OR operators. By default, a new condition is added as a simple condition at the top of the list of conditions. To insert a new condition elsewhere, select an existing condition and then click Add Condition. You will get a drop-down list with options to add the new condition either above or below the selected condition. The order of conditions is not meaningful to how the policy is interpreted.\nA policy can contain multiple simple or compound conditions or a mix of simple and compound conditions. You can also nest compound conditions.\nWhy should you use compound conditions? Consider the following scenario: a resource exists where you want Administrators to always have access, but to restrict Deployer access to between 9 a.m. and 5 p.m EST. The following policy would address both requirements:\nCondition 1 (simple): Role: Admin OR\nCondition 2 (compound): Role: Deployer AND access occurs between 09:00:00 and 17:00:00 GMT -5:00 Use the actions on the Policy page to edit a policy.\nThe actions available to configure a security policy. Action Description Add Condition Adds a new condition to the policy. You can choose to add the new condition above or below another condition.\nCombine When multiple conditions are selected, you can combine them to create a compound condition.\nUncombine When a compound condition is selected, you can break it into independent (simple) conditions.\nRemove Deletes a simple or compound condition from the policy. When there are no conditions in a policy, the default policy applies.\nNegate Reverses the meaning of a condition. The criteria to access a resource becomes the opposite of the original condition.\nReset Reverts the policy to its last saved change, not the last change. It's recommended that you save your policy frequently or you may lose several changes unintentionally using the Reset action.\nYou can also edit a policy from its Advanced tab where the policy is expressed as string. Any changes made to a policy in the Advanced tab are reflected in the main Policy tab, and vice versa.\nTo delete a policy, simply delete all of its conditions. Confirm that the default security policy for the resource instance will provide adequate access control before you delete a policy.\nCreate a Policy for Resource Instances You can create a security policy that only applies to a specific resource instance. If the instance contains other resources, the policy will apply to the included resources as well.\nIn the Security Data Tree, go to Realms, then myRealm, then Authorizers, then XACMLAuthorizer, then myResourceInstance.\nmyResourceInstance is the node path to the resource instance and may contain multiple nodes. For example, to create a policy for a queue in a JMS module, your path would be \u0026ldquo;…XACMLAuthorizer, then JMS Modules, then jmsModuleName, then Queues, then queueName.\u0026rdquo;\nClick Add Condition.\nSelect a predicate from the Predicate List. Depending on the predicate you choose, you may need to configure arguments for the condition.\nClick OK.\nClick Save.\nAdd more conditions to the policy to increase its complexity.\nIdentity and Trust WebLogic Server uses private keys, digital certificates, and trusted certificates issued by certificate authorities to establish and verify server identity and trust.\nWebLogic Server provides a default identity keystore and a default trust keystore. These default keystores are appropriate for testing and development purposes only.\nIn WebLogic Server 14.1.1.0 and earlier, the default identity keystore and default trust keystore are DemoIdentity.jks and DemoTrust.jks, respectively. In WebLogic Server 14.1.2.0 and later, the default identity keystore and default trust keystore are DemoIdentity.p12 and DemoTrust.p12, respectively. Additionally, WebLogic Server trusts the certificate authorities in the cacerts file in the JDK.\nFor more information, see:\nIdentity and Trust in Understanding Security for Oracle WebLogic Server Configuring Keystores in Administering Security for Oracle WebLogic Server If you are using the demo certificates in a multi-server domain, Managed Server instances will fail to boot if you specify the fully-qualified DNS name. For information about this limitation and suggested workarounds, see Limitation on CertGen Usage in Administering Security for Oracle WebLogic Server\nThe OPSS Keystore Service (KSS) provides an alternative mechanism to manage keys and certificates for message security. See Managing Keys and Certificates in Securing Applications with Oracle Platform Security Services. The OPSS KSS makes using certificates and keys easier by providing central management and storage of keys and certificates for all servers in a domain. You can use the OPSS KSS to create and maintain keystores of type KSS. If the Oracle Java Required Files (JRF) template is installed on the WebLogic Server system, you have the option to use KSS keystores. The KSS keystore is available only with the JRF template and is not available with the default WebLogic Server configuration.\nConfiguring Identity and Trust in WebLogic Server Obtain digital certificates, private keys, and trusted CA certificates from the CertGen utility, the keytool utility, the OPSS Keystore Service, or a reputable vendor that creates and signs certificates for use on the internet. You can also use the digital certificates, private keys, and trusted CA certificates provided by WebLogic Server. The demonstration digital certificates, private keys, and trusted CA certificates should be used in a development environment only.\nSee Configure Keystores.\nIf using KSS, verify whether KSS is properly populated, and note the KSS URIs and aliases of the required certificates and keys. You will need the KSS URIs and key aliases when specifying keystores, keys, and certificates.\nStore the private keys, digital certificates, and trusted CA certificates. Private keys and trusted CA certificates are stored in a keystore. If using KSS, import the required keys and certificates to KSS.\nConfigure the identity and trust keystores for a WebLogic Server instance. See Configure Keystores.\nConfigure SSL/TLS attributes for the server. These attributes describe the location of the identity key and certificate in the keystore. See Set Up SSL/TLS.\nConfigure Keystores WebLogic Server uses private keys, digital certificates, and trusted certificates issues by certification authorities to establish and verify server identity and trust. You can use JKS or PKCS12 keystores for identity and trust.\nFor more information, see Configuring Keystores in Administering Security for Oracle WebLogic Server.\nFor testing and development purposes only, WebLogic Server provides a demonstration identity keystore and a demonstration trust keystore. For production environments, you should configure your own identity and trust keystores.\nIn WebLogic Server 14.1.1.0 and earlier, the demo identity keystore and demo trust keystore are DOMAIN_NAME/security/DemoIdentity.jks and WL_HOME/server/lib/DemoTrust.jks, respectively. In WebLogic Server 14.1.2.0 and later, the demo identity keystore and demo trust keystore are DOMAIN_NAME/security/DemoIdentity.p12 and DOMAIN_NAME/security/DemoTrust.p12, respectively. Additionally, the JDK installation provides the cacerts truststore in JKS format at JDK/lib/security/cacerts.\nIf you are using custom identity and custom trust keystores:\nObtain private keys and digital certificates from a reputable third-party certificate authority (CA).\nCreate identity and trust keystores.\nLoad the private keys and trusted CAs into the keystores.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nClick the Security tab, then the Keystores tab.\nFrom the Keystores drop-down list, select a type for storing and managing private keys/digital certificate pairs and trusted CA certificates.\nDemo Identity and Demo Trust - Select this option to use the demo certificates (suitable for development and testing). This is the default setting, and uses the demonstration identity and trust keystores, and the JDK cacerts keystore.\nTo use a KSS keystore for demo identity and trust, you must first enable the Use KSS For Demo option (on the Environment: Domain page, under the Security tab (click Show Advanced Fields)) which determines whether the Demo Identity and Demo Trust key stores should be obtained from the Oracle Key Store Service (KSS).\nCustom Identity and Java Standard Trust - Select this option to use an identity keystore you created and the trusted CAs that are defined in the cacerts file in the JAVA_HOME/jre/lib/security directory.\nCustom Identity and Custom Trust - Select this option to use both identity and trust keystores that you created.\nCustom Identity and Command Line Trust - Select this option to use an identity keystore that you created, but the trust keystore is passed as an argument in the command that starts WebLogic Server.\nDefine attributes for the identity and trust keystores. Depending on the keystore type that you selected, different options are available.\nClick Save.\nRepeat on all applicable servers.\nIf you are updating a keystore configuration and have SSL/TLS configured already, you can check that all SSL/TLS connections exist according to the specified connection. In the Monitoring Tree, go to Environment, then Servers. Restart the applicable servers.\nIf you enabled custom keystores and want to use Node Manager to start Managed Servers, you must also update the nodemanager.properties file to match.\nAt minimum, update the following node manager properties as applicable to your environment:\nCustomIdentityAlias CustomIdentityKeyStoreFileName CustomIdentityPrivateKeyPassPhrase CustomIdentityKeyStorePassPhrase KeyStores See Node Manager Properties in Administering Node Manager for Oracle WebLogic Server. Enable Certificate Revocation Checking WebLogic Server’s JSSE implementation supports X.509 certificate revocation (CR) checking, which checks a certificate’s revocation status as part of the SSL/TLS certificate validation process. CR checking improves the security of certificate usage by ensuring that received certificates have not been revoked by the issuing certificate authority. By default, CR checking is disabled in WebLogic Server.\nWebLogic Server\u0026rsquo;s CR checking implementation includes both the Online Certificate Status Protocol (OCSP) and certificate revocation lists (CRLs). For more information, see X.509 Certificate Revocation Checking in Administering Security for Oracle WebLogic Server.\nEnsure that you have configured the identity and trust keystores for WebLogic Server. See Identity and Trust.\nIn the Edit Tree, go to Environment, then Domain.\nOn the Security tab, click the SSL Certificate Revocation Checking subtab.\nTurn on the Enable Certificate Revocation Checking option.\nSelect a revocation checking method from the Revocation Checks drop-down list. The default is OCSP_THEN_CRL.\nUse the OCSP and CRL tabs to customize settings for the revocation checking method. For information on the options, see Using the Online Certificate Status Protocol or Using Certificate Revocation Lists in Administering Security for Oracle WebLogic Server.\nIf you want a certificate whose revocation status cannot be determined to fail SSL/TLS certificate path validation, turn on the Fail on Unknown Revocation Status option.\nWhen this option disabled, if an X.509 certificate’s revocation status cannot be determined, but the SSL/TLS certificate path validation is otherwise successful, the certificate will be accepted.\nClick Save.\nYou can configure certificate authority overrides to the certificate revocation configuration. See Configure Certificate Authority Overrides.\nConfigure Certificate Authority Overrides Configuring a certificate authority override allows you to specify CR checking behavior that is specific to certificates issued by a particular certificate authority (CA). A certificate authority override always supersedes the corresponding certificate revocation (CR) checking configuration that is set at the domain level.\nA certificate authority override can be used to supersede, for a given CA, any domain-wide CR checking configuration settings, with the exception of the CRL local cache, which is configured on a domain-wide basis only.\nIf you haven\u0026rsquo;t done so already, enable certificate revocation checking as described in Enable Certificate Revocation Checking.\nIn the Edit Tree, go to Security, then Certificate Authority Overrides.\nClick New and then enter a name for the new certificate authority override.\nClick Create.\nIn the Distinguished Name field, enter the distinguished name of the CA. This must be the complete issuer distinguished name (defined in RFC 2253) of the certificates for which this override applies.\nFor example, CN=CertGenCAB, OU=FOR TESTING ONLY, O=MyOrganization, L=MyTown, ST=MyState,C=US.\nUse the General, OCSP, and CRL tabs to modify the settings as necessary for your environment. For descriptions of the attributes and when you might want to configure them, see:\nGeneral Certificate Authority Overrides Configuring OCSP Properties in a Certificate Authority Override Configuring CRL Properties in a Certificate Authority Override in Administering Security for Oracle WebLogic Server. Click Save.\nSSL/TLS Transport Layer Security (TLS) and its predecessor, Secure Sockets Layer (SSL), ensure secure connections by allowing two applications connecting over a network connection to authenticate the other\u0026rsquo;s identity and by encrypting the data exchanged between the applications.\nAuthentication allows a server and optionally a client to verify the identity of the application on the other end of a network connection. Encryption makes data transmitted over the network intelligible only to the intended recipient.\nWebLogic Server supports SSL/TLS on a dedicated listen port which defaults to 7002. To establish an SSL/TLS connection, a Web browser connects to WebLogic Server by supplying the SSL/TLS listen port and the HTTPs protocol in the connection URL, for example, https://myserver:7002.\nYou can configure SSL/TLS as either one-way or two-way.\nWith one-way SSL/TLS, the server is required to present a certificate to the client but the client is not required to present a certificate to the server. With two-way SSL/TLS, the server presents a certificate to the client and the client presents a certificate to the server. WebLogic Server can be configured to require clients to submit valid and trusted certificates before completing the SSL/TLS handshake. For more information on how SSL/TLS is used in WebLogic Server, see Configuring SSL in Administering Security for Oracle WebLogic Server.\nAlthough the terms TLS, SSL, and SSL/TLS are used interchangeably throughout WebLogic Server documentation, it is expected and encouraged that you use a currently supported version of TLS, not SSL, to secure communication in WebLogic Server.\nSet Up SSL/TLS Establish secure communication between multiple applications connecting over a network connection.\nConfigure the identity and trust keystores for WebLogic Server. See Configure Keystores.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nClick the Security tab, then the SSL subtab.\nSet SSL/TLS attributes for the private key alias and password.\nIn the Server Private Key Alias field, enter the keystore attribute that defines the string alias used to store and retrieve the server\u0026rsquo;s private key.\nIn the Server Private Key Pass Phrase field, enter the keystore attribute that defines the passphrase used to retrieve the server\u0026rsquo;s private key.\nClick Show Advanced Fields.\nTurn off the Disable Hostname Verification option.\nSee Enable Host Name Verification.\nIn the Export Key Lifespan field, indicate the number of times WebLogic Server can use an exportable key between a domestic server and an exportable client before generating a new key. The more secure you want WebLogic Server to be, the fewer times the key should be used before generating a new key.\nFor both the Inbound Certificate Validation and the Outbound Certificate Validation drop-down lists, select a validation method.\nBuiltin SSL Validation Only: Uses the built-in trusted CA-based validation. This is the default. Builtin SSL Validation and Cert Path Validators: Uses the built-in trusted CA-based validation and uses configured CertPathValidator providers to perform extra validation. For more information, see Using Certificate Lookup and Validation Providers in Administering Security for Oracle WebLogic Server. Enable two-way SSL/TLS.\nBy default, WebLogic Server is configured to use one-way SSL/TLS, where the server passes its identity to the client. In a two-way SSL/TLS connection, the client verifies the identity of the server and then passes its identity certificate to the server. The server then validates the identity certificate of the client before completing the SSL/TLS handshake. The server determines whether or not two-way SSL/TLS is used.\nBefore enabling two-way SSL/TLS, ensure that the trust keystore for the server includes the certificate for the trusted certificate authority that signed the certificate for the client. See Identity and Trust.\nTurn on the Two Way SSL Enabled option.\nChoose whether to enable the Client Certificate Enforced option. When enabled, a client is required to present a certificate. If a certificate is not presented, the SSL/TLS connection is terminated. When disabled, the SSL/TLS connection continues even if a certificate is not presented by the client.\nYou may also want to force all administration clients use two way SSL/TLS. If an administration client attempts to connect to a server on a channel that does not require two-way SSL/TLS, then the connection is rejected.\nUnder Environment, then Domain, click the Security tab and enable Show Advanced Fields.\nTurn on the Require 2 way TLS for Admin Clients option.\nClick Save.\nRepeat on all applicable servers.\nEnable Host Name Verification A host name verifier ensures the host name in the URL to which the client connects matches the host name in the digital certificate that the server sends back as part of the SSL/TLS connection. If the host name in the certificate matches the local machine’s host name, host name verification passes if the URL specifies localhost, 127.0.0.1, or the default IP address of the local machine.\nA host name verifier is useful when a SSL/TLS client (or a WebLogic Server acting as an SSL/TLS client) connects to an application server on a remote host. Host name verification is performed only by a SSL/TLS client. By default, WebLogic Server has host name verification enabled and we recommend keeping it enabled for production environments.\nThe following steps only apply when a WebLogic Server instance is acting as an SSL/TLS client. Stand alone SSL/TLS clients specify the use of host name verification using command-line arguments or the API.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nClick the Security tab, then SSL.\nClick Show Advanced Fields.\nTurn off Disable Hostname Verification.\nChoose a hostname verifier from the Hostname Verifier drop-down list.\nAs of WebLogic Server 14.1.1.0.0, the default verifier is the wildcard verifier.\nIf you want to use a custom verifier, follow these steps.\nIf you write a custom host name verifier, the class that implements the host name verifier must be specified in the CLASSPATH of WebLogic Server (when acting as an SSL/TLS client) or a stand alone SSL/TLS client.\nWhen you use stand alone SSL/TLS clients, a custom host name verifier must be specified on the command line using the following argument or through the API: -Dweblogic.security.SSL.HostnameVerifier=classname where classname specifies the implementation of the weblogic.security.SSL.HostnameVerifier interface.\nCreate a custom host name verifier as described in Using a Custom Hostname Verifier in Developing Applications with the WebLogic Security Service.\nFrom the Hostname Verifier drop-down list, select Custom Verifier.\nIn the Custom Hostname Verifier field, enter the name of the implementation of the weblogic.security.SSL.HostnameVerifier interface.\nClick Save.\nAll the server SSL/TLS attributes are dynamic. When modified using WebLogic Remote Console, they cause the corresponding SSL/TLS server or channel SSL/TLS server to restart and use the new settings for new connections. Old connections will continue to run with the old configuration.\nRestart SSL/TLS All server SSL/TLS attributes are dynamic. You can modify these attributes and then apply your changes without rebooting WebLogic Server. Instead, only the corresponding SSL/TLS server or channel SSL/TLS server will restart and use the new settings for new connections. Existing connections continue to run with the old configuration.\nIf you haven\u0026rsquo;t done so already, turn on automatic realm restart in the default security realm. See Enable Automatic Realm Restart.\nIf automatic realm restart is not enabled, old connections will continue to run with the old configuration and you must restart WebLogic Server after restarting SSL/TLS to ensure that all the SSL/TLS connections exist according to the specified configuration.\nIn the Monitoring Tree, go to Environment, then Servers.\nSelect the checkbox for each server where you want to restart SSL/TLS.\nClick Restart SSL to restart the SSL/TLS listen sockets to apply changes to your keystore.\nSpecify Cipher Suites Configure cipher suites supported by WebLogic Server.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nClick the Security tab, then the SSL subtab.\nClick Show Advanced Fields.\nIn the Cipher Suites field, enter the cipher suites that you want to support on this server.\nIn the Excluded Cipher Suites field, enter any cipher suites that you want to block on this server.\nClick Save.\nRepeat for other servers as necessary.\nEnable Cross Domain Security Cross domain security establishes trust between two WebLogic Server domains by using a credential mapper to configure communication between the WebLogic Server domains.\nFor more information, see Configuring Cross-Domain Security in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Environment, then Domain.\nOn the Security tab, turn on Cross Domain Security Enabled.\nTo reduce the impact on performance, WebLogic Server caches the authenticated subject. If you want to modify the cache settings for your environment, click Show Advanced Fields and change the following settings:\nTo disable the cache, turn off Cross Domain Security Cache Enabled. To change how often the cache is cleared, update the Cross Domain Security Cache TTL value (in seconds). Click Save and then commit your changes.\nCreate a user for cross domain security and assign it to the CrossDomainConnectors group. See Create a User.\nFor more information on, see Configuring Cross-Domain Users in Administering Security for Oracle WebLogic Server.\nConfigure a cross-domain security credential mapping for the cross-domain security user.\nFor information on credential mapping, see Configure a Credential Mapping Provider.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers, then myCredentialMapper, then Remote Resources.\nClick New.\nTurn on the Use cross-domain protocol option.\nIn the Remote Domain field, enter the name of the remote domain that needs to interact with the local domain.\nIn the Remote User field, enter the username of the user configured in the remote domain that is authorized to interact with the local domain.\nIn the Remote Password field, enter the password of the user configured in the remote domain that is authorized to interact with the local domain.\nClick Create.\nEnable Global Trust Between Domains If you want multiple WebLogic Server domains to interoperate, you can specify the same domain credential for each of the domains. Typically, the domain credential is randomly generated by default and therefore, no two domains have the same domain credential.\nWhen this feature is enabled, identity is passed between WebLogic Server domains over an RMI connection without requiring authentication in the second domain. When inter-domain trust is enabled, transactions can commit across domains. A trust relationship is established when the domain credential for one domain matches the domain credential for another domain. For more information, see Enabling Global Trust in Administering Security for Oracle WebLogic Server.\nInstead of enabling global trust between domains, consider using the CrossDomainConnector role, as described in Enable Cross Domain Security.\nIn the Edit Tree, go to Environment, then Domain.\nOn the Security tab, click Show Advanced Fields.\nIn the Security Credential field, enter a new password for the domain. Choose a strong password.\nClick Save.\nPerform the same procedure in each domain for which you want to enable global trust, entering the exact same password.\nConfigure Connection Filtering Connection filters allow you to deny access at the network level. They can be used to protect server resources on individual servers, server clusters, or an entire internal network or intranet.\nFor more information on connection filters, see Using Connection Filters in Administering Security for Oracle WebLogic Server.\nIn the Edit Tree, go to Environment, then Domain.\nOn the Security tab, select the Filter subtab.\nTurn on the Connection Logger Enabled option to enable the logging of accepted messages. The Connection Logger logs successful connections and connection data in the server. This information can be used to debug problems relating to server connections.\nIn the Connection Filter field, specify the connection filter class to be used in the domain.\nTo configure the default connection filter, specify weblogic.security.net.ConnectionFilterImpl. To configure a custom connection filter, specify the class that implements the network connection filter. This class must also be present in the class path for WebLogic Server. In the Connection Filter Rules field, enter the syntax for the connection filter rules.\nFor more information about connection filter rules, see Guidelines for Writing Connection Filter Rules in Developing Applications with the WebLogic Security Service.\nIf you want WebLogic Server to ignore errors in filter rules during server startup, turn on the Connection Filter Ignore Rule Errors option.\nClick Save.\nCreate an Allowlist for JEP 290 Filtering To improve security, WebLogic Server uses the JDK JEP 290 mechanism to filter incoming serialized Java objects and limit the classes that can be deserialized.\nFor more information, see Using JEP 290 in Oracle WebLogic Server in Administering Security for Oracle WebLogic Server.\nWhen using the allowlist model, WebLogic Server and the customer define a list of the acceptable classes and packages that are allowed to be deserialized, and block all other classes.\nWebLogic Server also supports using blocklists for JEP 290 filtering. For instructions on using blocklists, see How WebLogic Server Uses JEP 290 Blocklists and Allowlists in Administering Security for Oracle WebLogic Server.\nConfigure the domain to record all of the classes and packages used in both WebLogic Server and customer application deserialization.\nIn the Edit Tree, go to Environment, then Domain.\nOn the Security tab, select the Allow List subtab.\nTurn on the Recording Enabled option.\nWhen recording is enabled, all classes are allowed during deserialization except for the classes specified in the blocklist.\nSave and commit the change.\nRun a full set of tests to ensure that the recorded allowlist configuration file provides appropriate coverage of all packages and classes that must be allowed in order for your application to run successfully. When deserialization occurs, each class is recorded in DOMAIN_HOME/config/security/jep290-recorded.serial.properties.\nA sample jep290-recorded.serial.properties is shown below:\nWed May 19 23:55:13 UTC 2021 weblogic.oif.serialFilter=\\ com.company1.common.collections.objs.*;\\ com.company1.common.tools.Calculator;\\ com.company2.shared.tools.Converter weblogic.oif.serialGlobalFilter=\\ com.company1.common.lists.AList;\\ com.company1.common.tools.Calculator;\\ com.company2.shared.tools.* Turn off the Recording Enabled option. Save and commit the change.\nConfigure the domain to use allowlists.\nIn the Edit Tree, go to Environment, then Domain. Click the Security tab, then the Allow List subtab. From the Violation Action drop-down list, select the appropriate setting.\nIGNORE - Ignore the allowlist and use the blocklists. If any class found during deserialization is present in the blocklist, the class is blocked from being deserialized.\nLOG - Log a message if a violation occurs but allow the class unless it is listed in the blocklist.\nDENY - Block everything except the classes specified in the allowlist, and log a message when a class is blocked.\nYou can also set the AllowListViolationAction on a channel using the network access point. Doing so allows you to use an allowlist on untrusted external channels and a blocklist on internal trusted channels.\nClick Save and commit your changes.\nBy default, the directory containing the allowlist configuration file is polled every 60 seconds. If you want to change the default polling interval, do the following:\nIn the Edit Tree, go to Environment, then Domain.\nClick the Security tab, then the Allow List subtab.\nIn the Serial Profile Polling Interval field, enter the new interval.\nClick Save.\nConfigure your production domain to use allowlists by copying the recorded allowlist configuration file that you just created to the DOMAIN_HOME/config/security directory of the production domain.\nOracle recommends that you run your production domain with AllowListViolationAction set to Log for some period of time to ensure that all classes and packages were recorded.\nIt\u0026rsquo;s important to maintain the accuracy of the allowlist configuration file. Whenever a new application is deployed to the domain, or a new version of the application is deployed, you should repeat this entire process, to recreate the allowlist or verify the allowlist with the new application to ensure that all packages and classes required by the new or updated application are included in the allowlist.\nConfigure SAML 2.0 Services: Main Steps You can configure your WebLogic Server instance as either a Service Provider or Identity Provider.\nFor more information on using SAML 2.0 with WebLogic Server, see Configuring SAML 2.0 Services in Administering Security for Oracle WebLogic Server.\nYou cannot configure SAML 1.1 services using WebLogic Remote Console.\nIf you plan to have SAML 2.0 services running in more than one WebLogic Server instance in the domain, then create a domain in which the RDBMS security store is configured. See Use the RDBMS Security Store.\nThe RDBMS security store is required by SAML 2.0 security providers in production environments so that the data they manage can be synchronized across all of the WebLogic Server instances that share that data.\nOracle does not recommend upgrading an existing domain in place to use the RDBMS security store. If you want to use the RDBMS security store, then you should configure the RDBMS security store at the time of domain creation. If you have an existing domain with which you want to use the RDBMS security store, then create the new domain and migrate your existing security realm to it.\nSee Managing the RDBMS Security Store in Administering Security for Oracle WebLogic Server.\nReview the considerations described in Web Application Deployment Considerations for SAML 2.0 in Administering Security for Oracle WebLogic Server.\nConfigure SAML 2.0 general services. Apply the same configuration settings to each server instance. See Configure SAML 2.0 General Services.\nIf you are configuring a SAML 2.0 Identity Provider site,\nCreate an instance of the SAML 2.0 Credential Mapping provider in the security realm. See Configure a Credential Mapping Provider.\nConfigure SAML 2.0 Identity Provider services. Apply the same configuration settings to each server instance. See Configure SAML 2.0 Identity Provider Services.\nPublish the metadata file describing your site, and manually distribute it to your Service Provider partners. See Publish SAML Metadata.\nCreate and configure your Service Provider partners. See Create a SAML 2.0 Web Service Service Provider Partner or Create a SAML 2.0 Web Single Sign-On Service Provider Partner.\nIf you are configuring a SAML 2.0 Service Provider site,\nCreate an instance of the SAML 2.0 Identity Assertion provider in the security realm. See Configure an Authentication or Identity Assertion Provider\nIf you are allowing virtual users to log in using SAML, create an instance of the SAML Authentication provider. See Configuring the SAML Authentication Provider in Administering Security for Oracle WebLogic Server.\nConfigure SAML 2.0 Service Provider services. Apply the same configuration settings to each server instance. See Configure SAML 2.0 Service Provider Services\nPublish the metadata file describing your site, and manually distribute it to your Identity Provider partners. See Publish SAML Metadata\nCreate and configure your Identity Provider partners. See Create a SAML 2.0 Web Service Identity Provider Partner or Create a SAML 2.0 Web Single Sign-On Identity Provider Partner.\nConfigure SAML 2.0 General Services Whether you configure a WebLogic Server instance as a SAML 2.0 Identity Provider or as a SAML 2.0 Service Provider, you must configure the server\u0026rsquo;s general SAML 2.0 services.\nFor more information, see Configuring SAML 2.0 General Services in Administering Security for Oracle WebLogic Server.\nReview the general steps for configuring SAML 2.0 services as described in Configure SAML 2.0 Services: Main Steps.\nIn the Edit Tree, go to Environment, then Servers.\nSelect the server instance where you want to configure SAML general services.\nClick the Security tab, then the SAML 2.0 General subtab.\nTurn on the Replicated Cache option to use the persistent cache for storing SAML 2.0 artifacts.\nThis option is required if you are configuring SAML 2.0 services in two or more WebLogic Server instances in your domain. If you are configuring SAML 2.0 services in a cluster, you must enable this option in each Managed Server instance individually.\nModify the settings as necessary for your environment. For descriptions of the fields and when you might want to configure them, see About SAML 2.0 General Services in Administering Security for Oracle WebLogic Server.\nClick Save.\nRepeat for the rest of the servers in domain. Make sure you apply the exact same configuration settings to all servers.\nPublish the metadata file. See Publish SAML Metadata.\nNext, configure the server as an Identity Provider or as a Service Provider. See Configure SAML 2.0 Identity Provider Services or Configure SAML 2.0 Service Provider Services, respectively.\nPublish SAML Metadata The SAML metadata file contains the information about this site\u0026rsquo;s SAML 2.0 services. Share this file with your federated partners to facilitate SAML 2.0 web single sign-on.\nIn the Monitoring Tree, go to Environment, then Servers, then myServer.\nOn the SAML 2.0 tab, click Publish Metadata.\nIn the Publish Metadata dialog box, specify a file path location to save the metadata file. The file path must be relative to the Administration Server.\nClick Done.\nDistribute the metadata file to your federated partners. For distribution recommendations, see Publishing and Distributing the Metadata File in Administering Security for Oracle WebLogic Server.\nConfigure SAML 2.0 Identity Provider Services A SAML 2.0 Identity Provider creates, maintains, and manages identity information for principals, and provides principal authentication to other Service Provider partners within a federation by generating SAML 2.0 assertions for those partners.\nPerform the SAML 2.0 general services configuration as described in Configure SAML 2.0 General Services.\nConfigure a SAML 2.0 Credential Mapping provider if you haven\u0026rsquo;t done so already. See Configure a Credential Mapping Provider.\nIn the Edit Tree, go to Environment, then Servers.\nSelect the server instance where you want to perform SAML configuration for servers in the role of Identity Provider.\nClick the Security tab, then the SAML 2.0 Identity Provider subtab.\nTurn on the Enabled option to activate this server\u0026rsquo;s SAML 2.0 services in the role of Identity Provider.\nModify the settings as necessary for your environment. For descriptions of the attributes and when you might want to configure them, see Configure SAML 2.0 Identity Provider Services in Administering Security for Oracle WebLogic Server.\nClick Save.\nRepeat for the rest of the servers. Make sure you apply the same configuration settings to all servers.\nCreate and configure your Service Provider partners. See Create a SAML 2.0 Web Single Sign-On Service Provider Partner or Create a SAML 2.0 Web Service Service Provider Partner.\nCoordinate with your federated partners to ensure that the SAML bindings you have enabled for this SAML authority, as well as your requirements for signed documents, are compatible with your partners.\nCreate a SAML 2.0 Web Service Service Provider Partner A SAML 2.0 Service Provider partner is an entity that consumes the SAML 2.0 assertions generated by the Identity Provider site.\nObtain, using a trusted and secure mechanism, the metadata file from your federated partner that describes the partner, the binding support, certificates and keys, and so on. See Obtain Your Service Provider Partner\u0026rsquo;s Metadata File in Administering Security for Oracle WebLogic Server.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers and select the SAML 2.0 credential mapping provider that you configured for the server.\nClick the Partners node.\nClick New.\nEnter a name for the Service Provider partner.\nFrom the Type drop-down list, select Web Service Service Partner.\nClick Create.\nTurn on the Enabled option to enable interactions between this server and this Service Provider partner.\nModify the settings as necessary for your environment. For descriptions of the settings and when you might want to configure them, see Create and Configure Web Single Sign-On Service Provider Partners in Administering Security for Oracle WebLogic Server.\nClick Save.\nCreate a SAML 2.0 Web Single Sign-On Service Provider Partner A SAML 2.0 Service Provider partner is an entity that consumes the SAML 2.0 assertions generated by the Identity Provider site.\nObtain, using a trusted and secure mechanism, the metadata file from your federated partner that describes the partner, the binding support, certificates and keys, and so on. See Obtain Your Service Provider Partner\u0026rsquo;s Metadata File in Administering Security for Oracle WebLogic Server.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers and select the SAML 2.0 credential mapping provider that you configured for the server.\nClick the Partners node.\nClick New.\nEnter a name for the Service Provider partner.\nFrom the Type drop-down list, select Web Single Sign-On Service Partner.\nIn the Meta Data File Name field, enter the file path to the metadata partner file you received from your federated partner.\nClick Create.\nTurn on the Enabled option to enable interactions between this server and this Service Provider partner.\nModify the settings as necessary for your environment. For descriptions of the settings and when you might want to configure them, see Create and Configure Web Single Sign-On Service Provider Partners in Administering Security for Oracle WebLogic Server.\nClick Save.\nConfigure SAML 2.0 Service Provider Services A Service Provider is a SAML authority that can receive SAML assertions and extract identity information from those assertions. The identity information can then be mapped to local Subjects, and optionally groups as well, that can be authenticated.\nPerform the SAML 2.0 general services configuration as described in Configure SAML 2.0 General Services.\nIf you haven\u0026rsquo;t done so already, configure a SAML 2.0 Identity Assertion provider . See Configure an Authentication or Identity Assertion Provider.\nIn the Edit Tree, go to Environment, then Servers.\nSelect the server instance where you want to perform SAML configuration.\nClick the Security tab, then the SAML 2.0 Service Provider subtab.\nTurn on the Enabled option to activate this server\u0026rsquo;s SAML 2.0 services in the role of Service Provider.\nModify the settings as necessary for your environment. For descriptions of the attributes and when you might want to configure them, see Configure SAML 2.0 Service Provider Services in Administering Security for Oracle WebLogic Server.\nClick Save.\nRepeat for the rest of the servers. Make sure you apply the same configuration settings to all servers.\nCreate and configure your Identity Provider partners. See Create a SAML 2.0 Web Single Sign-On Identity Provider Partner or Create a SAML 2.0 Web Service Identity Provider Partner.\nCreate a SAML 2.0 Web Service Identity Provider Partner A SAML 2.0 Identity Provider partner is an entity that generates SAML 2.0 assertions consumed by the Service Provider site.\nObtain, using a trusted and secure mechanism, the metadata file from your federated partner that describes the partner, the binding support, certificates and keys, and so on. See Obtain Your Identity Provider Partner\u0026rsquo;s Metadata File in Administering Security for Oracle WebLogic Server.\nIn the Security Data Tree, go to Realms, then myRealm, then Authentication Providers and select the SAML 2.0 Identity Assertion provider that you configured.\nClick Partners node.\nClick New.\nEnter a name for the Identity provider partner.\nFrom the Type drop-down list, select Web Service Identity Partner.\nClick Create.\nTurn on the Enabled option to enable interactions between this server and this Identity Provider partner.\nModify the settings as necessary for your environment. For descriptions of the settings and when you might want to configure them, see Create and Configure Web Single Sign-On Identity Provider Partners in Administering Security for Oracle WebLogic Server.\nClick Save.\nClick the Assertion Signing Certificate tab to configure the Identity Provider partner\u0026rsquo;s assertion signing certificate.\nCoordinate with your partner to obtain the Assertion Signing Certificate in a secure manner. For more information, see Using Security Assertion Markup Language (SAML) Tokens For Identity in Securing WebLogic Web Services for Oracle WebLogic Server.\nClick Import Certificate from File and enter the file path to the .pem or .der file containing the X.509 certificate.\nClick Done.\nWebLogic Remote Console will populate the page with information pulled from the imported certificate.\nCreate a SAML 2.0 Web Single Sign-On Identity Provider Partner A SAML 2.0 Identity Provider partner is an entity that generates SAML 2.0 assertions consumed by the Service Provider site.\nObtain, using a trusted and secure mechanism, the metadata file from your federated partner that describes the partner, the binding support, certificates and keys, and so on. See Obtain Your Identity Provider Partner\u0026rsquo;s Metadata File in Administering Security for Oracle WebLogic Server.\nIn the Security Data Tree, go to Realms, then myRealm, then Authentication Providers and select the SAML 2.0 Identity Assertion provider that you configured for the server.\nClick the Partners node.\nClick New.\nEnter a name for the Identity Provider partner.\nFrom the Type drop-down list, select Web Single Sign-On Identity Partner.\nIn the Meta Data File Name field, enter the file path to the metadata partner file you received from your federated partner.\nClick Create.\nModify the settings as necessary for your environment. For descriptions of the settings and when you might want to configure them, see Create and Configure Web Single Sign-On Identity Provider Partners in Administering Security for Oracle WebLogic Server.\nClick Save.\nUse the RDBMS Security Store You can use an external RDBMS as a data store for the authorization, role mapping, credential mapping, and certificate registry providers. This data store, called the RDBMS security store, is strongly recommended when using SAML 2.0 services in two or more WebLogic Server instances in a domain.\nIf you plan to use the RDBMS security store, you should set it up when you first create the domain. If you have an existing domain, then you should create a new domain, configure it for RDBMS, and then migrate security data from the existing domain over to the new domain. We do not recommend trying to enable the RDBMS security store on an existing domain.\nFor information on using the RDBMS security store in WebLogic Server, see Managing the RDBMS Security Store in Administering Security for Oracle WebLogic Server.\nFor a list of security providers affected by the RDBMS, see Security Providers that Use the RDBMS Security Store in Administering Security for Oracle WebLogic Server.\nFor a list of the specific RDBMS systems supported in this release of WebLogic Server for use as an RDBMS security store, see Oracle Fusion Middleware Supported System Configurations.\nCreate a new WebLogic domain using either the Domain Configuration wizard or WLST Offline. See Creating a WebLogic Domain in Creating WebLogic Domains Using the Configuration Wizard or Creating WebLogic Domains Using WLST Offline in Understanding the WebLogic Scripting Tool, respectively.\nDo not start the domain at this time.\nEnable the RDBMS security store using WLST Offline. See Use WLST Offline to Create the RDBMS Security Store in Administering Security for Oracle WebLogic Server.\nCreate the RDBMS tables in your data store. The WebLogic Server installation directory includes a set of scripts for each supported RDBMS system.\nTypically this step is performed by the database administrator. See Create RDBMS Tables in the Security Datastore in Administering Security for Oracle WebLogic Server for a description of the scripts, their locations in the product installation directory, and instructions for running them.\nStart the domain.\nConfigure the RDBMS Security Store You can update the RDBMS security store settings. However, you should avoid modifying the database settings of the RDBMS security store after it has been created.\nIn the Edit Tree, go to Security, then Realms, then myRealm, then RDBMS Security Store.\nClick New.\nEnter values for the Name, Connection URL, Driver Name, and Username fields.\nThe database name, type, and user credentials must match the values you set when you created the domain.\nClick Create.\nSpecify the appropriate settings for JNDI and JMS so that the RDBMS security store can cache database information in memory correctly. If the RDBMS is running in more than one JVM, for example, the domain has multiple servers, or other Oracle products are sharing the same RDBMS store with the new domain, these caches must be synchronized to ensure the integrity of the security data. To configure server synchronization:\nSpecify a JNDI user name and password. This can be any valid user in the security realm who has access to JNDI.\nCreate a JMS topic. You can reuse an existing one. See Configure Resources for JMS System Modules.\nFailure to configure JMS actions in a multiserver domain in which the RDBMS security store is configured may result in a security vulnerability.\nClick Save.\nIf the JMS topic with which the RDBMS security store is configured goes down, see Managing the RDBMS Security Store in Administering Security for Oracle WebLogic Server for important information about restoring it.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/administration-server/deploying-applications/",
	"title": "Deploying Applications",
	"tags": [],
	"description": "",
	"content": "You can use WebLogic Remote Console to manage the deployment process of applications to WebLogic Server.\nFor general information on the application deployment process, see Understanding WebLogic Server Deployment in Deploying Applications to Oracle WebLogic Server.\nSupported Deployment Units A deployment unit refers to a Java EE application (an enterprise application or Web application) or a standalone Java EE module (such as an EJB or resource adapter) that has been organized according to the Java EE specification and can be deployed to WebLogic Server.\nThe following deployment units are supported:\nEnterprise Application\nWeb Application\nEnterprise JavaBean\nWeb Service\nJava EE Library\nOptional Package\nJDBC, JMS, and WLDF Modules\nClient Application Archive\nFor more information on each deployment unit, see Supported Deployment Units in Deploying Applications to Oracle WebLogic Server\nInstall an Application An application can be installed as an archived EAR file or as an exploded directory. Installing an application makes its physical file or directory known to WebLogic Server.\nThis procedure applies to all of the deployment units listed in Supported Deployment Units, with the exception of Java EE libraries. For Java EE libraries, see Install a Java EE Library instead.\nIn the Edit Tree, go to Deployments, then App Deployments.\nSelect New.\nEnter a name for the application.\nSelect the servers and clusters to which you want to deploy the application.\nMake the archive file or exploded directory known to the Administration Server.\nIf the application is on your file system and you need to upload it to the Administration Server, enable the Upload option. Then, beside Source, click Choose File to browse to the application\u0026rsquo;s location on your system. If the application is already in the file system of the Administration Server, disable the Upload option. Then, in the Source Path field, enter the file path to the application. Add a deployment plan, choose another staging mode, or set application behavior at deployment.\nClick Create.\nYou can view the status of running deployment tasks on the Monitoring Tree: Deployments: Deployment Tasks page.\nYour new application appears under the App Deployment node. You can make additional changes to the application on this page.\nYou must start an application before it can process client requests.\nStart an Application You must start an application to make it available to WebLogic Server clients.\nWhen you start an application, you can make it immediately available to clients, or you can start it in Administration Mode first to ensure that it is working as expected. Starting in Administration Mode allows you to perform final sanity checking of the distributed application directly in the production environment without disrupting clients.\nIn the Monitoring Tree, go to Deployments, then Application Management.\nSelect the application that you want to start.\nClick Start and choose either:\nServicing all requests: to make the application immediately available to all clients. Servicing only administration request: to make the application available in Administration Mode only. Stop an Application When you stop an application, you prevent clients from accessing it. You can choose whether no clients can use it, or transition it to Administration Mode so that only administrative tasks can be performed.\nStopping an application does not remove its source files from the server; you can redeploy a stopped application to make it available to WebLogic Server clients again.\nIn the Monitoring Tree, go to Deployments, then Application Management.\nSelect the application that you want to stop.\nClick Stop and choose one of:\nWhen work completes: to allow the application to finish its work and for all currently connected users to disconnect. Force stop now: to stop the application immediately, regardless of the work that is being performed and the users that are connected. Servicing non-administration requests: to stop the application once all its work has finished, and then put the application in Administration Mode so it remains accessible for administrative purposes. Specify Deployment Properties After you deploy an application, you can configure additional settings to meet the needs of your environment.\nIf you haven\u0026rsquo;t already, create a deployment plan for the application. You can view the default configuration settings without creating a plan but they are read-only until you create a deployment plan. For more information, see Deployment Plans.\nYou cannot create a deployment plan for applications that were auto-deployed.\nIn the Monitoring Tree, go to Deployments, then Application Management, then myApp.\nClick Create Plan.\nIn the Plan Path field, enter a file path for the new deployment plan. Deployment plans must be in XML format and should be called plan.xml.\nIf possible, you should create the new deployment plan for a single application within a plan/ subdirectory of the application\u0026rsquo;s root directory.\nClick Done. WebLogic Server will create a basic deployment plan.\nYou can see the deployment plan for an application under Deployments: Application Management: myApplication: Deployment Plan (Advanced).\nGo to Deployments, then Application Management, then myApplication, then Configuration. Explore the Configuration node and its children to see the available deployment configuration options.\nThe contents of the Configuration node and its children differ based on application type. For example, web applications include settings for container descriptors while resource adapters include settings for outbound connection pools.\nClick Save as you make changes. Any changes that you make to the Configuration node and its children are automatically reflected in the deployment plan of the application.\nUpdate and possibly redeploy your application to apply your changes. See Update or Redeploy an Application for instructions.\nDeployment Plans Use a deployment plan to specify deployment property values for an application.\nA deployment plan is an optional document that works with or overrides your application’s deployment descriptors to configure an application for deployment to a specific WebLogic Server environment. Deployment plans are written in XML.\nSee Understanding WebLogic Server Deployment Plans in Deploying Applications to Oracle WebLogic Server.\nYou cannot create a deployment plan for applications that were auto-deployed.\nFor deployment plan descriptions and examples, see Understanding Deployment Plan Contents in Deploying Applications to Oracle WebLogic Server.\nGenerally, if you need to modify the deployment properties of an application, you should use the Configuration node (as described in Specify Deployment Properties), instead of manually editing the deployment plan.\nIf your changes in the deployment plan include non-dynamic changes, you must redeploy the application to propagate the changes from the deployment plan to the application.\nModify a Deployment Plan You can manually update a deployment plan with new deployment instructions for an application.\nFor more information, see Manually Customizing the Deployment Plan in Deploying Applications to Oracle WebLogic Server.\nIn the Monitoring Tree, go to Deployments, then Application Management, then myApplication, then Deployment Plan (Advanced).\nYou can edit the deployment plan as a whole or the individual variable assignments within a deployment plan:\nTo edit a deployment plan document: Select the Deployment Plan tab. Edit the deployment plan directly within the text box field. You can also copy the plan contents into an external text editor, make your edits and then paste the changed data back into WebLogic Remote Console. Click Save. To edit individual variable assignments: Select the Variable Assignments tab. Select the variable assignment module that you want to edit and click Edit. Enter a value and, if updating an array, choose an operation. Click Done. Update and possibly redeploy your application to apply your changes. See Update or Redeploy an Application for instructions.\nUpdate or Redeploy an Application After you make changes to a deployed application or its deployment plan, you need to update the application with the new instructions and possibly redeploy the application to make the changes available to WebLogic Server clients.\nIf your changes are dynamic, then you only need to update the deployment plan. However, if your changes include non-dynamic changes, you must redeploy the application to propagate the changes from the deployment plan to the application.\nIf you try to update a deployment plan but your changes require a redeployment, WebLogic Remote Console will prompt you to redeploy the application instead.\nIf the application is deployed in a production environment, review Overview of Redeployment Strategies in Deploying Applications to Oracle WebLogic Server for guidance on limiting downtime for the application.\nIn the Monitoring Tree, go to Deployments, then Application Management and select the application that you want to update.\nClick Update/Reploy and choose one of the options:\nUpdate - Deployment Plan on Server: Updates the application using a new deployment plan located on the server. Use this option if all of your changes are dynamic. Update - Deployment Plan on Local Machine: Updates the application using a new deployment plan located on the local machine and then uploads it to the Administration Server\u0026rsquo;s upload directory. Use this option if all of your changes are dynamic. Redeploy - Deployment Source and Plan on Server: Updates a deployment plan located on the server and redeploys the application. Use this option if your changes include non-dynamic changes that require the application to restart. Redeploy - Deployment Source and Plan on Local Machine: Updates a deployment plan located on the local machine and redeploys the application. Use this option if your changes include non-dynamic changes that the application to restart. If necessary for your selection, enter the file path to the new deployment plan.\nClick Done to update or redeploy the application.\nYou can track the status of the application deployment. While still in the Monitoring Tree, go to Deployments, then Deployment Tasks.\nTest Application Deployment After you deploy an application, you may want to confirm that it was deployed successfully.\nIn the Monitoring Tree, go to Environment, then Servers, then myServer, then Deployments, then Application Runtimes, then myApp, then Component Runtimes, then myServer/myApp, then Servlets.\nConstruct a URL using the target server address plus the ContextPath and Name values from the Servlets table. For example, for an application deployed on the Administration Server, a test URL might look like: http://adminserver:7001/myapp/welcome.\nRemember to consider any changes you made to network channels that may affect the application deployment. For example, the application may be on a different port.\nEnter the URL into your browser. If the page loads correctly, then your application was deployed successfully.\nRemove an Application from a Domain An installed application or module remains available in the domain to stop, restart, or update until you explicitly remove it. After you delete an application or module from a domain, you must redeploy it to make it available to a WebLogic Server client again.\nTo temporarily make a deployed application unavailable to WebLogic Server clients, consider stopping it instead of deleting it. See Stop an Application.\nIn the Edit Tree, go to Deployments, then App Deployments.\nSelect the application that you want to remove and click Delete.\nInstall a Java EE Library A Java EE library can be a standalone EJB or Web application module, multiple EJB or Web application modules packaged in an enterprise application (EAR), or a single plain JAR file that is registered with the Java EE application container upon deployment. After the library has been installed and started, other deployed modules can reference the library.\nInstalling a Java EE library means making its physical file or directory known to WebLogic Server. A Java EE library can be installed as an archived EAR file or as an exploded directory. After you have installed the Java EE library, other deployed modules can start using it.\nIn the Edit Tree, go to Deployments, then Libraries.\nClick New.\nEnter a name for the Java EE library.\nSelect the servers and clusters to which you want to deploy the Java EE library. Make sure to target all of the servers and clusters to which modules or applications that will reference the Java EE library are deployed.\nMake the Java EE library (an archive file or exploded directory) that you want to install known to the Administration Server.\nEnable Upload if the Java EE library is on your file system and you need to upload it to the Administration Server. Then, click Choose File to browse to the library\u0026rsquo;s location on your system. If the Java EE library is already in the file system of the Administration Server, then disable the Upload option and enter the file path to the Java EE library. If you specify an exploded directory, WebLogic Server installs all components it finds in and below the specified directory. You can install only the following types of archive files (or their corresponding exploded directories) as Java EE libraries: EJB JARs, Web application WARs, EAR files that contain EJB JARs or WARs, or plain JAR files that contain compiled classes.\nSelect a different staging mode.\nClick Create.\nYour new library appears under the Libraries node. You can make additional changes to the Java library on this page.\nRedeploy a Java EE Library When you update a Java EE library, WebLogic Server redeploys the archive file or exploded directory. Update a library if you have made changes to it and you want to make the changes available to the modules and applications deployed to WebLogic Server that are using the library.\nIn the Monitoring Tree, go to Deployments, then Library Management.\nSelect the Java EE library that you want to update.\nDecide how you want to update the library:\nChoose Redeploy if the changes to the library are already available on the Administration Server and you only want to make those changes available to the modules and applications that are using the library.\nChoose Upload and Redeploy if you want to upload a new archive file or exploded directory.\nIn the Source field, enter the path to the new archive file or exploded directory. Make sure the library\u0026rsquo;s latest archive is under the Administration Server\u0026rsquo;s upload directory.\nClick Done.\nConfigure JASPIC for a Web Application If using JASPIC, you can specify which Authentication Configuration provider applies to a specific Web application.\nThe Java Authentication Service Provider Interface for Containers (JASPIC) specification defines a service provider interface (SPI). The JASPIC SPI is used by authentication providers that implement message authentication mechanisms that can be integrated in server Web application message processing.\nYou can review the JASPIC specification at JSR 196: Java Authentication Service Provider Interface for Containers.\nIf you haven\u0026rsquo;t done so already, configure JASPIC in the domain.\nEnsure JASPIC is enabled in the domain. In the Edit Tree, go to Environment, then Domain. On the Security tab, click Show Advanced Fields and confirm that JASPIC Enabled is turned on.\nConfigure an Authentication Configuration provider.\nTo configure a WebLogic Server Authentication Configuration Provider, see Creating a WLS Authentication Configuration Provider in Administering Security for Oracle WebLogic Server. To configure a Custom Authentication Configuration Provider, see Creating a Custom Authentication Configuration Provider in Administering Security for Oracle WebLogic Server. In the Monitoring Tree, go to Deployments, then Application Management, then myWebApp.\nIf the application does not have a deployment plan, click Create Plan.\nWebLogic Server will create a basic deployment plan for the application which you can edit using the newly created Configuration and Deployment Plan (Advanced) child nodes.\nWhenever possible, use the Configuration node to edit deployment properties rather than editing the deployment plan directly. See Specify Deployment Properties.\nExpand the Configuration node and go to the JASPIC Container node.\nThe JASPIC Container node is only available for web applications.\nEnter the name of the Authentication Configuration provider that you configured and want to apply to this web application.\nClick Save.\nRedeploy the web application or restart the server.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/administration-server/monitoring-domains/",
	"title": "Monitoring Domains",
	"tags": [],
	"description": "",
	"content": "Use WebLogic Remote Console to monitor WebLogic Server and its related resources and services.\nFor general information on monitoring, diagnostic, and tuning tools in WebLogic Server, see Monitoring, Diagnosing, and Troubleshooting in Understanding Oracle WebLogic Server.\nMonitor Servers Review the servers in your domain to ensure they are functioning as expected.\nIn the Monitoring Tree, go to Environment, then Servers.\nUse the Servers table to monitor and compare properties across the different server instances in your domain.\nUse the Customize Table feature to rearrange the table columns to suit your needs.\nTo see more information about a server, click on its row in the table.\nEach server has its own child node under the Servers node. A top-level myServer node provides general runtime information regarding the selected server. Expand the myServer node to see more specific information for other areas such as scheduling or deployments.\nView Node Manager Status and Logs You can check the current status of Node Manager and use Node Manager logs to help troubleshoot problems in starting or stopping individual Managed Servers.\nFor more information, see Log Files in Administering Node Manager for Oracle WebLogic Server.\nNode Manager must be running to view its logs.\nIn the Monitoring Tree, go to Environment, then Node Manager Logs.\nClick the name of the machine whose Node Manager logs you want to view.\nClick Download.\nWhen using Hosted WebLogic Remote Console, your browser controls the location where the log files are downloaded. If you want to change the default download location, update your browser settings accordingly.\nConfigure Health Monitoring A server can monitor key aspects of its subsystems and report when a subsystem is not functioning properly.\nIf the server is running under a Node Manager, the Node Manager can automatically restart a server with an unhealthy subsystem. Node Manager can only perform automatic monitoring and shutdown for servers that it starts.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nOn the Health tab, modify the options as necessary.\nClick Save.\nDashboards Use dashboards to quickly assess and filter data about your domain. You can specify criteria for WebLogic Remote Console to match against MBeans in your domain and then review the results.\nDashboards are highly customizable. Start from any node in the Monitoring perspective and you can use its properties to develop precise criteria that go far beyond simple true/false statements. Dashboards let you find obscure, cross-functional data that might otherwise require comparison across multiple nodes.\nDashboards are only available on the Monitoring Tree perspective.\nTip:\nYou can expand the Dashboards node at the bottom of the Navigation tree to see any saved or built-in dashboards.\nDashboard Filters In dashboards, filters are the criteria that you use to curate your results. Generally, filters are based on the properties of a node.\nWebLogic Remote Console restricts which filters are available based on your current node so you can focus on the criteria that is relevant to your goals. As such, the filters that are available on the Environments: Servers node are different than those available under Deployments: Application Runtime Data.\nEach filter consists of a name (or property) from the domain, a value, and an operator that determines how the name and value interact with each other. A basic dashboard filter is simply name=value. The following example dashboard filter returns any servers that require a restart to apply configuration changes:\nServerRuntime.RestartRequired == true Values come in three formats:\nText Numeric Boolean (expressed as option toggles). Set the option to On for True, Off for False. Use operators to determine how a value should be assessed. Only the operators that are applicable to a name or property appear as options - you won\u0026rsquo;t see greater than for text values. By default, all filters are set to Any to provide the broadest possible search parameters.\nDashboards consist of one or more filters and filters are cumulative - beans must match ALL of the defined filters to be returned as a result. Therefore, when you build a dashboard, only edit the filters that are relevant to your query and leave the rest of the filters unchanged.\nBuilt-In Dashboards WebLogic Remote Console provides a set of pre-defined dashboards to monitor common domain statistics.\nOn the Monitoring Tree, expand the Dashboards node to see both custom and built-in dashboards.\nYou cannot edit or delete built-in dashboards. However, you can use a built-in dashboards as a starting point for another dashboard. Select a built-in dashboard and click Copy, then enter a new name for your custom dashboard. Edit it as you would a custom dashboard.\nCreate a Dashboard You can create your own custom dashboards to monitor the state of your domain.\nIn the Monitoring Tree, go to the node in the Navigation Tree that most closely matches the type of content that you want to track. For example, if you want to learn about servers, open the Environment: Servers node.\nClick New Dashboard.\nEnter a name for your new dashboard and then begin configuring the filters that will determine the results of the dashboard. For guidance on how to build filters, see Dashboard Filters.\nClick Create to generate the dashboard.\nClick Customize Table to control which columns appear in the dashboard.\nAll of your dashboards are available in the Dashboards node of the Monitoring Tree.\nDashboards are not automatically refreshed with new data. You must refresh or rerun the dashboard page to see any changes to MBeans. Click Reload to update the results. You can also click Auto Reload Interval to set the dashboard to regularly reload and update the results.\nLog Messages WebLogic Server logging services provide facilities for writing, viewing, filtering, and listening for log messages. These log messages are generated by WebLogic Server instances, subsystems, and Java EE applications that run on Oracle WebLogic Server or in client JVMs.\nUse WebLogic Remote Console to configure WebLogic Server Logging services. For general information on WebLogic Server logging services, see Understanding WebLogic Logging Services in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nView Logs Each subsystem within WebLogic Server generates log messages to communicate its status. To keep a record of the messages that its subsystems generate, WebLogic Server writes the messages to log files.\nThe contents of log files are generated according to the logging settings that are currently defined for a server. To manage what information is sent to a log file, see Configure Logs.\nFor more information on WebLogic logging services, see Understanding WebLogic Logging Services in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nIn the Monitoring Tree, go to Diagnostics, then Logs and Archives.\nEach row is a type of diagnostic data. Click on the row that you\u0026rsquo;re interested in to view its logs.\nSelect a log file and then click Download Logs.\nLogs are segregated by server instance.\nConfigure Logs WebLogic Server generates log files to track and communicate the status of its various subsystems. To ensure these log files remain valuable and usable, you can configure their settings.\nEach WebLogic Server instance writes all messages from its subsystems and applications to a server log file that is located on the local host computer. In addition to writing messages to the server log file, each server instance forwards a subset of its messages to a domain-wide log file. By default, servers forward only messages of severity level Notice or higher. See Server Log Files and Domain Log Files in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nThe server log records information about events such as the startup and shutdown of servers, the deployment of new applications, or the failure of one or more subsystems. The messages include information about the time and date of the event as well as the ID of the user who initiated the event. You can view and sort these server log messages to detect problems, track down the source of a fault, and track system performance.\nYou can also create client applications that listen for these messages and respond automatically. For example, you can create an application that listens for messages indicating a failed subsystem and sends email to a system administrator.\nFor more information on WebLogic logging services, see Understanding WebLogic Logging Services in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nClick the Logging tab.\nModify the logging settings to suit your needs.\nClick Save.\nRepeat on the rest of the servers.\nGo to Environment, then Domain.\nClick the Logging tab.\nModify the settings for the domain-level log to suit your needs.\nClick Save.\nDefine Debug Settings Specify debugging settings for WebLogic Server.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nClick the Debug tab.\nThe Debug tab is split into several subtabs that group related debug flags together. Use the All tab to see all available debug flags.\nEnable the debug flags that you want to generate logging messages.\nClick Save.\nIf you haven\u0026rsquo;t already, you should configure general logging settings for this server. See Configure Logs.\nIf you create applications to run on WebLogic Server, you can configure your applications to generate messages of severity DEBUG. These messages are never forwarded to the domain log and are intended to contain detailed information about the operation of an application or the server.\nFilter Log Messages WebLogic Server can generate a significant amount of data in its log messages. You can filter log messages so only certain messages are published.\nFor example, you can filter out messages of a certain severity level, or from a particular subsystem, or according to some other specified criteria. Only the log messages that satisfy the filter criteria get published. You can also create separate filters for the messages that each server instance writes to its server log file, standard out, memory buffer, or broadcasts to the domain-wide message log.\nWebLogic Server offers multiple methods for filtering log messages and you can use these methods simultaneously. Choose the methods that work for your environment. For more information, see Filtering WebLogic Server Log Messages in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nIn the Edit Tree, go to Environment, then myServer.\nClick on the Logging tab.\nClick Show Advanced Fields.\nIf you want to change the default severity level for all loggers or packages in the logger tree, then choose a new level from the Minimum severity to log drop-down list.\nThe default level is Info. For information on message severity, see Message Severity in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nIf you want to redirect the standard out of the JVM in which the WebLogic Server instance runs to the four log message destinations (log file, standard out, domain log, and message buffer), then turn on Redirect stdout logging enabled. For more information, see Redirecting JVM Output in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nIf you want to override the setting for the root Logger (as specified by the Minimum severity to log list option) or its closest parent node in the logger tree, then do as follows:\nClick the Severity Properties tab.\nIn the Logger Severity Properties table, click + to add a new key-value row, then double-click the row cells to update the key and value.\nYou can also use Logger severity properties to specify severity levels for packages (if using the Commons Logging API) or for individual WebLogic Server subsystem Loggers (if using the Message Catalog Logger).\nAll loggers inherit the severity level of their nearest parent node in the logger hierarchy. You can specify a severity level for a given logger that is different than its nearest parent node using key-value pairs, where the key is the logger name and the value is the severity level (Info, Critical, Warning, and so on).\nSee Specifying Severity Level for Loggers in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nIf you want to control which log messages are published, you can create log filters which use custom logic to evaluate log message content and then accept or reject it for publication based on its criteria. You can apply log filters to these log message destinations: log file, standard out, and domain log broadcaster.\nCreate a Log Filter.\nTo apply a log filter to the log file message destination, choose your preferred severity level from the Log File Severity Level drop-down list, then choose a log filter from the Log File Filter drop-down list.\nTo apply a log filter to the standard out message destination, choose your preferred severity level from the Stdout Severity Level drop-down list, then choose a log filter from the Stdout Filter drop-down list.\nTo apply a log filter to the domain log broadcaster message destination, choose your preferred severity level from the Domain Log Broadcast Severity Level drop-down list, then choose a log filter from the Domain Log Broadcast Filter drop-down list.\nYou can specify the size of the message buffer which stores messages that will be forwarded to the domain log. A higher value causes more messages to be stored in the buffer before the contents are forwarded to the domain log. For performance reasons, it is recommended that this value be set to 10 or higher in production mode.\nYou cannot forward DEBUG messages to the domain log.\nClick Save.\nCreate a Log Filter Log filters provide control over the log messages that get published. A filter uses custom logic to evaluate the log message content, which you use to accept or reject a log message\nFor example, to filter out messages of a certain severity level, from a particular subsystem, or according to specified criteria. Only the log messages that satisfy the filter criteria get published. You can create separate filters for the messages that each server instance writes to its server log file, standard out, memory buffer, or broadcasts to the domain-wide message log.\nIn the Edit Tree, go to Environment, then Log Filters.\nClick New.\nEnter a name for the log filter and click Create.\nEnter an expression in the Filter Expression field.\nA filter expression defines simple filtering rules to limit the volume of log messages written to a particular log destination. For information on building filter expressions, see WLDF Query Language in Configuring and Using the Diagnostics Framework for Oracle WebLogic Server.\nClick Save.\nUpdate your logging settings to apply this log filter. See Filter Log Messages.\nRotate Log Files Set a rotation schedule for the log files generated by WebLogic Server.\nFor more information, see Rotating Log Files in Configuring Log Files and Filtering Log Messages for Oracle WebLogic Server.\nWebLogic Server sets a threshold size limit of 2,097,152 kilobytes before it forces a hard rotation to prevent excessive log file growth.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nOn the Logging tab, from the Rotation Type drop-down list, select the criteria that triggers the server to move log messages to a separate file. Depending on your choice, configure the appropriate settings.\nBy Size - rotates log messages when log file size reaches the specified size. By Time - rotates log messages after a specified time interval passes. None - log messages are not automatically rotated. You must manually erase the contents of the file when the size becomes too large. If you chose By Size as the Rotation Type.\nIn the Rotation file size field, enter the file size that triggers the server to move log messages to a separate file. After the log file reaches the specified size, the next time the server checks the file size it renames the current log file by appending a 5-digit integer; for example, SERVER_NAME.log00007. After the server renames the file, subsequent messages accumulate in a new file named SERVER_NAME.log. If you chose By Time as the Rotation Type.\nIn the Begin rotation time field, enter the start time\nUse the following format: hh:mm, where hh is the hour in a 24-hour format and mm is the minute. At the time that you specify, the server rotates the current log file. If the time that you specify is already past, the server rotates the log file at the next scheduled interval, as specified in Rotation Interval.\nIn the Rotation Interval field, enter the interval, in hours, at which the server saves old messages to another file.\nIf you want to limit the number of log files that the server creates to store old log messages, enable the Limit Number of Retained Log Files option. Then, in the Files to Retain field, enter the maximum number of files. If the server receives additional log messages after reaching the capacity of the last log file, it overwrites the oldest log file.\nIn the Log file rotation directory field, enter the directory location where the rotated log files will be stored.\nEnter an absolute pathname or a pathname that is relative to the server\u0026rsquo;s root directory. By default, the rotated files are stored in the same directory where the log file is stored.\nIf you want to add a time or date stamp to the file name when the log file is rotated, then in the Log file name field, add java.text.SimpleDateFormat variables to the file name and surround each variable with percentage (%) characters.\nFor example, if you enter the following value in the Log file name field: myserver_%yyyy%%MM%%dd%%hh%%mm%.log, the server\u0026rsquo;s log file will be named myserver_yyyy_MM_dd_hh_mm.log.\nWhen the server instance rotates the log file, the rotated file name contains the date stamp. For example, if the server instance rotates its local log file on 4 March 2020 at 10:15 AM, the log file that contains the old log messages will be named myserver_2020_03_04_10_15.lognnnnn. (The current, in-use server log file retains the name myserver_yyyy_MM_dd_hh_mm.log.)\nIf you do not include a time and date stamp, the rotated log files are numbered in order of creation SERVER_NAME.lognnnnn, where SERVER_NAME is the name configured for the log file. For example: myserver.log00007.\nClick Save.\nEnable Configuration Auditing You can configure the Administration Server to emit audit messages that enable auditing of configuration changes in a domain.\nThis provides a record of changes to the configuration of any resource within a domain or invokes management operations on any resource within a domain. Configuration audit records can be saved to a log file, sent to an Auditing provider in the security realm, or both.\nIf you plan to audit configuration changes, then you must configure the WebLogic Auditing Provider first. See Configure an Auditing Provider.\nIn the Edit Tree, go to Environment, then Domain.\nClick Show Advanced Fields.\nFrom the Configuration Audit Type drop-down list, select the method to use for auditing configuration change events.\nNone: No audit configuration change events are written. Log:Configuration events will be written to the server log. Audit: Configuration events will be directed to the Security Framework and handled by the Auditing provider. LogAudit: Configuration events will written to the server log as well as directed to the Security Framework and handled by the Auditing provider. Click Save.\nDisplay Thread Stacks You can display the current stack for an active thread.\nIn the Monitoring Tree, go to Environment, then JVM Runtime.\nClick the Thread Stack Dump tab to see an overview of the thread stack dumps for each server in the domain.\nTo see the thread stack dump for a single server, click the server instance in the table. This sends you to the JVM Runtime node for the selected server. Click the Thread Stack Dump tab.\nTuning Performance To ensure that your WebLogic Server environment is performing optimally, you should regularly monitor its behavior and then adjust its settings accordingly.\nFor guidance on the performance tuning options that are available in WebLogic Server, see Tuning Performance of Oracle WebLogic Server.\nIn the Edit Tree, go to Environment, then Servers, then myServer.\nOn the Advanced tab, select the Tuning subtab.\nModify the available options as recommended based on the needs of your environment.\nClick Save.\nRepeat as needed for the rest of the servers in your domain.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/administration-server/configuring-services/",
	"title": "Configuring Services",
	"tags": [],
	"description": "",
	"content": "Use WebLogic Remote Console to manage services in a WebLogic Server domain.\nData Sources You can connect WebLogic Server to databases by adding JDBC data sources to your domain. A data source is a Java EE standard method of configuring connectivity to a database.\nEach WebLogic data source contains a pool of database connections. Applications look up the data source on the JNDI tree or in the local application context and then use a database connection from the pool of connections. Data sources and their connection pools provide connection management processes that help keep your system running efficiently.\nYou can manage the following JDBC data source types from WebLogic Remote Console:\nJDBC Generic Data Sources\nJDBC Multi Data Sources\nActive GridLink Multi Data Sources\nUniversal Connection Pool (UCP) Data Sources\nFor more information on using data sources with WebLogic Server, see Understanding JDBC Data Sources in Understanding Oracle WebLogic Server and Configure Database Connectivityin Administering JDBC Data Sources for Oracle WebLogic Server.\nJDBC Drivers Data sources require the use of JDBC drivers to gain access to various databases. WebLogic Server comes with a default set of JDBC drivers but you can also install third-party JDBC drivers.\nFor the types of JDBC drivers supported in WebLogic Server, see Types of JDBC Driver in Administering JDBC Data Sources for Oracle WebLogic Server.\nFor a list of the JDBC drivers installed in WebLogic Server, see JDBC Drivers Installed with WebLogic Server in Administering JDBC Data Sources for Oracle WebLogic Server.\nFor instructions on how to install third-party JDBC drivers, see Adding Third-Party JDBC Drivers Not Installed with WebLogic Server in Administering JDBC Data Sources for Oracle WebLogic Server.\nCreate a Generic Data Source A generic data source provides database access and database connection management. Generic data sources and their connection pools provide connection management processes that help keep your system running efficiently.\nFor more information on generic data sources, see Using JDBC Generic Data Sources in Administering JDBC Data Sources for Oracle WebLogic Server.\nGeneric is the term used to distinguish a simple data source from a Multi Data Source or Active GridLink data source.\nIf you need a JDBC driver that is not installed with WebLogic Server, you must install it before you can set up a data source. See Adding Third-Party JDBC Drivers Not Installed with WebLogic Server in Administering JDBC Data Sources for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then Data Sources.\nClick New.\nEnter a name for the new data source.\nIn the JNDI Names field, enter the JNDI path to the location where this JDBC data source will be bound. Applications look up the data source on the JNDI tree by this name when reserving a connection.\nChoose the server instances or clusters where you want to deploy the data source.\nSelect Generic Data Source from the Data Source Type drop-down list.\nFrom the Database Type drop-down list, select the database management system (DBMS) of the database that you want to connect to. If your DBMS is not listed, select Other.\nFrom the Database Driver drop-down list, select a JDBC driver.\nEnter the connection details for the database that you want to connect to:\nDatabase Name: Enter the name of the database you want to connect to. Exact database name requirements vary by JDBC driver and by DBMS. Host Name: Enter the DNS name or IP address of the server that hosts the database. If you are creating an Oracle GridLink service-instance connection, this must be the same for each data source in a given multi data source. Port: Enter the port on which the database server listens for connections requests. Database User Name: Enter the database user account name that you want to use for connections in the data source. Password: Enter the password for the database user account. Click Create.\nCreate a Multi Data Source A multi data source is an abstraction around a group of generic data sources. It provides failover and load balancing for connection requests between two or more data sources.\nFor more information on multi data sources, see Using JDBC Multi Data Sources in Administering JDBC Data Sources for Oracle WebLogic Server.\nBefore you create a multi data source, you should create the generic data sources that the multi data source will manage, and ensure they are deployed to same targets as where you plan to deploy the multi data source. See Create a Generic Data Source.\nIn the Edit Tree, go to Services, then Data Sources.\nClick New.\nEnter a name for the new data source.\nIn the JNDI Names field, enter the JNDI path to the location where this JDBC data source will be bound. Applications look up the data source on the JNDI tree by this name when reserving a connection.\nChoose the server instances or clusters where you want to deploy the data source.\nYou must deploy the multi data source and the generic data sources to the same targets.\nSelect Multi Data Source from the Data Source Type drop-down list.\nFrom the Algorithm Type drop-down list, choose an algorithm type to determine the connection request processing for the multi data source.\nFailover: The multi data source routes connection requests to the first data source in the list; if the request fails, the request is sent to the next data source in the list, and so forth. Load-Balancing: The multi data source distributes connection requests evenly to its member data sources. Specify whether this is an XA or non-XA JDBC multi data source.\nWhen the XA Driver option is enabled, the multi data source will only use data sources that use an XA JDBC driver to create database connections. When the XA Driver option is disabled, the multi data source will only use data sources that use a non-XA JDBC driver to create database connections The option you select limits the data sources that you can select as part of the multi data source in a later step. Limiting data sources by JDBC driver type enables the WebLogic Server transaction manager to properly complete or recover global transactions that use a database connection from a multi data source. Choose the data sources that you want the multi data source to use to satisfy connection requests.\nClick Create.\nAdd or Remove Data Sources in a Multi Data Source You can add or remove data sources to a multi data source while the data source is deployed (referred to as dynamically changing the data source list in the multi data source).\nThe data sources that you add to a multi data source must be deployed on the same targets on which you intend to deploy the multi data source. You cannot include data sources in a multi data source that are deployed on different servers or clusters. See Target Data Sources.\nIn the Edit Tree, go to Services, then Data Sources.\nSelect the multi data source whose components you want to edit.\nOn the Data Sources tab, use the Data Source List field to modify which data sources are covered by this multi data source.\nTo add a new data source, enter the exact name of the data source, separating each data source with a comma. To remove an existing data source, delete the name of the data source. The order of data sources in the list determines the order that the multi data source uses to route connection requests. For multi data sources that use the Failover algorithm, the first data source in the list is considered the primary data source. Others are considered secondary, tertiary, and so forth.\nClick Save.\nCreate an Active GridLink Data Source An Active GridLink data source provides connectivity between WebLogic Server and an Oracle database.\nFor more information on GridLink data sources, see Using Active GridLink Data Sources in Administering JDBC Data Sources for Oracle WebLogic Server.\nIf you need a JDBC driver that is not installed with WebLogic Server, you must install it before you can set up a data source. See Adding Third-Party JDBC Drivers Not Installed with WebLogic Server in Administering JDBC Data Sources for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then Data Sources.\nClick New.\nEnter a name for the new data source.\nIn the JNDI Names field, enter the JNDI path to the location where this JDBC data source will be bound. Applications look up the data source on the JNDI tree by this name when reserving a connection.\nChoose the server instances or clusters where you want to deploy the data source.\nSelect GridLink Data Source from the Data Source Type drop-down list.\nFrom the Database Driver drop-down list, select JDBC drivers.\nIf you selected a non-XA driver, then select a Global Transactions Protocol.\nSee JDBC Data Source Transaction Options in Administering JDBC Data Sources for Oracle WebLogic Server.\nEnter the connection details for the database that you want to connect to:\nListeners: Enter the DNS name or IP address and port number (separated by a colon) of the server that hosts the database. Enter each listener on a new line. Service Name: Specify the service name of the database to which you want to connect. Database User Name: Enter the database user account name that you want to use for each connection in the data source. Password: Enter the password for the database user account. Protocol: If required, change the value from TCP to SDP. To use Socket Direct Protocol (SDP), your database network must be configured to use Infiniband. Configure any additional connection details that are applicable to your environment.\nClick Create.\nCreate a UCP Data Source A Universal Connection Pool (UCP) data source provides an option for users who want to use Oracle Universal Connection Pooling to connect to Oracle databases. UCP provides an alternative connection pooling technology to Oracle WebLogic Server connection pooling.\nFor more information on UCP data sources, see Using Universal Connection Pool Data Sources in Administering JDBC Data Sources for Oracle WebLogic Server.\nIf you need a JDBC driver that is not installed with WebLogic Server, you must install it before you can set up a data source. See Adding Third-Party JDBC Drivers Not Installed with WebLogic Server in Administering JDBC Data Sources for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then Data Sources.\nClick New.\nEnter a name for the new data source.\nIn the JNDI Names field, enter the JNDI path to the location where this JDBC data source will be bound. Applications look up the data source on the JNDI tree by this name when reserving a connection.\nChoose the server instances or clusters where you want to deploy the data source.\nSelect UCP Data Source from the Data Source Type drop-down list.\nFrom the Database Type drop-down list, select the DBMS of the database that you want to connect to. If your DBMS is not listed, select Other.\nFrom the Database Driver drop-down list, select JDBC drivers.\nEnter the connection details for the database that you want to connect to:\nURL: Enter the URL for the database. Database User Name: Enter the database user account name that you want to use for each connection in the data source. Password: Enter the password for the database user account. Configure any additional connection details that are applicable to your environment.\nClick Create.\nControl JDBC Data Sources After you create a JDBC data source, you can perform administrative tasks on instances of the data source in WebLogic Remote Console.\nIn the Monitoring Tree, go to Services, then Data Sources, then JDBC Data Source Runtime MBeans. Select the data source that you want to manage and then choose the control operation that you want to perform on the data source. Table 1 describes the control operations that you can perform on a JDBC data source.\nTable 1. Control Operations for JDBC Data Sources. describes the control operations that you can perform on a JDBC data source. Operation Description Start Use Start to start an individual instance of a data source.\nFor more information, see Starting a Data Source in Administering JDBC Data Sources for Oracle WebLogic Server .\nResume Use Resume to resume individual data sources that are in a Suspended state.\nFor more information, see Resuming a Connection Pool in Administering JDBC Data Sources for Oracle WebLogic Server . Suspend Use Suspend to pause individual instances of a data source. When you suspend a data source, applications can no longer get a database connection from the data source. You can choose how to handle active connections:\nChoose Gracefully to mark the data source as disabled and block any new connection requests. If there are any reserved connections, the operation will wait for the period as specified by InactiveTimeout, otherwise the operation waits 60 seconds before suspending all connections. If successful, the health state is set to Suspended. All connections are preserved exactly as they were before the data source was suspended. When you resume the data source, clients that had reserved a connection before the data source was suspended can continue exactly where they left off. Choose Force Suspend to mark the data source as disabled. Any transaction on any currently reserved connection is rolled back, and all reserved connections are destroyed. Any subsequent attempts by applications to use their reserved connections will fail. If successful, the health state is set to Suspended. At this time, the data source attempts to replenish the connection pool by creating as many new connections as had been destroyed. When you Resume, clients must reserve new connections to proceed. For more information, see Suspending a Connection Pool in Administering JDBC Data Sources for Oracle WebLogic Server .\nShutdown Use Shutdown to shut down individual instances of a data source. You can choose how to handle active connections:\nChoose Gracefully to shut down a data source if there are no active connections. If any connections from the data source are currently in use, the Shutdown operation will fail and the health state remains Running. Choose Force Shutdown to shut down a data source and force the disconnection of all current connection users. For more information, see Shutting Down a Data Source in Administering JDBC Data Sources for Oracle WebLogic Server .\nShrink Use Shrink to shrink the pool of database connections in individual instances of a data source to the minimum capacity or the current number of connections in use, whichever is greater.\nFor more information, see Shrinking a Connection Pool in Administering JDBC Data Sources for Oracle WebLogic Server . Reset Use Reset to reset the database connections in a JDBC data source by closing and then recreating all available database connections in the pool of connections in the data source.\nFor more information, see Resetting a Connection Pool in Administering JDBC Data Sources for Oracle WebLogic Server .\nClear cache Use Clear cache to clear the statement cache for all connections in the instance of the data source. Statement caching must be enabled for the data source for WebLogic Server to cache prepared and callable statements that are used in each connection in the data source. Each connection has its own cache, but the caches for each connection are configured and managed as a group. For more information, see Managing the Statement Cache for a Data Source and Increasing Performance with the Statement Cache in Administering JDBC Data Sources for Oracle WebLogic Server .\nMonitor Statistics for JDBC Data Sources You can monitor a variety of statistics for each data source instance in your domain, such as the current number of database connections in the connection pool, current number of connections in use, and the longest wait time for a database connection.\nIn the Monitoring Tree, go to Services, then Data Sources, then JDBC Data Source Runtime MBeans.\nFor multi data sources, you can also go to Services, then Data Sources, then JDBC Multi Data Source Runtime MBeans to review a multi data source and its associated sub data sources.\nSelect the data source for which you want to see statistics.\nBy default, this data source page will display all of the statistics that are available for the selected data source. To refine the information, customize the table to show only relevant statistics. See Customize a Table.\nTarget Data Sources When you target a JDBC data source, a new instance of the data source is created on the target. When you select a server as a target, an instance of the data source is created on the server. When you select a cluster as a target, an instance of the data source is created on all servers in the cluster.\nMake sure that the JDBC drivers that you want to use to create database connections are installed on all servers on which you want to deploy the data source. See Using JDBC Drivers with WebLogic Server in Administering JDBC Data Sources for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then Data Sources.\nSelect the data source whose targets you want to edit.\nOn the Targets tab, select each server or cluster where you want to deploy the data source and move them under Chosen. Move unwanted servers or clusters under Available.\nClick Save.\nTest JDBC Data Sources You can manually test individual instances of a data source. When you test a data source, WebLogic Server reserves a connection from the data source, tests it using the standard testing query or the query specified in Test Table Name, and then returns the database connection to the pool of connections.\nIt is important to regularly check that the database connections in a data source remain healthy, which helps keep your applications running properly. See Testing Data Sources and Database Connections in Administering JDBC Data Sources for Oracle WebLogic Server.\nConfigure testing options for the JDBC data source.\nYou may want to modify the default database connection testing options to better match the needs of your environment.\nIn the Edit Tree, go to Services, then Data Sources.\nSelect the data source whose connection testing options you want to edit.\nSelect the Connection Pool tab, then the Advanced subtab.\nModify the following options as necessary for your environment.\nIn the Test Table Name field, enter the name of a small table to use in a query to test database connections. The standard query is select 1 from table_name. If you prefer to use a different query as a connection test, enter SQL followed by a space and the SQL code you want to use to test database connections.\nEnable the Test Connections on Reserve option to test the database connection before giving it to your application when your application requests a connection form the data source.\nThe test adds a small delay in serving the client\u0026rsquo;s request for a connection from the pool, but ensures that the client receives a viable connection.\nIn the Test Frequency field, specify how frequently (in seconds) WebLogic Server should perform background connection tests.\nIn the Seconds to Trust an Idle Pool Connection field, enter the interval (in seconds) during which, if the database connection has been used or tested, WebLogic Server will skip the connection test. This option can help reduce the overhead of connection testing and improve application performance.\nClick Save and commit your changes.\nIn the Monitoring Tree, go to Environment, then Servers, then choose the server where the data source you want to test is deployed.\nGo to Services, then Data Sources, then JDBC Data Source Runtime MBeans.\nSelect the data source that you want to test.\nClick the Test tab.\nThe test will occur immediately. Test results are shown on the Test tab page.\nSpecify RMI JDBC Security You can secure RMI JDBC communication with a data source using a check for administrator authentication.\nFor more information about using JDBC over RMI, see Using the WebLogic RMI Driver (Deprecated) in Developing JDBC Applications for Oracle WebLogic Server.\nIf you plan to choose the Secure option, you must first configure an SSL/TLS listen port channel. See Specify Listen Ports.\nIn the Edit Tree, go to Environment, then Servers. Click Show Advanced Fields.\nSelect an option from the RMI JDBC Security drop-down list:\nSecure: Rejects all incoming application JDBC calls over RMI by remote clients and servers. Internal interserver JDBC calls over RMI operations are allowed for the Logging Last Resource, Emulate Two-Phase Commit and One-Phase Commit Global Transactions Protocol options. The Secure option requires that all the servers are configured with an SSL listen port. If not, all operations fail with an exception. Compatibility: Allows uncontrolled access to DataSource objects for all incoming JDBC application calls over RMI. This setting should only be used when strong network security is in place. Disabled: Disables all JDBC calls over RMI, including the internal RMI operations for Logging Last Resource, Emulate Two-PhaseCommit and One-Phase Commit Global Transactions Protocol options. For more information, see Security Considerations for WebLogic RMI Drivers in Developing JDBC Applications for Oracle WebLogic Server. As of WebLogic Server 14.1.2.0.0, the default value for RMI JDBC Security is Secure.\nClick Save.\nConfigure Global Transaction Options for a JDBC Data Source The transaction protocol for a JDBC data source determines how connections from the data source are handled during transaction processing.\nIn the Edit Tree, go to Services, then Data Sources.\nSelect the data source whose targets you want to edit.\nOn the Transactions tab, select an option for transaction processing from the Global Transactions Protocol drop-down list.\nTo understand how transaction options differ, see JDBC Data Source Transaction Options in Administering JDBC Data Sources for Oracle WebLogic Server.\nIf the data source uses an XA JDBC driver to create database connections, connections from the data source will support the two-phase commit transaction protocol only.\nClick Save.\nMessaging WebLogic Server provides an enterprise-class messaging system that fully supports the Java Messaging Service (JMS) specification and which also provides numerous extensions that go beyond the standard JMS APIs.\nIt is tightly integrated into the WebLogic Server platform, allowing you to build highly secure Java EE applications that can be easily monitored and administered through WebLogic Remote Console. In addition to fully supporting XA transactions, WebLogic Server messaging also features high availability through its clustering and service migration features while also providing seamless interoperability with other versions of WebLogic Server and third-party messaging vendors.\nWebLogic Server messaging is comprised of these areas:\nJMS Servers: act as management containers for JMS queue and topic destinations in a JMS module that are targeted to them. A JMS server\u0026rsquo;s primary responsibility for its destinations is to maintain information on which persistent store is used for any persistent messages that arrive on the destinations, and to maintain the states of durable subscribers created on the destinations. Store-and-Forward Agents: provide a mechanism for reliably delivering messages between applications that are distributed across WebLogic Server subsystems, in particular the WebLogic JMS and Web Services subsystems. Using the highly available SAF service, an application can send messages to a remote endpoint that is not available at the moment when the messages are sent, either because of network problems or system failures. JMS System Modules: contain global configuration JMS resources, such as queues, topics, templates, connections factories, and JMS store-and-forward (SAF) destinations, and are defined by XML documents that conform to the weblogic-jmsmd.xsd schema. JMS system modules are stored in DOMAIN_HOME/config/jms and a reference to the module is added in the domain\u0026rsquo;s configuration file as a JMSSystemResource element. System modules are globally available for targeting to servers and clusters configured in the domain, and therefore are available to all applications deployed on the same targets and to client applications. Messaging Bridges: provide a forwarding mechanism between any two messaging products that support the JMS API. Use a messaging bridge to provide interoperability between separate implementations of WebLogic JMS, or between WebLogic JMS and another messaging product. Related Content For more information, see:\nUnderstanding JMS Resource Configuration in Administering JMS Resources for Oracle WebLogic Server Understanding the Store-and-Forward Service in Administering the Store-and-Forward Service for Oracle WebLogic Server Understanding the Messaging Bridge in Administering the WebLogic Messaging Bridge for Oracle WebLogic Server The WebLogic Persistent Store in Administering the WebLogic Persistent Store Create a JMS Server JMS servers are environment-related configuration entities that act as management containers for the queues and topics in JMS modules that are targeted to them.\nThe primary responsibility of a JMS server for its destinations is to maintain information on which persistent store is used for any persistent messages that arrive on the destinations, and to maintain the states of durable subscribers created on the destinations.\nJMS servers also manage message paging on destinations, and optionally, can manage message and byte thresholds, as well as server-level quota for its targeted destinations. As a container for targeted destinations, any configuration or run-time changes to a JMS server can affect all the destinations that it hosts.\nFor more information, see Overview of JMS Servers and Configure JMS Servers and Persistent Stores in Administering JMS Resources for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then JMS Servers.\nClick New.\nEnter a name for the new JMS Server and click Create.\nFrom the Persistent Store drop-down list, choose the store where this JMS server should store its persistent messages.\nIf you want to use the default persistent store provided by WebLogic Server, leave Persistent Store set to None.\nIf you don\u0026rsquo;t have a custom persistent store configured yet, click the More ︙ button beside Persistent Store and then select either New File Store or New JDBC Stores. Then, follow the instructions at Create a File Store or Create a JDBC Store. Select the newly created store from the Persistent Store drop-down list.\nWhen a JMS server is targeted to a:\nMigratable target, it cannot use the default store. A custom store must be configured and targeted to the same migratable target.\nDynamic cluster, it requires a custom persistent store that must target the same dynamic cluster or use the default store available on each dynamic cluster member.\nUse a custom store with Distribution Policy set to Singleton to host stand-alone (non-distributed) destinations.\nUse a custom store with Distribution Policy set to Distributed to host distributed destinations.\nConfigure any additional JMS server attributes. Remember to click Show Advanced Fields to see all of the options.\nClick Save.\nOn the Target tab, from the Target drop-down list, select the server instance, cluster, or migratable target where you want to deploy the JMS server.\nYou can target a JMS server to a standalone WebLogic Server instance, a cluster, or a migratable target server. Migratable targets define a set of WebLogic Server instances in a cluster that can potentially host a pinned service, such as a JMS server.\nIf you are using a JMS server in a clustered server environment, review the guidance provided at Configure JMS Servers and Persistent Stores in Administering JMS Resources for Oracle WebLogic Server.\nClick Save.\nMonitor a JMS Server You can monitor runtime statistics for an active JMS server. You can also access runtime information for a JMS server\u0026rsquo;s destinations, transactions, connections, and server session pools.\nFor more information, see Monitoring JMS Statistics and Managing Messages in Administering JMS Resources for Oracle WebLogic Server.\nIn the Monitoring Tree, go to Environment, then Servers and choose the server where the JMS server is deployed. Then proceed to Services, then Messaging, then JMS Runtime, then JMS Servers.\nIf you want to compare all of the JMS servers in the domain, instead go to Services, then Messaging, then JMS Runtime, then JMS Servers.\nSelect the JMS server whose runtime information you want to view.\nCreate a JMS System Module JMS resources are configured and stored as modules similar to standard Java EE modules. Such resources include queues, topics, connection factories, templates, destination keys, quota, distributed queues, distributed topics, foreign servers, and JMS store-and-forward (SAF) parameters.\nSystem modules are globally available for targeting to servers and clusters configured in the domain, and therefore are available to all applications deployed on the same targets and to client applications.\nJMS configuration resources can also be managed as deployable application modules, either with a Java EE application as a packaged module, which is available only to the enclosing application, or as a stand-alone module that provides global access to the resources defined in that module.\nFor more information, see Overview of JMS Modules in Administering JMS Resources for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then JMS Modules.\nClick New.\nEnter a name for the new JMS system module and click Create.\nOn the Target tab, from the Target drop-down list, select a server instance or cluster on which to deploy the JMS system module.\nClick Save.\nA new node will appear under JMS Modules in the Navigation Tree for your JMS system module.\nExpand the new node for your JMS system module to see its children which are the JMS system resources that you can configure. See Configure Resources for JMS System Modules.\nConfigure Resources for JMS System Modules After creating a JMS system module, you can configure resources for the module, including stand-alone queues and topics, distributed queues and topics, connection factories, JMS templates, destination sort keys, destination quota, foreign servers, and JMS SAF (store-and-forward) parameters.\nFor more information, see Configurable JMS Resources in Modules in Administering JMS Resources for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then JMS Modules.\nSelect the JMS system module that you want to configure resources for.\nIn the Navigation Tree, as child nodes of JMS system module that you selected, click the resource that you want to configure.\nThe following JMS system resources are available:\nQuota - controls the allotment of system resources available to destinations. Template - provides an efficient means of defining multiple queues and topics with similar configuration settings. Destination Key - defines a sort order for the messages as they arrive on destinations. Topic - defines a publish/subscribe (pub/sub) destination, which enables an application to send a message to multiple applications. Queue - defines a point-to-point (PTP) destination, which enables one application to send a message to another. Connection Factory - defines a set of connection configuration parameters that enable JMS clients to create JMS connections. Distributed Topic - a single unit of JMS topics that are accessible as a single, logical topic to a client. The members of the distributed topic are usually distributed across multiple servers within a cluster, with each topic member belonging to a separate JMS server. Distributed Queue - a single unit of JMS queues that are accessible as a single, logical topic to a client. The members of the distributed queue are usually distributed across multiple servers within a cluster, with each topic member belonging to a separate JMS server. Foreign Server - represents a third-party JMS provider that is outside WebLogic Server. It contains information that allows a local server instance to reach a remote JNDI provider, thereby allowing for a number of foreign connection factory and destination objects to be defined on one JNDI directory. SAF Imported Destination - defines a collection of imported SAF (store-and-forward) queues or topics that represent JMS destinations in a remote server instance or cluster. Remote SAF Context - specifies SAF login context that a SAF imported queue or topic uses to connect to a remote destination. SAF Error Handling - specifies the action to be taken when the SAF service fails to forward messages to a remote destination. For guidance on how to configure JMS modules, see Configuring Basic JMS System Resources in Administering JMS Resources for Oracle WebLogic Server. Enter any required information for the selected resource.\nCertain resources may encourage you to configure an appropriate subdeployment. A subdeployment is the mechanism by which targetable JMS module resources (such as queues, topics, and connection factories) are grouped and targeted to a server resource (such as JMS servers, server instances, or cluster).\nMost JMS resources have additional parameters that can be modified after they are created. For example, you can modify the default message threshold values or enable message logging for queues, topics, and templates.\nClick Create.\nCreate a Store-and-Forward Agent The Store-and-Forward (SAF) service enables WebLogic Server to deliver messages reliably between applications that are distributed across WebLogic Server instances.\nIf the destination is not available at the moment the messages are sent, either because of network problems or system failures, then the messages are saved on a local server instance, and are forwarded to the remote destination once it becomes available.\nSAF agents are responsible for store-and-forwarding messages between local sending and remote receiving endpoints. A SAF agent can be configured to have only sending capabilities, receiving capabilities, or both. JMS SAF only requires a sending agent on the sending side for JMS messages. Web Services Reliable Messaging (WSRM) SAF requires both a sending agent and a receiving agent.\nFor more information, see SAF Service Agents in Administering the Store-and-Forward Service for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then SAF Agents.\nClick New.\nEnter a name for the new SAF agent and click Create.\nFrom the Persistent Store drop-down list, choose the store where this SAF agent will store its persistent messages.\nIf you want to use the default persistent store provided by WebLogic Server, leave Persistent Store set to None.\nIf you don\u0026rsquo;t have a custom persistent store configured yet, click the More ︙ button beside Persistent Store and then either New File Store or New JDBC Stores. Then, follow the instructions at Create a File Store or Create a JDBC Store.\nWhen a SAF agent is targeted to a cluster, a SAF Agent must use a custom store with Distribution Policy set to Distributed and is targeted to the same cluster.\nA SAF Agent can use a default store only when targeting a configured (non-dynamic) cluster.\nWhen a SAF agent is targeted to a migratable target, a custom store must be configured and targeted to the same migratable target.\nFrom the Agent Type drop-down list, choose one of the following options:\nBoth: Configures an agent that has sending and receiving agent functionality. Sending-only: Configures an agent that stores messages in persistent storage, forwards messages to the receiving side, and re-transmits messages when acknowledgments do not come back in time. Receiving-only: Configures an agent that detects and eliminates duplicate messages sent by a receiving agent, and delivers messages to the final destination. JMS SAF users should select Sending-only as JMS SAF doesn\u0026rsquo;t require a configured receiving agent. Configure any additional SAF agent attributes. Remember to click Show Advanced Fields to see all of the options.\nClick Save.\nOn the Target tab, from the Target drop-down list, select the server instance, cluster, or migratable target where you want to deploy the SAF agent.\nWhen targeting a cluster, a SAF Agent must use a custom store with Distribution Policy set to Distributed and is targeted to the same cluster.\nIf a SAF agent is targeted to a migratable target, it cannot be targeted to any other server targets, including an entire cluster.\nClick Save.\nMonitor an SAF Agent You can view runtime information for an active SAF agent .\nFor more information, see Monitoring SAF Agents in Administering the Store-and-Forward Service for Oracle WebLogic Server.\nIn the Monitoring Tree, go to Environment, then Servers and choose the server where the SAF agent is deployed. Then proceed to Services, then Messaging, then SAF Runtime, then Agents.\nIf you want to see all of the SAF agents in the domain, instead go to Services, then Messaging, then SAF Runtime, then Agents.\nSelect the SAF agent whose runtime information you want to view.\nCreate a JMS Bridge Destination A JMS bridge destination instance defines the actual source and target JMS bridge destinations for a bridge instance.\nYou need to configure a JMS bridge destination instance for each source and each target destination to be mapped to a messaging bridge instance. Therefore, when you finish defining attributes for a source JMS bridge destination, repeat these steps to configure a target JMS bridge destination.\nIn the Edit Tree, go to Services, then JMS Bridge Destinations.\nClick New.\nEnter a name for the new JMS bridge destination and click Create.\nIn the Adapter JNDI Name field, specify the JNDI name of the adapter used to communicate with the bridge destinations.\nFor more information on which adapter name to enter, see Resource Adapters in Administering the WebLogic Messaging Bridge for Oracle WebLogic Server.\nIn the Connection URL field, specify the connection URL for this JMS bridge destination.\nIn the Connection Factory JNDI Name field, specify the connection factory\u0026rsquo;s JNDI name for this JMS bridge destination.\nIn the Destination JNDI Name field, specify the destination JNDI name for this JMS bridge destination.\nConfigure any additional attributes that are applicable to your environment.\nClick Save.\nRepeat these steps to create a matching JMS bridge destination.\nIf you first created a source JMS bridge destination, then now you should create a target destination.\nIf you first created a target JMS bridge destination, then now you should create a source destination.\nCreate a Messaging Bridge Instance The WebLogic messaging bridge allows you to configure a forwarding mechanism between any two messaging products. You can use the messaging bridge to integrate your messaging applications. A messaging bridge instance communicates with the configured source and target bridge destinations.\nFor each mapping of a source destination to a target destination, whether it is another WebLogic JMS implementation, or a third-party JMS provider, you must configure a messaging bridge instance.\nEach instance defines the source and target destination for the mapping, a message filtering selector, a quality of service (QOS), transaction semantics, and reconnection parameters.\nFor more information, see Understanding the Messaging Bridge in Administering the WebLogic Messaging Bridge for Oracle WebLogic Server.\nIf you haven\u0026rsquo;t already, create and configure source and target JMS bridge destinations as described in Create a JMS Bridge Destination.\nIn the Edit Tree, go to Services, then Messaging Bridge.\nClick New.\nEnter a name for the new messaging bridge instance and click Create.\nFrom the Source Bridge Destination drop-down list, select a source destination.\nFrom the Target Bridge Destination drop-down list, select a target destination.\nConfigure any additional attributes that are applicable to your environment.\nClick Save.\nIf you plan to use the messaging bridge to access destinations on different releases of WebLogic Server, or in remote WebLogic domains, then you may need to manually implement some of the interoperability guidelines described at Interoperating with Different WebLogic Server Releases or Foreign Providers in Administering the WebLogic Messaging Bridge for Oracle WebLogic Server.\nCreate a File Store A file store is a file-based repository for storing subsystem data, such as persistent JMS messages or durable subscriber information.\nA persistent store provides a built-in, high-performance storage solution for WebLogic Server subsystems and services that require persistence. For example, it can store persistent JMS messages or durable subscriber information, as well as temporarily store messages sent to an unavailable destination using the store-and-forward feature.\nThe persistent store also supports persistence to a JDBC-enabled database (JDBC store). See Create a JDBC Store instead.\nCreate a directory on your file system for the file store.\nThe directory must be accessible from all candidate server members. For highest reliability, use a shared storage solution that is itself highly available. For example, a storage area network (SAN) or a dual-ported SCSI disk.\nIn the Edit Tree, go to Services, then File Stores.\nClick New.\nEnter a name for the new File Store and click Create.\nIn the Directory field, enter the path to the directory on the file system where the file store is kept.\nModify any additional settings that are applicable to your environment.\nClick Save.\nOn the Target tab, from the Target drop-down list, select a server instance, dynamic cluster, or migratable target on which to deploy the file store.\nWhen selecting a dynamic cluster, the store must be targeted to the same dynamic cluster as the JMS server.\nWhen selecting a migratable target, the store must share the same migratable target as the migratable JMS server or SAF agent.\nClick Save.\nCreate a JDBC Store A JDBC store is a JDBC-accessible database for storing subsystem data, such as persistent JMS messages and durable subscriber information.\nA persistent store provides a built-in, high-performance storage solution for WebLogic Server subsystems and services that require persistence. For example, it can store persistent JMS messages or durable subscriber information, as well as temporarily store messages sent to an unavailable destination using the store-and-forward feature.\nThe persistent store also supports persistence to a file-based store (file store). See Create a File Store instead.\nIf you haven\u0026rsquo;t already, create a JDBC data source. See Data Sources.\nA JDBC store must use a JDBC data source that uses a non-XA JDBC driver and has Supports Global Transactions disabled. This limitation does not remove the XA capabilities of layered subsystems that use JDBC stores. For example, WebLogic JMS is fully XA-capable regardless of whether it uses a file store or any JDBC store.\nMake sure the data source is accessible to all candidate servers.\nIn the Edit Tree, go to Services, then JDBC Stores.\nClick New.\nEnter a name for the new JDBC store.\nIn the Prefix Name field, specify a prefix name to add to the start of the table name in this JDBC store for use with multiple instances.\nFrom the Data Source drop-down list, select a data source.\nFrom the Target drop-down list, select a server instance, dynamic cluster, or migratable target on which to deploy the file store.\nWhen selecting a dynamic cluster, the store must be targeted to the same dynamic cluster as the JMS server. When selecting a migratable target, the store must share the same migratable target as the migratable JMS server or SAF agent.\nModify the rest of the settings as needed.\nClick Save.\nCreate a Path Service A path service is persistent map that can be used to store the mapping of a group of messages to a messaging resource, such as a member of a distributed destination or a store-and-forward agent.\nPath services provide a way to enforce message ordering by pinning messages to a member of a cluster hosting servlets, distributed queue members, or store-and-forward agents.\nFor more information, see Using the WebLogic Path Service in Administering JMS Resources for Oracle WebLogic Server.\nIf you haven\u0026rsquo;t already, create and configure at least one for each of the following: a cluster, a custom persistent store, and a store-and-forward (SAF) agent. You may also want to configure JMS system modules.\nSee:\nConfigure Clusters\nCreate a File Store or Create a JDBC Store\nCreate a Store-and-Forward Agent\nCreate a JMS System Module\nIn the Edit Tree, go to Services, then Path Services.\nClick New.\nEnter a name for the new Path Service and click Create.\nFrom the Persistent Store drop-down list, choose the store where this path service will store its persistent messages.\nIf you plan to target the path service to a migratable target, then it must use a custom store. If you plan to target the path service to a cluster, then you must specify a custom store with the same target, a Migration Policy set to Always, and a Distribution Policy set to Singleton.\nIf you want to use the default persistent store provided by WebLogic Server, leave Persistent Store set to None. However, it is recommended that you use a custom store instead of the default store.\nClick Save.\nOn the Target tab, from the Target drop-down list, select the cluster, cluster member or migratable target where you want to deploy the path service.\nClick Save.\nView Objects in the JNDI Table You can use WebLogic Remote Console to view objects in the Java Naming and Directory Interface (JNDI) table.\nWebLogic Server implements the JNDI of the Java EE platform as a means to provide a standard, unified interface to multiple naming and directory services in an enterprise. See Understanding WebLogic JNDI in Developing JNDI Applications for Oracle WebLogic Server.\nYou can load WebLogic Server Java EE services and components, such as RMI, JMS, EJBs, and JDBC Data Sources, in the JNDI table. Typically, these objects are bound in the JNDI table when you configure their JNDI Name attribute and deploy them to the server.\nIn the Monitoring Tree, go to Environment, then Servers, then myServer.\nClick the JNDI tab to see the JNDI objects.\nThe JNDI tab is only visible on servers that are running and reachable by the Administration Server.\nCreate a Foreign JNDI Provider A foreign JNDI provider represents a JNDI tree that resides outside of a WebLogic Server environment. This could be a JNDI tree in a different server environment or within an external Java program.\nBy setting up a foreign JNDI provider, you can look up and use a remote object with the same ease as using an object bound in your WebLogic Server instance. In other words, you can access local and remote objects using a single WebLogic Server connection.\nIn the Edit Tree, go to Services, then Foreign JNDI Providers.\nClick New.\nEnter a name for the new Foreign JNDI provider and click Create.\nIn the Initial Context Factory field, enter the name of the class that must be instantiated to access the JNDI provider. This class name depends on the JNDI provider and the vendor that are being used. The value corresponds to the standard JNDI property, java.naming.factory.initial.\nIn the Provider URL field, enter the URL that WebLogic Server will use to contact the JNDI provider. This value corresponds to the standard JNDI property, java.naming.provider.url.\nIn the User field, enter the name of a user authorized to access the foreign JNDI, then in Password, enter the user account\u0026rsquo;s password.\nClick the Targets tab and select the servers or clusters where you want to deploy this foreign JNDI provider.\nIf you want to specify additional properties for the JNDI provider, click the Properties tab.\nThese properties will be passed directly to the constructor for the JNDI provider\u0026rsquo;s InitialContext class.\nIn the Properties table, click + to add a new row.\nDouble-click the cell under Properties Name and enter a name for the property.\nDouble-click the cell under Properties Value and enter a value for the property.\nClick Save.\nNext, you should create foreign JNDI object links which set up a relationship between a name in your local JNDI table and the object in the foreign (remote) table.\nExpand the node in the Navigation Tree for the Foreign JNDI Provider you created and open the Foreign JNDI Links child node.\nClick New.\nEnter a name for the foreign JNDI link.\nIn the Local JNDI Name field, specify the name that the remote JNDI object will be bound to in the local server\u0026rsquo;s JNDI tree and used to look up the object on the local server.\nIn the Remote JNDI Name field, specify the name of the remote object that will be looked up in the foreign JNDI directory.\nClick Create.\nXML Resources You can configure two different types of XML resources for WebLogic Server.\nXML registries, which you can use to specify alternative server-wide XML parsers and transformers for WebLogic Server to use when it parses and transforms XML documents. You can also use the XML registry to specify local copies of external entities and caching instructions for these entities. See Create an XML registry. XML entity caches, which you can use to configure the cache that WebLogic Server uses to cache external entities. See Create an XML Entity Cache. You can create as many XML registries and entity caches as you like. However, you can only associate one of each type with a particular server instance of WebLogic Server.\nFor more information on how XML resources are used in WebLogic Server, see Developing XML Applications for Oracle WebLogic Server.\nCreate an XML registry An XML Registry is a facility for configuring and administering the XML resources of WebLogic Server. XML resources include the default parser, transformer factories, and external entity resolution.\nIn particular, use an XML registry to specify:\nAn alternative, server-wide XML parser, used by default when parsing XML documents, instead of the parser that is installed by default. You do this by specifying the names of the classes that implement the javax.xml.parsers.DocumentBuilderFactory and javax.xml.parsers.SaxParserFactory interfaces; these implementing classes are used to parse XML in DOM and SAX mode, respectively. A specific XML parser that should be used to parse a particular document type. An alternative server-wide transformer instead of the default transformer. You do this by specifying the name of the class that implements the javax.xml.transform.TransformerFactory interface, used to transform XML documents. External entities that are to be resolved by using local copies of the entities. After you specify these entities, the Administration Server stores local copies of them in the file system and automatically distributes them to the server’s parser at parse time. This feature eliminates the need to construct and set SAX EntityResolvers. External entities to be cached by WebLogic Server after retrieval from the Web. Specify how long these external entities should be cached before WebLogic Server re-retrieves them and when WebLogic should first retrieve the entities, either at application run time or when WebLogic Server starts. You can create as many XML Registries as you like; however, you can associate only one XML registry with a particular instance of WebLogic Server.\nIf an instance of WebLogic Server does not have an XML registry associated with it, then the default parser and transformer are used when parsing or transforming documents. The default parser and transformer are those included in the JDK.\nOnce you associate an XML registry with an instance of WebLogic Server, all its configuration options are available for XML applications that use that server.\nIn the Edit Tree, go to Services, then XML Registries.\nClick New.\nEnter a name for the XML registry and click Create.\nIf you don\u0026rsquo;t plan to use the default parser and transformer, you must specify your alternative settings.\nIn the Document Builder Factory field, enter the fully qualified name of the class that implements the javax.xml.parsers.DocumentBuilderFactory interface.\nIn the SAX Parser Factory field, enter the fully qualified name of the class that implements the javax.xml.parsers.SaxParserFactory interface.\nIn the Transformer Factory field, enter the fully qualified name of the class that implements the javax.xml.transform.TransformerFactory interface.\nClick Save.\nNext, you must associate the XML registry with a WebLogic Server instance. See Target an XML Registry to a Server.\nTarget an XML Registry to a Server A WebLogic Server can only have one XML registry associated with it. However, you can target the same XML registry to multiple WebLogic Server instances.\nIf you haven\u0026rsquo;t done so already, create an XML registry. See Create an XML registry.\nIn the Edit Tree, go to Environment, then Servers.\nChoose the server to which you want the XML registry.\nEnable Show Advanced Fields and then from the XML Registry drop-down list, select the XML registry that you want to target to this server.\nClick Save.\nCreate an XML Entity Cache You can specify that WebLogic Server should cache external entities that are referenced with a URL or a pathname relative to the main directory of the EAR archive, either at server startup or when the entity is first referenced. You specify this by first creating an XML entity cache and then specifying when it should be cached for the particular entity.\nCaching the external entity saves the remote access time and provides a local backup in the event that the Administration Server cannot be accessed while an XML document is being parsed, due to the network or the Administration Server being down.\nIn the Edit Tree, go to Services, then XML Entity Caches.\nClick New.\nEnter a name for the XML entity cache and click Create.\nUpdate the configuration options for the new XML entity cache as needed.\nClick Save.\nNext, you must associate the XML entity cache with a WebLogic Server instance. See Target an XML Entity Cache to a Server.\nTarget an XML Entity Cache to a Server A WebLogic Server instance can only have one XML entity cache associated with it.\nIf you haven\u0026rsquo;t already done so, create an XML entity cache. See Create an XML Entity Cache.\nIn the Edit Tree, go to Environment, then Servers.\nChoose the server to which you want the XML entity cache.\nEnable Show Advanced Fields and then from the XML Entity Cache drop-down list, select the XML entity cache that you want to target to this server.\nClick Save.\nConfigure Access to JavaMail You can configure a mail server or establish user credentials for an existing mail server. Mail sessions and the JavaMail API do not provide mail server functions. They merely enable applications to send and receive data from an existing mail server.\nJavaMail APIs provide applications and other Java EE modules with access to Internet Message Access Protocol (IMAP) and Simple Mail Transfer Protocol (SMTP) capable mail servers on your network or the internet.\nIn the reference implementation of JavaMail, applications must instantiate javax.mail.Session objects, which designate mail hosts, transport and store protocols, and a default mail user for connecting to a mail server. You can use WebLogic Remote Console to create a mail session, which configures a javax.mail.Session object and registers it in the WebLogic Server JNDI table. Applications access the mail session through JNDI instead of instantiating their own javax.mail.Session object.\nIn the Edit Tree, go to Services, then Mail Sessions.\nClick New.\nEnter a Name and a JNDI Name for the mail session.\nApplications use the JNDI Name to look up the mail session. For example, if you enter myMailSession as the JNDI name, applications perform the following look up:\nInitialContext ic = new InitialContext(); Session session = (Session) ic.lookup(\u0026#34;myMailSession\u0026#34;); Click Create.\nIn the Session Username field, specify the user account to use to create an authenticated JavaMail session. Then, in the Session Password field, enter the password for the user account.\nIf you do not specify a user account, it is assumed the session is not to be authenticated.\nOn the Targets tab, move the servers or clusters that you want this mail session to target over to Chosen.\nThe mail session is only registered in the JNDI table for the targeted WebLogic Server instances.\nWhen you target all or part of a cluster, WebLogic Remote Console initiates a two-phase deployment. In general, such a deployment ensures that if the deployment fails for one active server, it fails for all active servers.\nClick Save.\nYou can specify additional properties for connecting to an existing mail server.\nOnly specify a property if you want to override the default value. If you do not specify any properties, the mail session will use the JavaMail default property values.\nOn the Java Mail Properties tab, in the Java Mail Properties table, click + to add a new row.\nDouble-click the cell under Properties Name and enter a name for the property.\nDouble-click the cell under Properties Value and enter a value for the property.\nClick Save.\nTable 2 describes the valid properties and default values, derived from the JavaMail API Design Specification.\nTable 2. Java Mail Properties. The valid properties and default values, derived from the JavaMail API Design Specification. Property Description Default mail.store.protocol Protocol for retrieving email. For example, mail.store.protocol=imap.\nimap mail.transport.protocol Protocol for sending email. For example, mail.transport.protocol=smtp smtp mail.host The name of the mail host machine. For example, mail.host=mailserver.\nLocal machine mail.user Name of the default user for retrieving email. For example, mail.user=postmaster.\nValue of the user.name Java system property. mail.protocol.host The mail host for a specific protocol. You can set mail.SMTP.host and mail.IMAP.host to different machine names. For example, mail.smtp.host=mail.mydom.com mail.imap.host=localhost Value of the mail.host property. mail.protocol.user Protocol-specific default user name for logging into a mailer server. For example, mail.smtp.user=weblogic mail.imap.user=appuser.\nValue of the mail.user property. mail.protocol.user The default return address. For example, mail.from=master@mydom.com username@host mail.debug Set to True to enable JavaMail debug output. False Applications can override any properties set in the mail session by creating a Properties object containing the properties you want to override. See Programming JavaMail with WebLogic Server in Developing Applications for Oracle WebLogic Server.\nConfigure Domain JTA Options In WebLogic Server, you can set many options that affect transaction processing at the domain level so that they apply to all servers in the domain.\nIn the Edit Tree, go to Services, then JTA.\nSpecify new values for any or all of the available options. Click Show Advanced Fields to show all of the options.\nClick Save.\nView Transaction Statistics You can monitor transactions and transaction statistics.\nFor more information, see Monitoring Transactions in Developing JTA Applications for Oracle WebLogic Server.\nIn the Monitoring Tree, go to Services, then Transactions, then JTA Runtime to see statistics for all transactions coordinated by server.\nIf you want to see the transaction statistics for only one server, click the server row in the table.\nYou can also expand the child nodes under JTA Runtime to view transaction details by transaction name or by resource, details about current transactions, or details about transaction recovery performed by the server.\nView Current Transactions You can view in-progress transactions coordinated by the selected server.\nIn the Monitoring Tree, go to Environment, then Servers, then choose the server whose transactions you want to view.\nUnder the server node, go to Services, then Transactions, then JTA Runtime.\nClick the Transactions tab to see current transactions for the selected server.\nEnable Local Domain Security for JTA Communication Local domain security for JTA establishes trust between servers within a domain so that global transactions may occur across secure communication channels.\nLocal domain security extends the cross-domain protocol and its terminology and configuration reflect that origin. Nevertheless, local domain security is only applicable to local (intra-) domain communication.\nIf you need to secure JTA communication across separate domains, you should configure cross-domain security or the security interoperability mode. See How to Determine the Communication to Use for Inter-Domain Transactions in Developing JTA Applications for Oracle WebLogic Server.\nIn the Edit Tree, go to Services, then JTA.\nClick Show Advanced Controls.\nTurn on the Local Domain Security Enabled option.\nTo reduce the impact on performance, WebLogic Server caches the authenticated subject. If you want to modify the cache settings for your environment, change the following settings:\nTo disable the cache, turn off Local Domain Security Cache Enabled. To change how often the cache is cleared, update the Local Domain Security Cache TTL value (in seconds). Click Save and then commit your changes.\nCreate a user for local domain security and assign it to the CrossDomainConnectors group. See Create a User.\nThis user will be authorized to perform all JTA communication between servers in the domain.\nConfigure a local domain security credential mapping for the local domain security user. Use the default credential mapping provider or, if you want to configure your own credential mapping provider, see Configure a Credential Mapping Provider.\nIn the Security Data Tree, go to Realms, then myRealm, then Credential Mappers, then Remote Resources.\nClick New.\nTurn on the Use cross-domain protocol option.\nIn the Remote Domain field, enter the name of the local domain.\nIn the Remote User field, enter the username of the user you configured in step 5. Then, in the Remote Password field, enter their password.\nClick Create.\nLocal domain security is now enabled for JTA communication.\nSpecify the JTA Security Interoperability Mode The security interoperability (interop) mode determines the security subject for JTA communication between servers.\nIf local- or cross-domain security are enabled, they supersede the security interop mode.\nIn the Edit Tree, go to Services, then JTA.\nClick Show Advanced Controls.\nFrom the Security Interoperability Mode drop-down list, select a mode:\nDefault: Messages are forwarded using kernel identity if the Admin channel is also configured. Otherwise, it behaves like performance mode. See Configure the Domain-Wide Administration Port. Performance: Messages are forwarded using an anonymous user. Click Save.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/administration-server/configuring-coherence/",
	"title": "Configuring Coherence",
	"tags": [],
	"description": "",
	"content": "Oracle Coherence enables organizations to predictably scale mission-critical applications by providing fast and reliable access to frequently used data. By automatically and dynamically partitioning data in memory across multiple servers, Coherence enables continuous data availability and transactional integrity, even in the event of a server failure.\nWebLogic Server domains include a Coherence container that simplifies the management and deployment of Coherence clusters and Coherence-based applications.\nCoherence can also be installed in a standalone mode that does not rely on WebLogic Server. WebLogic Remote Console cannot administer standalone Coherence installations, therefore this documentation focuses solely on using Coherence with WebLogic Server.\nTo learn more about standalone Coherence, see Introducing the Oracle Coherence Standard Installation Topologies in Installing Oracle Coherence.\nCoherence Clusters and Managed Coherence Servers Coherence is integrated within WebLogic Server as a container subsystem, known as a Coherence cluster. The use of a container aligns the lifecycle of a Coherence member with the lifecycle of a Managed Server: starting or stopping a server JVM starts and stops a Coherence cluster member.\nA WebLogic Server domain can contain a single Coherence cluster that can be associated with multiple WebLogic Server clusters. Within a Coherence cluster are Coherence cluster members.\nManaged Coherence servers are Managed Servers that are configured to be Coherence cluster members. Managed Coherence servers provide in-memory distributed caching for applications to increase application scalability, availability, and performance.\nManaged servers can be explicitly associated with a Coherence cluster or they can be associated with a WebLogic Server cluster that is associated with a Coherence cluster.\nManaged Coherence servers that are part of a WebLogic Server cluster inherit their Coherence settings from the WebLogic Server cluster. WebLogic Server clusters are typically used to set up Coherence deployment tiers that organize managed Coherence servers based on their role in the Coherence cluster.\nSimilar to WebLogic Server clusters, Coherence clusters consist of multiple managed Coherence server instances. However, Coherence clusters use different clustering protocols and are configured separately from WebLogic Server clusters.\nWith Coherence clusters, a client interacts with the data in a local cache, and the distribution and backup of the data is automatically performed across cluster members.\nFor more information, see Configuring and Managing Coherence Clusters in Administering Clusters for Oracle WebLogic Server.\nIn previous releases, Coherence cluster members were organized into Coherence servers (also known as Coherence data nodes). This feature is deprecated and not supported by WebLogic Remote Console. Coherence tiers should be configured to use Managed Coherence servers instead.\nConfigure Coherence: Main Steps For optimal performance or scalability, Coherence is typically set up using WebLogic Server clusters to represent deployment tiers.\nVerify whether your domain\u0026rsquo;s topology can support separate WebLogic Server clusters to represent Coherence deployment tiers. For guidance, see Cluster Architectures in Administering Clusters for Oracle WebLogic Server.\nAlternatively, for development purposes, you can set up a single standalone Managed Server instance to act as both a cache server and a cache client. See Configure and Deploy Coherence on a Single-Server Cluster.\nSingle-server topologies are not recommended for production use.\nConfigure a Coherence cluster as described in Create a Coherence Cluster.\nConfigure a data tier as described in Create a Coherence Data Tier.\nA Coherence data tier is a WebLogic Server cluster that is associated with a Coherence cluster and hosts any number of storage-enabled managed Coherence servers. For more information, see Configuring and Managing a Coherence Data Tier in Administering Clusters for Oracle WebLogic Server.\nConfigure an application tier as described in Create a Coherence Application Tier.\nA Coherence application tier is a WebLogic Server cluster that is associated with a Coherence cluster and hosts any number of storage-disabled managed Coherence servers. For more information, see Configuring and Managing a Coherence Application Tier in Administering Clusters for Oracle WebLogic Server.\nConfigure a proxy tier as described in Create a Coherence Proxy Tier.\nA Coherence proxy tier is a WebLogic Server cluster that is associated with a Coherence cluster and hosts any number of managed Coherence proxy servers. Managed Coherence proxy servers allow Coherence*Extend clients to use Coherence caches without being cluster members. For more information, see Configuring and Managing a Coherence Proxy Tier in Administering Clusters for Oracle WebLogic Server.\nCreate and package a Coherence Grid Archive (GAR) module for any application modules (Web application, EJB, and so on) that use Coherence. For more information, see Creating Coherence Applications for WebLogic Server in Developing Oracle Coherence Applications for Oracle WebLogic Server.\nDeploy your Coherence GAR module to your WebLogic Server domain as described in Install an Application.\nStandalone GARs are deployed in the same way as other Java EE modules. For more information, see Deploying Coherence Applications in WebLogic Server in Developing Oracle Coherence Applications for Oracle WebLogic Server.\nCreate a Coherence Cluster Coherence clusters enable applications to share data management and caching services among server instances and clusters hosting the applications that need access to them.\nConfigure cluster properties and then target Coherence clusters to WebLogic Server instances or clusters in the domain.\nIn the Edit Tree, go to Environment, then Coherence Clusters.\nClick New.\nEnter a name for the Coherence cluster and click Create.\nSelect a Clustering Mode and then adjust the Coherence general properties according to the clustering mode you selected.\nIf you want to specify operational settings that are not available through the provided MBeans, you can upload a cluster configuration file with your supplemental settings. Click Import Configuration, then, in the Custom Cluster Configuration File Name dialog box, enter the location of the cluster configuration file, relative to the domain configuration directory.\nAvoid configuring the same operational settings in both an external cluster configuration file and through the MBeans.\nClick Save.\nNext, you should consider updating the following configuration options:\nTarget Coherence Clusters\nConfigure Coherence Federation\nConfigure Coherence Persistence\nSet Up the Coherence Security Framework\nConfigure Coherence Clusters A Coherence cluster provides several cluster settings that can be configured for a specific domain.\nYou should update the default values of the Coherence cluster as needed for your environment.\nConfigure Coherence Federation Use Coherence federation to federate cache data asynchronously across multiple geographically dispersed clusters. Federating cached data across clusters provides redundancy, off-site backup, and multiple points of access for application users in different geographical locations.\nFor more information, see Federating Caches Across Clusters in Administering Oracle Coherence.\nIn the Edit Tree, go to Environment, then Coherence Clusters.\nClick the Coherence cluster that you want to edit, then select the Coherence Federation tab.\nSelect a Federation Topology from the drop-down list.\nWhen a topology is selected, a topology configuration is automatically created and named Default-Topology. The Default-Topology topology configuration is created and used if no other federation topology is specified in the cache configuration file.\nWhen using federation, complementary topologies must be configured on both the local and remote clusters. For example, if a local cluster is set to use active-passive, then the remote cluster must be set to use passive-active.\nIn the Remote Coherence Cluster Name field, enter the name of the remote cluster to which this cluster is being federated.\nIn the Remote Participant Hosts field, enter one or more hosts (separated by commas) that are running managed Coherence servers on the remote cluster.\nIf required, change the cluster port of the remote cluster in the Remote Coherence Cluster Listen Port. The default cluster port is typically not changed.\nClick Save.\nConfigure Coherence Persistence Use Coherence persistence to save and recover Coherence distributed caches. Cached data is persisted so that it can be quickly recovered after a catastrophic failure or after a cluster restart due to planned maintenance.\nFor more information on configuring persistence in Coherence, see Persisting Caches in Administering Oracle Coherence.\nIn the Edit Tree, go to Environment, then Coherence Clusters.\nClick the Coherence cluster that you want to edit, then select the Coherence Persistence tab.\nChoose a Persistence Mode from the drop-down list.\nOn-Demand: In this mode, a cache service is manually persisted and recovered upon request using the persistence coordinator. The persistence coordinator is exposed as an MBean interface that provides operations for creating, archiving, and recovering snapshots of a cache service. Active: In this mode, cache contents are automatically persisted on all mutations and are automatically recovered on cluster/service startup. The persistence coordinator can still be used in active persistence mode to perform on-demand snapshots. Active-Async: In this mode, the storage servers can persist data asynchronously. Thus, a mutating request is successful after the primary stores the data and (if there is a synchronous backup) after the backup receives the update. Active Backup: In this mode, persistence behaves similarly to the active persistence mode but it also stores backup partitions asynchronously on a disk. You can override the default locations where various persistence files are stored. Enter new file locations in the appropriate fields:\nActive Directory Snapshot Directory Trash Directory Backup Directory Events Directory Click Save.\nConfigure Coherence Logging You can configure logging properties for a Coherence cluster.\nIn the Edit Tree, go to Environment, then Coherence Clusters.\nClick the Coherence cluster that you want to edit, then select the Logging tab.\nMake sure the Enabled option is turned on.\nIn the Logger Name field, enter the logger name for the Coherence logs.\nIn the Message Format field, enter the Coherence logs message format.\nIn the Severity Level field, enter the logging severity level for Coherence logs. The maximum level you can set is 9.\nIn the Character Limit field, enter the character limit for Coherence logs.\nClick Save.\nSet Up the Coherence Security Framework You can enable and configure the Coherence security framework. If you do not enable security, then any non-WebLogic Server JVM can access the Coherence cluster without going through WebLogic Server authorization.\nFor more information, see Securing Oracle Coherence in Oracle WebLogic Server in Securing Oracle Coherence.\nIn the Edit Tree, go to Environment, then Coherence Clusters.\nClick the Coherence cluster that you want to edit, then select the Security tab.\nTurn on the Security Framework Enabled option and then configure the security parameters to meet the requirements of your environment.\nIf the Secured Production option is not set, Coherence will inherit its domain mode from WebLogic Server.\nClick Save.\nEnable an Identity Asserter for a Coherence cluster to assert a client\u0026rsquo;s identity token. For local extend clients, an identity asserter is already enabled for asserting a token of type weblogic.security.acl.internal.AuthenticatedSubject. For remote (outside of WebLogic Server) extend clients, a custom identity asserter implementation class must be packaged in a GAR. However, an identity asserter is not required if the remote extend client passes null as the token. If the proxy service receives a non-null token and there is no identity asserter implementation class configured, a SecurityException is thrown and the connection attempt is rejected.\nUnder the current Coherence cluster node in the navigation tree, select Coherence Identity Asserter.\nIn the Class Name field, enter the fully qualified name of the asserter class. For example, to use the default identity asserter, enter com.tangosol.net.security.DefaultIdentityAsserter.\nClick Save.\nIf there are any arguments, open the Identity Asserter Constructor Arguments node and click New to add class constructor arguments.\nClick Save.\nIf you want to define WebLogic Server roles and policies for authorizing access to Coherence services and caches, see Secure a Coherence Service Configuration or Secure Coherence Caches, respectively.\nTarget Coherence Clusters Target Coherence clusters to WebLogic Server instances or clusters that host applications that need access to Coherence data caches and services.\nIn the Edit Tree, go to Environment, then Coherence Clusters.\nClick the Coherence cluster that you want to edit, then select the Members tab.\nSelect the servers or clusters where you want to deploy the Coherence cluster configuration and move them under Chosen. Move any unwanted servers or clusters under Available.\nClick Save.\nCreate a Cluster Cache Configuration A Coherence cache configuration file defines the caches and services that are used by an application. Typically, a cache configuration file is included in a GAR module.\nA GAR is deployed to all managed Coherence servers in the data tier and can also be deployed as part of an EAR to the application tier. The GAR ensures that the cache configuration is available on every Coherence cluster member.\nHowever, there are cases that require a different cache configuration file to be used on specific managed Coherence servers. For example, a proxy tier requires access to all artifacts in the GAR but needs a different cache configuration file that defines the proxy services to start.\nYou can use WebLogic Remote Console to define a cluster cache configuration. A cache configuration file can be associated with WebLogic clusters or Managed Coherence Servers at runtime. In this case, the cache configuration overrides the cache configuration file that is included in a GAR. You can also omit the cache configuration file from a GAR file and assign it at runtime.\nTo override a cache configuration file at runtime, the cache configuration file must be bound to a JNDI name. The JNDI name is defined using the override-property attribute of the element. The element is located in the coherence-application.xml file that is packaged in a GAR file. For more information on the coherence-application.xml file, see coherence-application.xml Deployment Descriptor Elements in Developing Oracle Coherence Applications for Oracle WebLogic Server. For more information on importing a cache configuration file, see Overriding a Cache Configuration File in Administering Clusters for Oracle WebLogic Server.\nIf you haven\u0026rsquo;t already done so, create a Coherence cluster. See Create a Coherence Cluster.\nIn the Edit Tree, go to Environment, then Coherence Clusters, then myCoherenceCluster, then Coherence Cache Configs.\nClick New.\nIn the Name field, enter a name for the Coherence cache configuration.\nIn the JNDI Name field, enter the JNDI name to which the cache configuration file is bound.\nThis JNDI name is prefixed with cache-config/ and must match the value in the override-property of your cache-configuration-ref entry in coherence-application.xml.\nFor example, JNDI name of ExamplesGAR must match the override-property of cache-config/ExamplesGAR.\nIn the Cache Configuration File field, enter the full path to the cache configuration file. Alternatively, you may specify a URL.\nClick Create.\nOn the Targets tab, select the servers or clusters where you want to target the cluster cache configuration and move them under Chosen. Move unwanted servers or clusters under Available.\nClick Save.\nSecure Coherence Caches Use WebLogic Server authorization to restrict access to specific Coherence caches.\nIf you haven\u0026rsquo;t already done so, create a Coherence cluster. See Create a Coherence Cluster.\nIn the Edit Tree, go to Environment, then Coherence Clusters, then myCoherenceCluster, then Coherence Caches.\nClick New.\nIn the Name field, enter a name for the Coherence cache. The name of the cache must match exactly the name of the cache used in an application.\nClick Create and commit your changes.\nApply a security role that is scoped to the Coherence cache. See Create a Scoped Role.\nSecure a Coherence Service Configuration You can use WebLogic Server authorization to restrict access to Coherence services. Specifying authorization on a cache service affects access to all the caches that are created by that service.\nIn the Edit Tree, go to Environment, then Coherence Clusters, then myCoherenceCluster, then Coherence Services.\nClick New.\nIn the Name field, enter a name for the Coherence service. The name of the service must match exactly the name of the service used in an application.\nThe exact name must include the scope name as a prefix to the service name. The scope name can be explicitly defined in the cache configuration file or, more commonly, taken from the deployment module name. For example, if you deploy a GAR named contacts.gar that defines a service named ContactsService, then the exact service name is contacts:ContactsService.\nClick Create and commit your changes.\nApply a security role that is scoped to the Coherence service. See Create a Scoped Role.\nSpecify a Coherence Well Known Address Configure a well known address for a Coherence cluster. Other members can use this address to enroll in the cluster.\nIn the Edit Tree, go to Environment, then Coherence Clusters, then myCoherenceCluster, then Coherence Cluster Well Known Addresses.\nClick New.\nIn the Name field, enter a name for the Coherence well known address.\nIn the Listen Address field, enter the IP address of the Coherence cluster member.\nClick Create.\nConfigure a Coherence Address Provider An address provider specifies the TCP listener address (IP or DNS name, and port) for a proxy service.\nIn the Edit Tree, go to Environment, then Coherence Clusters, then myCoherenceCluster, then Coherence Address Providers.\nClick New.\nIn the Name field, enter a name for the Coherence address provider.\nClick Create.\nA node for the new address provider will appear under the Coherence Address Providers.\nExpand the new node and go to Coherence Socket Addresses.\nClick New.\nEnter a name for the socket address.\nIn the Address field, specify the listen address for your socket address.\nIn the Port field, specify the listen port for your socket address.\nClick Create.\nCoherence Deployment Tiers In production environments, Coherence is typically set up using WebLogic Server clusters to represent deployment tiers.\nThere are three types of Coherence deployment tiers:\nData Tier which hosts one or more cache servers Application Tier which hosts one or more cache clients Proxy Tier which hosts one or more managed Coherence proxy servers and the Coherence extend client tier that hosts extend clients The tiered topology approach provides optimal scalability and performance.\nFor more information on Coherence deployment tiers, see Creating Coherence Deployment Tiers in Administering Clusters for Oracle WebLogic Server.\nCreate a Coherence Data Tier A Coherence data tier is a WebLogic Server cluster that is associated with a Coherence cluster and hosts any number of storage-enabled managed Coherence servers.\nFor more information on Coherence data tiers, see Configuring and Managing a Coherence Data Tier in Administering Clusters for Oracle WebLogic Server.\nIf you haven\u0026rsquo;t already done so, create a Coherence cluster as described in Create a Coherence Cluster.\nCreate a WebLogic Server cluster as described in Create a Cluster.\nOn the WebLogic Server cluster that you just created, go to the Advanced tab, then the Coherence subtab.\nFrom the Coherence Cluster System Resource drop-down list, select the Coherence cluster.\nTurn on the Local Storage Enabled option.\nClick Save.\nCreate one or more managed Coherence servers as described in Create a Managed Coherence Server and assign them to this data tier.\nYou should also create a Coherence application tier and, optionally, a Coherence proxy tier. See Create a Coherence Application Tier or Create a Coherence Proxy Tier.\nCreate a Coherence Application Tier A Coherence application tier is a WebLogic Server cluster that is associated with a Coherence cluster and hosts any number of storage-disabled managed Coherence servers.\nFor more information on Coherence application tiers, see Configuring and Managing a Coherence Application Tier in Administering Clusters for Oracle WebLogic Server.\nIf you haven\u0026rsquo;t already done so, create a Coherence cluster as described in Create a Coherence Cluster.\nCreate a WebLogic Server cluster as described in Create a Cluster.\nOn the WebLogic Server cluster that you just created, go to the Advanced tab, then the Coherence subtab.\nFrom the Coherence Cluster System Resource drop-down list, select the Coherence cluster.\nTurn off the Local Storage Enabled option. Servers in the application tier should never be used to store cache data.\nClick Save.\nCreate one or more managed Coherence servers as described in Create a Managed Coherence Server and assign them to this application tier.\nYou should also create a Coherence data tier and, optionally, a Coherence proxy tier. See Create a Coherence Data Tier or Create a Coherence Proxy Tier.\nCreate a Coherence Proxy Tier A Coherence proxy tier is a WebLogic Server cluster that is associated with a Coherence cluster and hosts any number of managed Coherence proxy servers. Managed Coherence proxy servers allow Coherence*Extend clients to use Coherence caches without being cluster members.\nThe number of managed Coherence proxy servers that are required in a proxy tier depends on the number of expected clients. At least two proxy servers must be created to allow for load balancing. However, additional servers may be required when supporting a large number of client connections and requests.\nFor details on Coherence*Extend and creating extend clients, see Introduction to Coherence*Extend in Developing Remote Clients for Oracle Coherence.\nIf you haven\u0026rsquo;t already done so, create a Coherence cluster as described in Create a Coherence Cluster.\nCreate a WebLogic Server cluster as described in Create a Cluster.\nOn the WebLogic Server cluster that you just created, go to the Advanced tab, then the Coherence subtab.\nFrom the Coherence Cluster System Resource drop-down list, select the Coherence cluster.\nTurn off the Local Storage Enabled option. Servers in the proxy tier should never be used to store cache data.\nClick Save.\nCreate one or more managed Coherence servers as described in Create a Managed Coherence Server and assign them to this proxy tier.\nYou should also create a Coherence data tier and a Coherence application tier. See Create a Coherence Data Tier and Create a Coherence Application Tier.\nCreate a Managed Coherence Server A Managed Coherence server is a Managed Server that is configured to be Coherence cluster member and provide in-memory distributed caching for applications.\nCreate a WebLogic Server Managed Server, as described in Create a Managed Server.\nOn the Managed Server that you just created, from the Cluster drop-down list, select a cluster that is acting as a Coherence deployment tier.\nFor information on Coherence deployment tiers, see Coherence Deployment Tiers.\nClick Save.\nConfigure and Deploy Coherence on a Single-Server Cluster During development, a single-server cluster offers a quick way to start and stop a cluster. A single-server cluster is a cluster that is constrained to run on a single managed server instance and does not access the network. The server instance acts as a storage-enabled cluster member, a client, and (optionally) a proxy.\nFor more information on using a single-server Coherence cluster, see Using a Single-Server Cluster in Administering Clusters for Oracle WebLogic Server.\nTo set up Coherence for production use, follow the steps outlined in Configure Coherence: Main Steps instead.\nIf you haven\u0026rsquo;t already done so, create a Coherence cluster as described in Create a Coherence Cluster.\nIf you are using multicast communication, set Time To Live to 0. For more information about communication for Coherence clusters, see Configure Cluster Communication in Administering Clusters for Oracle WebLogic Server.\nCreate a WebLogic Server Managed Server, as described in Create a Managed Server.\nDo not create a managed Coherence server.\nOn the Managed Server that you just created, go to the Advanced tab and then its Coherence subtab.\nFrom the Coherence Cluster System Resource drop-down list, select the Coherence cluster.\nThis standalone Managed Server will now inherit settings directly from the Coherence cluster.\nTurn on the Local Storage Enabled option to ensure the Managed Server will be a storage-enabled Coherence member (cache server).\nSet the Unicast Listen Address to an address that is routed to loop back. On most computers, setting the address to 127.0.0.1 works.\nFor more information about unicast settings for Coherence cluster members, see Configure Coherence Cluster Member Unicast Settings in Administering Clusters for Oracle WebLogic Server.\nClick Save.\nCreate and package a Coherence Grid Archive (GAR) module for any application modules (Web application, EJB, etc.) that use Coherence. See Creating Coherence Applications for WebLogic Server in Developing Oracle Coherence Applications for Oracle WebLogic Server.\nDeploy your Coherence GAR module to your WebLogic Server domain. Standalone GARs are deployed in the same way as other Jakarta EE modules. See Deploying Coherence Applications in WebLogic Server in Developing Oracle Coherence Applications for Oracle WebLogic Server.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/administration-server/scheduling-work/",
	"title": "Scheduling Work",
	"tags": [],
	"description": "",
	"content": "You can use Work Managers to prioritize work based on rules that you define and by monitoring actual run time performance statistics to then optimize the performance of your applications.\nWork Managers can be applied globally to a WebLogic Server domain.\nA Work Manager defines a set of request classes and thread constraints that manage work performed by WebLogic Server.\nA request class defines a fair share thread entitlement, a response time goal, or a context policy for a particular class of application request.\nThread constraints define the maximum number of threads to allocate for requests, the minimum number of threads to use for resolving deadlocks, and the total number of requests that can be queued or running before WebLogic Server begins rejecting requests.\nSee Using Work Managers to Optimize Scheduled Work in Administering Server Environments for Oracle WebLogic Server.\nCreate a Global Work Manager You can create global Work Managers that are used to prioritize thread execution.\nIn the Edit Tree, go to Scheduling, then Work Managers.\nClick New.\nEnter a name for the new Work Manager and click Create.\nUpdate the default values as appropriate.\nOn the Targets tab, select the servers or clusters on which you plan to deploy applications that reference the Work Manager and move them under Chosen. Move unwanted servers or clusters under Available.\nClick Save.\nNext, you must create at least one request class or constraint. The global Work Manager uses request classes and constraints to determine how to prioritize work. See Create Request Classes and Create Constraints.\nCreate Request Classes Request classes express a scheduling guideline that WebLogic Server uses to allocate threads to requests.\nIn the Edit Tree, go to Scheduling, then choose one of the request class types:\nContext Request Classes Fair Share Request Classes Response Time Request Classes For information on the different request class types, see Request Classes in Administering Server Environments for Oracle WebLogic Server. Click New.\nEnter a name for the new request class and, for Response Time request classes, update the Response Time Goal value.\nClick Create.\nOn the Targets tab, select the servers or clusters on which you plan to deploy applications that reference this request class and move them under Chosen.\nThe servers or clusters that you select must share at least one target with the applicable Work Manager.\nClick Save.\nNext, you must assign this request class to a Work Manager to use it. See Assign a Request Class or Constraints to a Work Manager.\nCreate Constraints A constraint defines the minimum and maximum numbers of threads allocated to execute requests and the total number of requests that can be queued or executing before WebLogic Server begins rejecting requests.\nIn the Edit Tree, go to Scheduling, then choose one of the constraint types:\nCapacities Max Threads Constraints Min Threads Constraints For information on the different request class types, see Constraints in Administering Server Environments for Oracle WebLogic Server. Click New.\nEnter a name for the new constraint and click Create.\nUpdate the default values for the constraint as necessary. Click Save when you are done with your changes.\nOn the Targets tab, select the servers or clusters on which you plan to deploy applications that reference this constraint and move them under Chosen.\nThe servers or clusters that you select must share at least one target with the applicable Work Manager.\nClick Save.\nRepeat to add another type of constraint, if necessary.\nEach Work Manager can contain only one constraint of each type.\nNext, you must assign this constraint to a Work Manager to use it. See Assign a Request Class or Constraints to a Work Manager.\nAssign a Request Class or Constraints to a Work Manager Before you can use the settings defined in a request class or constraint, you must assign it to a Work Manager.\nRequest Classes: Each Work Manager can contain only one request class, but you can share request classes among multiple Work Managers.\nConstraints: Each Work Manager can contain only one constraint of each type, but you can share constraints among multiple Work Managers.\nIf you haven\u0026rsquo;t done so already, create a global Work Manager. See Create a Global Work Manager.\nIn the Edit Tree, go to Scheduling, then Work Managers and select the Work Manager where you want to assign the request class or constraints.\nUse the applicable drop-down lists to choose a request class or constraints to assign to this Work Manager.\nClick Save.\nCreate a Work Manager Shutdown Trigger You can define how a Work Manager should handle stuck threads.\nFor more information, see Stuck Thread Handling in Administering Server Environments for Oracle WebLogic Server.\nIf you haven\u0026rsquo;t done so already, create a global Work Manager. See Create a Global Work Manager.\nIn the Edit Tree, go to Scheduling, then Work Managers, then myWorkManager, then Work Manager Shutdown Trigger.\nClick Create.\nUpdate the default values as needed.\nClick Save.\nConcurrent Managed Object Templates WebLogic Server provides concurrency capabilities to Jakarta EE applications by using Concurrent Managed Object (CMO) templates to make threads container-managed. You can configure CMO templates and then make them available for use by application components, such as servlets and EJBs.\nYou can define three types of CMO templates:\nManaged Executor Service Template - Used by applications to execute submitted tasks asynchronously. See Create a Global Managed Executor Service Template. Managed Scheduled Executor Service Template - Used by applications to execute submitted tasks asynchronously at specific times. See Create a Global Managed Scheduled Executor Service Template. Managed Thread Factory Template - Used by applications to create managed threads. See Create a Global Managed Thread Factory Template. For more information, see Configuring Concurrent Managed Objects in Administering Server Environments for Oracle WebLogic Server.\nCreate a Global Managed Executor Service Template You can create managed executor service (MES) templates that are used by applications to execute submitted tasks asynchronously.\nIn the Edit Tree, go to Scheduling, then Managed Executor Service Templates.\nClick New.\nEnter a name for the new MES template.\nClick Create.\nIf you want to use a non-default Work Manager with this MES template, in the Dispatch Policy field, enter the name of the custom Work Manager.\nIf you want to specify the priority of the long running daemon thread, update the value in the Long Running Threads Priority field.\nIf you want to define the maximum number of concurrent long-running tasks submitted to this MES template in the domain, update the value in the Max Concurrent Long Running Requests field.\nClick Save.\nOn the Targets tab, select the servers or clusters where this MES template will be accessible and move them under Chosen. Move unwanted servers or clusters under Available.\nOnly applications that have been deployed to the selected servers and clusters can use this MES template.\nClick Save.\nCreate a Global Managed Scheduled Executor Service Template You can create managed scheduled executor service (MSES) templates that are used by applications to execute submitted tasks asynchronously at specific times.\nIn the Edit Tree, go to Scheduling, then Managed Scheduled Executor Service Templates.\nClick New.\nEnter a name for the new MSES template.\nClick Create.\nIf you want to use a non-default Work Manager with this MSES template, in the Dispatch Policy field, enter the name of the custom Work Manager.\nIf you want to specify the priority of the long running daemon thread, update the value in the Long Running Threads Priority field.\nIf you want to define the maximum number of concurrent long-running tasks submitted to this MSES template in the domain, update the value in the Max Concurrent Long Running Requests field.\nClick Save.\nOn the Targets tab, select the servers or clusters where this MSES template will be accessible and move them under Chosen. Move unwanted servers or clusters under Available.\nOnly applications that have been deployed to the selected servers and clusters can use this MSES template.\nClick Save.\nCreate a Global Managed Thread Factory Template You can create managed thread factory (MTF) templates that are used by applications to create managed threads.\nIn the Edit Tree, go to Scheduling, then Managed Thread Factory Templates.\nClick New.\nEnter a name for the new MTF template.\nClick Create.\nIf you want to specify the priority assigned to the thread, update the value in the Priority field. The greater the number, the higher the priority.\nIf you want to define the maximum number of threads that are created by the MTF and are still executing the run() method of the tasks, update the value in the Max Concurrent New Threads field.\nClick Save.\nOn the Targets tab, select the servers or clusters where this MTF template will be accessible and move them under Chosen. Move unwanted servers or clusters under Available.\nOnly applications that have been deployed to the selected servers and clusters can use this MTF template.\nClick Save.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/weblogic-deploy-tooling/",
	"title": "WebLogic Deploy Tooling",
	"tags": [],
	"description": "",
	"content": "WebLogic Deploy Tooling (WDT) lets you easily create and manage WebLogic Server environments. In WDT, a WebLogic domain and its properties are expressed as a YAML set, which creates a metadata model that describes the domain it will create or the changes it will implement.\nThese WDT metadata models establish a process that is easy to manipulate, verify, and repeat. For more information on WDT, see WebLogic Deploy Tooling.\nWebLogic Remote Console lets you create WDT model files within its console. Although you cannot deploy or build a live domain from within WebLogic Remote Console, the inclusion of WDT within WebLogic Remote Console provides a familiar and graphical interface for the various WebLogic properties, which you can use to map to their equivalent YAML keys.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/weblogic-deploy-tooling/wdt-model-files/",
	"title": "WDT Model Files",
	"tags": [],
	"description": "",
	"content": "WDT metadata model files are descriptions of a WebLogic Server domain configuration. These models are not connected to a running WebLogic Server domain; you make edits to a model file and then use WebLogic Deploy Tooling (WDT) to build or modify live domains.\nWDT model files are simplistic representations of a domain. They are generally written in YAML but WebLogic Remote Console also accepts models in JSON format. For brevity, a WDT model file only describes departures from the default configuration.\nWebLogic Remote Console does not validate the data that you insert into WDT model files. It will accept changes or values that are invalid and that will present problems when the model file is used to build or update a domain.\nWDT Model topology: Server: AdminServer: ManagedServer1: Cluster: Cluster2 ManagedServer2: Cluster: Cluster2 ManagedServer3: ServerTemplate: ServerTemplate1: Cluster: Cluster1: DynamicServers: ServerTemplate: ServerTemplate1 DynamicClusterSize: 3 Cluster2: resources: JDBCSystemResource: DataSource1: JdbcResource: JDBCDriverParams: DriverName: oracle.jdbc.replay.OracleXADataSourceImpl URL: \u0026#39;jdbc:oracle:thin:@//dbhost:1521/Database1\u0026#39; JDBCDataSourceParams: JNDIName: [ jdbc/myDS ] GlobalTransactionsProtocol: TwoPhaseCommit DatasourceType: GENERIC Target: [ Cluster2 ] appDeployments: Application: Application1: Target: [ Cluster1 ] SourcePath: /apps/benefits/benefits.war StagingMode: default WDT Model Tokens Use a WDT model token to increase the flexibility of a WDT model file by replacing a fixed value with a dynamic one.\nWith WDT model tokens, you can create WDT model files that adapt based on the applicable WDT tokens. Rather than creating multiple WDT model files whose only difference is a few fixed values, you can create a single file and update the tokens as needed.\nWebLogic Remote Console supports multiple types of WDT model tokens. All tokens follow this format: @@TYPE:KEY@@ where TYPE is the model token type and KEY is the variable value. For more information on the different types of WDT model tokens and their syntax, see Model Tokens in WebLogic Deploy Tooling.\nWebLogic Remote Console allows you to insert WDT model tokens in two ways:\nStandalone WDT model tokens WDT variables Standalone WDT Model Tokens Standalone WDT model token are tokens that replaced when the WDT model file is passed through WebLogic Deploy Tooling or through another external process. WebLogic Remote Console knows nothing about the value of the token and cannot update it.\nWDT Variables WDT variables allow you to manage WDT model tokens and their values from within WebLogic Remote Console. First, you create a property list with a set of tokens and their values, then you assign a property list to a WDT model file. After they are linked, any properties that you create in the property list become available to insert into the associated WDT model file. By centralizing model tokens in a property lists, you can easily update their values and review available tokens.\nFor more information, see Property Lists.\nEach WDT model file can only pull from one property list, but you can use the same property list for multiple WDT model files.\nYou can use both standalone WDT model tokens and WDT variables in the same WDT model file. This can be useful if you want to synchronize certain values and leave other values as slightly more static or to be changed by a later process.\nCreate a WDT Model File To create a WDT model file for use with the WebLogic Deploy Tooling:\nOpen the Providers drawer and beside the project name, click More ︙. Select Create Provider for New WDT Model File.\nEnter a name for the WDT model file provider.\nIn the WDT Model Filename field, enter a name for the WDT model file. Include .yaml or .json at the end of the file name.\nClick Pick Directory and browse to the directory where you want to save the new WDT model file.\nEnable Use Sparse Template to create a WDT model file which does not contain any references to an Administration Server.\nIf you want to use WDT variables with this WDT model file, then from the WDT Variables dropdown list, choose a property list provider. If you don\u0026rsquo;t have a property list provider yet, you can add one later.\nClick OK to create the WDT model file.\nUpload a WDT Model File If you created a WDT model file elsewhere, you can upload it to WebLogic Remote Console and continue to edit it.\nOpen the Providers drawer and beside the project name, click More ︙. Select Add WDT Model File Provider.\nEnter a name for the WDT model file provider.\nClick Upload File and browse to the directory where you saved the WDT model file.\nThe WDT model file must be in YAML or JSON format.\nIf you want to use WDT variables with this WDT model file, then from the WDT Variables drop-down list, choose a property list provider. If you don\u0026rsquo;t have a property list provider yet, you can edit this provider\u0026rsquo;s settings later to add one.\nClick OK to upload the WDT model file.\nEdit a WDT Model File To make changes to a WDT model file:\nFor guidance on where to find specific domain configuration options and how to apply them, review the tasks under Administration Server. The WDT Model Tree perspective is very similar to the Edit Tree perspective in an Administration Server provider.\nOpen the WDT model file that you want to edit.\nClick WDT Model Tree and go to the node where you want to make your changes.\nBeside the domain configuration that you want to modify, click WDT Settings to open the WDT settings dialog box.\nSet a new value for the field, using one of the following options:\nDescribes the various ways to set values for a field. Option Description Default (unset) Restore field to its default value. Select Value Select a reference to a component that exists in the current WDT model file. Enter Value Enter a fixed value. Enter Model Token Enter a WDT model token. Enter Unresolved Reference Enter a reference to a component that does not exist in the current WDT model file but will exist at a later point. Select Model Token Variable Select a WDT model token variable from the list of available options. The WDT model file must be connected with a property list to see this option. Create Model Token Variable Enter a Variable Name and Variable Value to create a new WDT model token variable. New model token variables are added to the connected property list. The WDT model file must be connected with a property list to see this option. Click Save Now to update the YAML file with your changes. If you want to restore fields to their default value, right-click on a field and click Restore to default.\nBuild a WebLogic Server Domain When you\u0026rsquo;re satisfied with the properties of your WDT model file, you can transform it into a live WebLogic Server domain with WebLogic Deploy Tooling (WDT).\nSave the WDT model file in WebLogic Remote Console. Make a note of the location of the YAML file on your computer.\nDownload the latest version of WDT from its GitHub repository, https://github.com/oracle/weblogic-deploy-tooling.\nFollow the instructions in the WDT Documentation for creating a domain from a WDT model file.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/weblogic-deploy-tooling/wdt-composites/",
	"title": "WDT Composite Models",
	"tags": [],
	"description": "",
	"content": "WDT composite models are multiple WDT model files that have been merged together. WDT composite models are read-only files that are useful for comparison.\nIf there are conflicting properties between WDT model files, then the last WDT model file added overrides the properties of the previous file.\nCreate a WDT Composite Model Combine two or more WDT model files.\nThere must be at least two WDT model file providers in the active project.\nOpen the Providers drawer and beside the project name, click More ︙. Select Add WDT Composite Model File Provider.\nEnter a name for the WDT Composite Model.\nClick inside the WDT Models field and select the WDT model files that you want to appear in the WDT Composite Model in the order that you want them to appear. Only WDT model files in the current project will appear in the drop-down list.\nChoose the order that the WDT model files are added to the composite carefully. Each subsequent WDT model file overrides the properties of the previous file. If there are any conflicting properties, the properties of the last WDT model file added to the composite takes precedence.\nClick OK to create the WDT composite model.\nThe selected WDT model files are merged and you can view the combined set in the WDT Composite Model Tree.\nYou can add or remove WDT model files from a WDT composite model as needed. Removing a WDT model file from a WDT composite model (or deleting the WDT composite model entirely) does not affect the constituent WDT model files.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/weblogic-deploy-tooling/property-lists/",
	"title": "Property Lists",
	"tags": [],
	"description": "",
	"content": "Property lists are simple key-value pairs that facilitate the WDT variable feature in WDT model files. Use property lists to create a collection of key-value pairs that WebLogic Remote Console can insert into a WDT model file.\nFor more information on how property lists can enhance WDT model files, see WDT Model Tokens.\nYou may want to create a single property list that applies to multiple WDT model files or multiple, discrete files for each WDT model file, depending on your usage.\nBe careful when editing property list key names. If you change a key name, WebLogic Remote Console registers that change as a new key-value pair. If that key was actively used by a WDT model file, it becomes a standalone WDT model token instead of a WDT variable. Conversely, if you add a key name that matches an existing standalone WDT model token, WebLogic Remote Console converts that the previously standalone token into a WDT variable.\nYou can also independently create a property list and then upload it to WebLogic Remote Console. Save the property list as .properties, .props, or another text file format. Place each key-value pair on a new line and separate names from their values by =, :, or a space. For example, key=value or key:value or key value.\nIf you delete a property list that\u0026rsquo;s connected to a WDT model file, the WDT model file will remain unchanged but all WDT variables are converted to standalone WDT model tokens.\nCreate a Property List Create a property list to collect key-value pairs for use with WDT model files.\nOpen the Providers drawer and beside the project name, click More ︙. Select Create Provider for New Property List.\nEnter a name for the property list provider.\nIn the Property List Filename field, enter a name for the property list file. Include .properties or.props at the end of the file name.\nClick Pick Directory and browse to the directory where you want to save the new property list file.\nClick OK to create the file.\nYou can now use the property list to hold WDT variables for WDT model files. You cannot rename keys. If you change the name of a key, WebLogic Remote Console registers that action as deleting the previous key and then creating a new key. If the old key was actively being used as a WDT variable in a WDT model file, it will become a standalone WDT model token, unassociated with the property list.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/troubleshoot-weblogic-remote-console/",
	"title": "Troubleshoot Issues with WebLogic Remote Console",
	"tags": [],
	"description": "",
	"content": "Learn how to identify and recover from issues in WebLogic Server or WebLogic Remote Console.\nPerform these preliminary troubleshooting steps to get started:\nRestart all servers in the domain. Confirm that the Administration Server can reach your Managed Servers and clusters. See Investigate Server Connection Issues. Check the log files for any errors. See Review Log Files. Review any known issues. See Known Issues. Update to the latest versions of Desktop WebLogic Remote Console and the WebLogic Remote Console extension. See Upgrade Desktop WebLogic Remote Console. Investigate Server Connection Issues If the Administration Server cannot reach a Managed Server or cluster, you may be able to determine the cause using WebLogic Remote Console.\nIn the Monitoring Tree, go to Environment, then Servers. Use the State column to determine the current life cycle state of a server instance or cluster.\nIf the Administration Server cannot reach the server to determine its state, the server will be marked as Unreachable.\nClick on a server or cluster whose state is Unreachable.\nClick the Troubleshoot tab. WebLogic Remote Console will automatically attempt to send test administration traffic to the server or cluster.\nDepending on the result of the test, WebLogic Remote Console provides different information:\nIf the Administration Server cannot find the HTTP/S address for sending administration traffic to the server (typically because the server is not running), then the Server URL field will return unknown. If the Administration Server receives a response from the server, then WebLogic Remote Console will populate the Status, Response Headers, and Response Body fields. If the Administration Server receives a Java exception, then WebLogic Remote Console will populate the Exception and Stack Trace fields. Use the information gathered from this troubleshooting test to help determine the cause of the connection issues between the Administration Server and server instances or clusters.\nReview Log Files If you experience any issues with WebLogic Remote Console, then you can check its log files to determine the cause of the issues.\nOpen Help, then Toggle Developer Tools and select the Console tab.\nRead the log messages to see they provide enough information to determine the cause of your issue.\nWebLogic Remote Console also generates a log file, out.log, for each session. Open the log file and review its contents.\nThe location of out.log varies depending on your platform:\nLinux: $HOME/.config/weblogic-remote-console/out.log macOS: /Users/user/Library/Application Support/weblogic-remote-console/out.log Windows: C:\\Users\\user\\AppDataRoaming\\weblogic-remote-console\\out.log Log file entries from previous sessions are saved to a new file in the same directory, marked by date: out-yyyy-mm-dd.log. If you want to generate log files for WebLogic Server, see Log Messages instead.\nKnown Issues This page describes the known issues associated with WebLogic Remote Console.\nLimitations You cannot:\nRecord WLST scripts while you configure WebLogic Server using WebLogic Remote Console. Reorder security providers in WDT model file providers. However, you can download the WDT model file and edit the YAML file manually to rearrange the order of the security providers. Limited MBean Property Support WebLogic Remote Console includes most of the MBean properties that the WebLogic Server Administration Console supported. However, due to limitations in the WebLogic REST API, some MBeans are omitted, including some that are deprecated. If you require an MBean property that is not currently available in WebLogic Remote Console, then file an enhancement request in the WebLogic Remote Console GitHub repository.\nMy Credentials Don\u0026rsquo;t Work If you are sure your login credentials are correct but you\u0026rsquo;re receiving an Unexpected Error Response error, it might be because your credentials contain unsupported characters.\nBy default, WebLogic Remote Console uses HTTP Basic Authentication which supports a limited character set. Characters outside that set, for example, Japanese characters, cannot be used in either usernames or passwords.\nWorkaround: If you wish to continue using credentials with these characters, then when you connect to an Administration Server from WebLogic Remote Console, you must enable Use Web Authentication in the provider connection dialog box. The WebLogic Remote Console will send you to the external authentication portal. See Configure Web Authentication.\nHosted WebLogic Remote Console is \u0026ldquo;unable to connect to the WebLogic domain\u0026rsquo;s administration server\u0026rdquo; In Hosted WebLogic Remote Console, an orange banner appears along the top of the console that indicates it cannot reach the Administration Server.\nSolution: Try logging into Hosted WebLogic Remote Console again. In the browser\u0026rsquo;s address bar, enter http://hostname:port/rconsole/signin (or https://hostname:port/rconsole/signin) and re-enter your credentials.\nDeleted Items Do Not Re-Appear When Change is Reverted If you delete an item but then discard the change instead of committing it, WebLogic Remote Console will not show the restored item immediately.\nWorkaround: Navigate away and then back to the affected page and the previously deleted item will become visible. If the deletion affected the navigation tree, such as deleting a node, you can collapse and then re-expand the navigation tree and the node will re-appear.\nUsing the Hosted WebLogic Remote Console Across Multiple Browser Tabs May Cause Strange Behavior If you open Hosted WebLogic Remote Console in multiple browser tabs and edit the domain, the different instances will interfere with each other and may result in configuration errors.\nSolution: Only use Hosted WebLogic Remote Console in one browser tab at a time.\nWeb authentication does not support path based routing If you use an HTTP proxy server (such as Oracle HTTP Server or Apache HTTP Server) and use path based routing to manage access to your WebLogic Server instances, then, when using web authentication, WebLogic Remote Console cannot properly resolve the paths to direct users to the appropriate URLs.\nCannot connect to the Administration Server WebLogic Remote Console cannot connect to a WebLogic Server Administration Server.\nIf you experience issues connecting to an Administration Server when using WebLogic Remote Console, then you may need to update the connection settings between the application and the domain. Use the following methods to identify which setting may be causing the issue.\nTest access to the Administration Server using curl. Make sure to use a WebLogic user that is assigned one of the following roles: Admin, Deployer, Operator or Monitor.\nFor HTTP connections, run:\ncurl -v --user *username*:*password* http://*adminServerHost*:*adminServerPort*/management/weblogic/latest/domainConfig For HTTPS connections, run:\ncurl -v -k --user *username*:*password* https://*adminServerHost*:*adminServerPort*/management/weblogic/latest/domainConfig If you can connect successfully over HTTPS, then the problem is likely that WebLogic Remote Console does not trust the SSL certificate of the Administration Server. You can either import the Administration Server’s certificate into your client’s keystore, or, if you’re using demo certificates, enable the Make Insecure Connection option when you connect to the Administration Server.\nMake sure your Administration Server\u0026rsquo;s management endpoint, management/*, is accessible to clients. It may be blocked if your domain is behind a load-balancer or firewall, or is in a Docker container. You will need to expose the endpoint manually.\nYou should also make sure that the value of the Remote Console Helper Context Path attribute (RemoteConsoleHelperMBean.ContextPath) has not been changed. The default value is console, which WebLogic Remote Console appends to the domain URL. If you modify the context path, it may prevent WebLogic Remote Console from successfully connecting to the Administration Server. Do not change it unless you understand the possible impacts to Desktop WebLogic Remote Console. See Configure Web Authentication.\nIf the Administration Server resides in a different network than WebLogic Remote Console, then make sure the proxy settings of WebLogic Remote Console are properly configured to allow communication between the two. See Connect using a Proxy Server.\nYou may need to add a location match stanza for the management/* endpoint to the domain configuration file, config.xml.\nFeatures are Missing from WebLogic Remote Console Certain features or screens in WebLogic Remote Console are hidden if your current user is not assigned the appropriate permissions.\nFor security purposes, WebLogic Remote Console restricts what a user can see or do depending on their role. Only administrators have access to the full functionality of WebLogic Remote Console.\nTry logging in as a user with more elevated permissions.\nFor more information, see Access Limitations.\nIf you believe a feature is missing and it is not a case of inadequate permissions, you can open an enhancement request in the WebLogic Remote Console GitHub repository.\nREST Communication Issues WebLogic Remote Console reports that it is experiencing REST communication issues between servers.\nWhen REST communication is blocked, it may prevent further configuration to the domain or cause the Monitoring Tree perspective to report inaccurate statuses for Managed Servers.\nCertain configuration changes can block REST communication between servers, including, but not limited to the following examples:\nDisabling the default Identity Asserter provider. Disabling the default Credential Mapping provider. Removing weblogic-jwt-token from the default Identity Asserter provider’s Active Types. Applying incompatible REST invocation policies to the WebLogic Server REST API. For example, using Oracle Web Services Manager (OWSM) to protect the domain may inadvertently restrict access to the REST API. Changing the listen port (including enabling the Administration port) without immediately restarting the servers. You must update your configuration changes so they no longer block REST communication.\nInvalid WebLogic Server Configurations WebLogic Remote Console reports an invalid configuration in your domain.\nTo make sure that changes to your domain are valid, WebLogic Remote Console performs validation checks whenever you save or try to commit a change. If WebLogic Remote Console reports an invalid configuration error, then you must identify and correct the change before you can commit your changes.\nReview any recent changes for issues. You can check the Shopping Cart to see your pending changes if you have the WebLogic Remote Console extension installed. Check the log output from WebLogic Remote Console and the Administration Server. If you still cannot determine the cause of the error, then you may need to discard all of your changes and then reapply them one at a time to isolate the change responsible for the error.\nWebLogic Remote Console does not validate WDT model files. It will accept changes or values that are invalid and which may prevent the WDT model file from building or updating a domain. For example, if you add integer values that are invalid or out of range for a specific setting, or remove a server or target but do not update the deployments to select a different server or target, WebLogic Remote Console will not flag these errors.\nFor information on acceptable values, refer to the WDT Documentation.\nProblem reading auto-prefs.json WebLogic Remote Console shuts down unexpectedly with a Failure reading auto prefs error.\nThe auto-prefs.json file saves state information about WebLogic Remote Console including details on projects and providers. Users should not touch this file unless it becomes corrupted.\nIf auto-prefs.json does become corrupted, you can reset it, but all of your data regarding your projects will be lost. The data for your domain will be unaffected.\nClose WebLogic Remote Console. Delete auto-prefs.json. The location of auto-prefs.json varies depending on your platform: Linux: $HOME/.config/weblogic-remote-console/auto-prefs.json macOS: /Users/user/Library/Application Support/weblogic-remote-console/auto-prefs.json Windows: C:Users\\user\\AppDataRoaming\\weblogic-remote-console\\auto-prefs.json Restart WebLogic Remote Console. "
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-remote-console/2.4.14/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]