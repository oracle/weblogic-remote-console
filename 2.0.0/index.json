[
{
	"uri": "/develop/build-source/",
	"title": "Build from source",
	"tags": [],
	"description": "Instructions if you want to build WebLogic Remote Console from source",
	"content": "Prerequisites Before you can build the WebLogic Remote Console, you need to install the following software in your local build environment:\n Java SE 11 Maven 3.6.1+ nodejs 14.16+ This download includes npm. Oracle JET 10.1.0 client libraries To install the required Oracle JET software, run npm install -g @oracle/ojet-cli@~10.1.0. On Linux and macOS, you will need to use sudo.  You can verify you\u0026rsquo;ve installed the correct versions of the listed software by running the following commands:\n java -version mvn --version node -v ojet --version Build from source  Clone the repository at https://github.com/oracle/weblogic-remote-console. In a command window, navigate to the home directory of the cloned repository. Run mvn clean install.  When the build is successful, a console.zip file is created in the console-backend/installer/target directory. You can now install and run the Remote Console as described in Install the WebLogic Remote Console.\n"
},
{
	"uri": "/setup/console/",
	"title": "Explore the WebLogic Remote Console",
	"tags": [],
	"description": "An overview of the WebLogic Remote Console and its differences with the Oracle WebLogic Administration Console.",
	"content": "The WebLogic Remote Console provides a redesigned interface for WebLogic Server domain configuration. The new user interface applies the standards of the Oracle Redwood design system included with Oracle JET.\nThe WebLogic Remote Console user interface consists of the following sections:\n Kiosk NavStrip Navigation Tree Content Pane  Kiosk The Kiosk (located in the bottom right corner of the WebLogic Remote Console) is where you perform the administrative aspects of the WebLogic Remote Console. It\u0026rsquo;s split into two sections: Project Management and Shopping Cart.\nIn the Project Management tab, you can see and edit the details of your current project, its providers, their connection details and so on. This is also where you can import and export project files.\nYou can see the connection status of a provider in the upper right corner of the console.\n Green: Connected to an Administration Server (not applicable to WDT model files) Yellow: Offline. WDT model files are always offline. (not applicable to Administration Servers). Red: Not connected to an Administration Server (not applicable to WDT model files)  In the Shopping Cart tab, you can see the Change Manager, as well as any changes you\u0026rsquo;ve made to the domain configuration. You can commit (or discard) changes directly from the Shopping Cart. The Shopping Cart doesn\u0026rsquo;t appear when you edit WDT model files because changes to model files are applied immediately, no commitment necessary.\nThe Shopping Cart is only visible in the Kiosk if you a. have the console extension, console-rest-ext-1.0.war, installed and b. there are pending changes.\n NavStrip The NavStrip is a small strip on the left edge of the WebLogic Remote Console window that contains icons for toggling the visibility of the navigation tree , and for choosing which perspective to work within. Clicking a NavStrip icon for a perspective is equivalent to clicking a card on the Home Page.\nNavigation tree The Domain Structure panel in the WebLogic Server Administration Console is represented in the WebLogic Remote Console as a dynamic navigation tree pane. Different navigation trees are loaded based on the perspective that you are using. For example, if you are using the Configuration perspective, the navigation tree lists the root-level nodes in the domain structure.\nAn ellipse (\u0026hellip;) in the Navigation Tree in a list indicates that there are more than 10 entities of a particular type defined in the domain. When you click the ellipse, the table view for the first 10 entities displays in the main content area. You can then access all the entities in the table view using the arrows at the bottom of the table. For example, if you have 20 server instances defined in a domain, only the first 10 are listed in the navigation tree. Clicking the ellipse displays the Server table in the main content area, where you can view the first 10 servers and navigate to the remaining servers.\nContent pane You\u0026rsquo;ll make your domain configuration changes in the content pane. As you move through the NavStrip and Navigation Tree, the contents in the Content Pane will update to reflect your location. Your location in the Navigation Tree controls what you see in the content pane.\nWhen you\u0026rsquo;re on the home page for a provider, you\u0026rsquo;ll see cards for the different perspectives. Admin Server Connections show three cards, while WDT model files only show a single card.\nDomain configuration for Admin Server Connection providers is split into three perspectives:\n  Edit Tree: an editable representation of the WebLogic Server domain. Enter this perspective when you want to make and commit changes to the domain.\n  Configuration Tree: a read-only representation of the WebLogic Server domain. Enter this perspective if you want to see the current settings of the domain, without making any changes. If you make changes in the Edit Tree perspective, those changes won\u0026rsquo;t appear in the Configuration Tree perspective until you commit them, or for non-dynamic changes, until you restart the server.\n   Monitoring Tree: shows the runtime MBean information for select resources in the WebLogic Domain.\n  WebLogic Server traditionally has three different versions of configuration per domain. While the Edit and Configuration trees are present in the WebLogic Remote Console, the Server Config tree is not.\nIn contrast to the Admin Server Connection provider, the WDT model file provider has a single perspective:\n WDT Model Tree: an editable representation of the model for the WebLogic Server domain.  Breadcrumb Trail As you traverse the different nodes of the domain, the breadcrumbs along the top of the content pane will update to show your hierarchical location within the domain structure. You can move between related pages under different perspectives by clicking the dropdown button beside the rightmost entry of the breadcrumb trail.\nFor example, if you\u0026rsquo;re on Domain/Servers in the Edit Tree, you can jump to Domain Runtime/Running Servers (Monitoring Tree) or Domain Runtime/Server States (Monitoring Tree) from the breadcrumb trail.\nTool bar icons in the content pane These icons appear along the top of the content pane:\n  Home - Click in the content pane to return to the landing page for the functional area, such as Configuration or Monitoring. Click in the left side of the header area to return to the console home page.\n  Navigation History - Click to view a menu with a list of clickable links to the pages you have visited. This history is perspective-scoped.\n  Help - Click to view reference information about the attributes displayed on the page.\n  Reload - Click to reload the form/table once when no auto reload interval is set. This icon changes to active () when the reload interval is set. Click the icon to toggle the auto reload on and off.\n  Auto Reload Interval - Click to set or clear a specified time interval, in seconds, for automatic reload of the form/table. If you select a different tab, or move to another page, automatic page reload stops.\n  Shopping Cart - When changes are pending, click to view, discard, or commit the changes. The indicates there are no pending changes to the configuration.\n  Use the WebLogic Remote Console help The WebLogic Remote Console provides several types of online help on each page.\n Use the ? icon to the left of each field to access summary and detailed help for the field. If you hover over the ?, a summary help description displays. Click the ? icon to display a more detailed help description, if available. Click the ? icon in the top right of the content pane to toggle the view of the reference information for all of the fields displayed on the page.  "
},
{
	"uri": "/reference/faqs/",
	"title": "Frequently asked questions",
	"tags": [],
	"description": "Frequently asked questions about the WebLogic Remote Console",
	"content": "This section provides answers to frequently asked questions about the WebLogic Remote Console.\nCan I connect the WebLogic Remote Console to domains running in WebLogic on Oracle Cloud Infrastructure? Yes, you can. First, make sure that the domain\u0026rsquo;s administration server is publicly accessible so the WebLogic Remote Console can establish a connection to the administration server. Then, in the WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nCan I connect the WebLogic Remote Console to domains running on other cloud providers such as Amazon Web Services, Google Cloud, Microsoft Azure and so on? Yes, you can connect to other cloud providers. You\u0026rsquo;ll need to make sure the domain\u0026rsquo;s administration server is publicly accessible to allow a connection between the WebLogic Remote Console and the cloud provider. Then, in the WebLogic Remote Console, enter your credentials and the publicly accessible URL for the WebLogic Administration Server.\nVisit your cloud providers' documentation for more specific instructions on how to expose the endpoint of the WebLogic Server.\nCan I connect the WebLogic Remote Console to domains using the WebLogic Kubernetes Operator? Yes. For details on how to set up access to WebLogic Server domains running on Kubernetes, see Use the WebLogic Remote Console in the WebLogic Kubernetes Operator User Guide.\nCan I use both the WebLogic Remote Console and the WebLogic Server Administration Console? Yes. The WebLogic Remote Console uses the same configuration mechanisms used by the WebLogic Server Administration Console. You can make changes to your domain using any of these methods: Administration Console, WebLogic Remote Console, JMX, REST, WLST, and so on - they\u0026rsquo;re all compatible. However, it\u0026rsquo;s not recommended that you use multiple methods simultaneously since that may cause conflicts and unexpected behavior.\nWhich versions of WebLogic Server can I use with WebLogic Remote Console? You can use WebLogic Remote Console with WebLogic Server 12.2.1.3, 12.2.1.4, or 14.1.1.0.\nDo I need to upgrade my installation of WebLogic Remote Console whenever I upgrade or patch WebLogic Server? It\u0026rsquo;s recommended that you keep WebLogic Remote Console up to date as it is updated to work with the latest versions of WebLogic Server, including patches. However, it\u0026rsquo;s not required. Older versions of the WebLogic Remote Console will continue to work with newer versions WebLogic Server.\nNote that if new fields or new beans were added as part of the WebLogic Server update, outdated versions of the WebLogic Remote Console will not detect those fields.\nAre there any security risks associated with the WebLogic Remote Console? No, the WebLogic Remote Console accesses the WebLogic Administration Server through its standard REST API, which is available out of the box. However, since your desktop will be accessing potentially sensitive data, you need to make sure it is protected and secure - just like the WebLogic Administration Console.\n"
},
{
	"uri": "/setup/",
	"title": "Get started",
	"tags": [],
	"description": "Installing and basic configuration for the WebLogic Remote Console",
	"content": "Install the WebLogic Remote Console You can install and run the WebLogic Remote Console through a desktop application or from within your internet browser.\nWe recommend using the desktop application over the browser application whenever possible. Certain features, such as editing WDT model files, work more effectively in the desktop application.\n Desktop application  Uninstall any previous versions of the WebLogic Remote Console from your computer. Download the WebLogic Remote Console. Go to https://github.com/oracle/weblogic-remote-console/releases and download the installer applicable for your operating system. Run the installer. Optional: Install the WebLogic Remote Console extension in the WebLogic Server domain. The WebLogic Remote Console extension adds additional functionality when using the WebLogic Remote Console.  Create a management-services-ext directory under the domain home. Download the console-rest-ext-1.0.war from https://github.com/oracle/weblogic-remote-console/releases and save it inside the management-services-ext directory you created in the previous step. Reboot the Administration Server if it is already running.   Launch the WebLogic Remote Console application.  Browser-based Your computer must have Java SE 11 or later installed. To check your Java version, enter java -version at the command line.\n Download the WebLogic Remote Console. Go to https://github.com/oracle/weblogic-remote-console/releases and download console.zip. Extract the ZIP archive to a directory of your choice. Once its contents are extracted, it creates a console directory that includes:  The console executable file console.jar The libraries required to use the console in the libs subdirectory The console extension, console-rest-ext-1.0.war, that you install in the WebLogic Server domain   Optional: Install the WebLogic Remote Console extension in the WebLogic Server domain. The WebLogic Remote Console extension adds additional functionality when using the WebLogic Remote Console.  Create a management-services-ext directory under the domain home. Download the console-rest-ext-1.0.war from https://github.com/oracle/weblogic-remote-console/releases and save it in the management-services-ext directory you created in the previous step. Reboot the Administration Server if it is already running.   Open a command window and on the command line, enter java -jar \u0026lt;console_home\u0026gt;/console.jar where \u0026lt;console_home\u0026gt; is the directory where you unzipped the installer. Open a browser window and enter http://localhost:8012 in the address bar.  Connect to a provider The WebLogic Remote Console supports provider connections to WebLogic Server Administration Servers and WebLogic Deploy Tooling (WDT) model files.\n  If connecting to a WebLogic Server Administration Server, start the WebLogic Administration Server.\n  Launch the WebLogic Remote Console in the desktop application or the browser.\n  Choose a startup task to build your first project. Projects are groups of connections to WebLogic Administration Servers, WebLogic Deploy Tooling (WDT) models or both. See Projects for more information.\n Add Admin Server Connection Provider: Connect to the Administration Server of a WebLogic Server domain. Add WDT Model File Provider: Import an existing WDT Model file. Create Provider for New WDT Model File: Create a new WDT model file with only the essential configurations for a fresh start. Import Project: Import project settings from another WebLogic Remote Console instance.  On subsequent launches, the desktop application will open your last active project.\nIf you want to create a new project, select File \u0026gt; New Project.\n  Add additional providers to the project. Click ⋮ beside the project name and select a provider type.\n  Select an Administration Server or WDT model file from the Kiosk.\n  Start reviewing or editing the domain configuration.\n  Next steps  Familiarize yourself with the WebLogic Remote Console. Edit your Administration Servers or WDT model files. Customize your connection settings.  "
},
{
	"uri": "/userguide/projects/",
	"title": "Projects",
	"tags": [],
	"description": "How to connect to a WebLogic Server domain or deploy tooling model.",
	"content": "A project is a group of connections to either WebLogic Administration Servers or WebLogic Deploy Tooling (WDT) models or both.\nCreate a project  Open File \u0026gt; New Project. Enter a name for the project and click OK. The new project will appear in the Kiosk. Expand the Kiosk and beside the project name, click ⋮. Select either Add Admin Server Connection Provider or Add WDT Model File Provider. You can add multiple of either to the project and it doesn\u0026rsquo;t matter which order you add them in. You can also create a WDT model file with minimal configuration by selecting Create Provider for New WDT Model File. To add an Admin Server connection:  Select Add Admin Server Connection Provider. Enter a name for the the connection in the Connection Name field. This is merely a reference name and does not need to match the name of the Administration Server. Enter the username and password credentials for a user account for that domain. If necessary, update the URL to match the actual location of the Administration Server. Click OK to connect the WebLogic Remote Console to the Administration Server.   To add a WDT model file:  Select Add WDT Model File Provider. Enter a name for the model in the Model Name field. This is merely a reference name and does not need to match the name of the WDT model. Click and browse to the WDT model file (a YAML or JSON file). Click OK to upload the file.   To create a WDT model file with minimal configurations:  Select Create Provider for New WDT Model File. Enter a name for the model in the WDT Model Provider Name field. This is merely a reference name and does not need to match the name of the WDT model. Enter a name for the WDT model file in the WDT Model Filename field. Include .yaml or .json at the end of the file name. Click and browse to the directory where you want to save the new WDT model file. Optional: Enable Use Sparse Template to create a WDT model file which does not contain any references to an Administration Server. Click OK to create the file.    The Administration Server connection or WDT model will appear in the Kiosk. Select a connection to make it active in the content pane and you can begin editing it. See Edit Domain Configurations for tips on how making changes in the WebLogic Remote Console differs from the Administration Console.\nIf you plan to edit WDT model files, it\u0026rsquo;s recommended that you use the desktop application over the browser.\n Switch between projects You can create multiple projects in the WebLogic Remote Console, each with different domain connections or WDT model files, or both.\nTo switch to another project, open the File menu and select Switch to project. Choose the project you want to switch to.\nEdit a project You can edit a project and its connections at any time.\nTo add connections to a project, expand the Kiosk and click ⋮.\nTo rename a project, open the File menu and select Rename current-project.\nTo edit the details of a connection, expand the Kiosk and select the icon beside the connection you want to edit.\nExport a project If you\u0026rsquo;re using the WebLogic Remote Console across several computers, exporting a project is a convenient way to share a project across multiple computers.\nIf your project contains a WDT model file, make sure the location of the WDT model file is accessible to all the computers where this project will be imported to.\n  Create a project with all the desired connections. In the Kiosk, click ⋮ and select Export Providers as Project. Enter a name for the exported project. This is the name that will be used when it is imported into another WebLogic Remote Console instance. Enter a name for the file of the exported project. Click OK and choose a file location to save the exported project file.  WebLogic Remote Console creates a JSON file with the project details that you can import into other instances of WebLogic Remote Console\nImport a project You can import the project details of a previously created project to rapidly ramp up productivity in a new installation of WebLogic Remote Console.\n Export a project and save the file to the computer where you want to import it. On the computer where you want to import the file, start WebLogic Remote Console. Open the Kiosk menu and click ⋮. Select Import Project. Click and browse to the exported project file. Click Import.  The imported project will automatically become the current project loaded in the WebLogic Remote Console.\nDelete a project To delete a project, open the File menu and select Delete Project. Choose the project you want to delete.\n"
},
{
	"uri": "/userguide/",
	"title": "User Guide",
	"tags": [],
	"description": "Basic usage of the WebLogic Remote Console",
	"content": "User Guide The User Guide provides detailed information about using the WebLogic Remote Console.\n"
},
{
	"uri": "/develop/contribute/",
	"title": "Contribute to WebLogic Remote Console",
	"tags": [],
	"description": "How to contribute to the WebLogic Remote Console.",
	"content": "We welcome contributions to this repository from anyone.\nIf you want to submit a pull request to fix a bug or enhance an existing feature, please first open an issue and link to that issue when you submit your pull request.\nIf you have any questions about a possible submission, feel free to open an issue too.\nContributing to the WebLogic Remote Console repository Pull requests can be made under The Oracle Contributor Agreement (OCA).\nFor pull requests to be accepted, the bottom of your commit message must have the following line using your name and e-mail address as it appears in the OCA Signatories list.\nSigned-off-by: Your Name \u0026lt;you@example.org\u0026gt; This can be automatically added to pull requests by committing with:\n git commit --signoff Only pull requests from committers that can be verified as having signed the OCA can be accepted.\nPull request process  Fork this repository Create a branch in your fork to implement the changes. We recommend using the issue number as part of your branch name, e.g. 1234-fixes Ensure that any documentation is updated with the changes that are required by your fix. Ensure that any samples are updated if the base image has been changed. Submit the pull request. Do not leave the pull request blank. Explain exactly what your changes are meant to do and provide simple steps on how to validate your changes. Ensure that you reference the issue you created as well. We will assign the pull request to 2-3 people for review before it is merged.  "
},
{
	"uri": "/develop/",
	"title": "Development",
	"tags": [],
	"description": "Entry point for developer information on the WebLogic Remote Console",
	"content": "Development With the open source nature of the WebLogic Remote Console, you are free and encouraged to alter and adapt the source code of the console to suit your needs.\nNote that any changes you implement may affect the functionality of the WebLogic Remote Console in unexpected ways.\n"
},
{
	"uri": "/userguide/edit-domain-config/",
	"title": "Edit domain configurations",
	"tags": [],
	"description": "How to commit changes for your WebLogic Server domain from the WebLogic Remote Console",
	"content": "The domain configuration process in the WebLogic Remote Console is similar to the Administration Console. When you start editing the domain, a configuration lock is placed on the domain that blocks other users from making simultaneous changes. Once you\u0026rsquo;re are satisfied with your changes, you can \u0026lsquo;activate\u0026rsquo; these changes and perpetuate them to the administration and management servers.\nConfiguration locks do not apply to WDT model files. As WDT model files are not connected to live domains, they do not require any locks to prevent conflicting changes. Additionally, you do not have to save and commit changes; once you save your changes, they are saved to the WDT model file.\nWDT model tokens When editing the domain configuration for a WDT model file, you can substitute model tokens instead of real field values. Model tokens are variables that you can enter into domain configuration settings. Rather than restricting a setting to a single value, the value will update according the variable.\nThere are several types of model tokens including variable tokens, file tokens, and so on. Model tokens follow this format: @@TYPE:KEY@@, where TYPE is the model token type and KEY is the variable value. For example, you could declare variable token by entering @@PROP:ABCDE@@ into a field.\nSee WDT Model Tokens for more information.\nShopping cart The Shopping Cart (equivalent to the Change List in the WebLogic Server Administration Console) holds all the pending changes for the current session in the WebLogic Remote Console. In the shopping cart, you can see if any changes are pending, commit those changes or discard them entirely. If you installed the console extension, console-rest-ext-1.0.war, you can also see the specific changes you\u0026rsquo;ve made and the status of the lock in the Change Manager. Unfortunately, there is currently no support for removing individual items from the shopping cart.\nThe configuration change lock does not prevent you from making conflicting configuration edits using the same administrator user account. For example, if you obtain a configuration change lock in the WebLogic Remote Console, and then use the Administration Console or WebLogic Scripting Tool (WLST) with the same user account, you will access the same edit session that you opened in the WebLogic Remote Console and you will not be locked out of making changes with the other tools.\nWe recommend against making changes using multiple tools because when one of the sessions activates their changes, it releases the lock and the other session will not be able to save or activate their changes.\n Some changes can be activated immediately (dynamic) while other changes will only activate following a server restart (non-dynamic). When you need to activate nondynamic changes, navigate to the \u0026lsquo;Running Servers\u0026rsquo; table in the Monitoring perspective to see which servers need to be restarted so that they can start using the new configuration.\nYou can restore fields to their default value. Right-click on a field and click Restore to default.\n Edit Administration Servers  Open a project and select an Admin Server Connection Provider. Click the Edit Tree perspective and make your changes to the domain configuration. Fields marked with require a server restart. If you have the extension installed, view your changes in the Kiosk. Commit your changes. Restart your server if necessary.  Check if any servers require a restart on the Monitoring Tree perspective \u0026gt; Running Servers page.    Edit a WDT model file Domain configuration changes in WDT model files offer more flexibility to take advantage of the benefits of a model file. You can enter specific values in fields or enter model tokens to create variable values that update as needed for their environment. model tokens follow this format: @@TYPE:KEY@@.\nIt\u0026rsquo;s recommended that you use the desktop application version of the WebLogic Remote Console if you plan to edit a WDT model file.\n Open a project and select a WDT Model File Provider. Click WDT Model Tree and make your changes to the domain configuration. Make sure to click if you want to enter a model token. The WebLogic Remote Console auto-saves any changes you make to the WDT model file. You don\u0026rsquo;t need to commit changes to WDT model files. After you finish making changes, you can click Save Now (in the desktop application) or Download File (in the browser) to ensure all changes are saved and downloaded to your computer. The browser application behaves slightly differently. While changes to the WDT model file are still saved automatically as you move around the console, they are not saved to your computer. This means that once you\u0026rsquo;re satisfied with your changes, you must click Download File to download the updated model file to your computer.\nDo not refresh the browser page or you will lose all your changes.\n   Use the WebLogic Remote Console control operations The WebLogic Remote Console provides control operations in the Monitoring perspective.\nThe Server States page contains the control operations to change the state of a server. Server state signifies the specific condition of a server in the life cycle management.\nTo change the server state, click the desired control at the top of the table. Then, in the next window, select the servers on which you want to perform the control operation. Consistent with the WebLogic Server Administration Console, the WebLogic Remote Console includes support for graceful shutdowns.\nThe App Deployments Runtimes page, under Domain Information in the Navigation Tree, provides controls to start and stop applications. To start or stop an application, select the control, then in the next window, select the applications on which you want to perform the operation.\nCreate MBeans The WebLogic Remote Console includes simplified wizards for deploying applications and creating JDBC system resources.\nIn most other cases, when you create a new MBean on a page, you are prompted to fill in a few key properties, such as Name, then click Create. Unlike the WebLogic Server Administration Console, the Remote Console does not guide you through configuring other properties that you typically need to complete the configuration. Instead, it displays the new bean\u0026rsquo;s pages where you can click through the tabs to finish configuring the bean.\nWhen you configure a bean property that references another bean, you must first create the other bean. For example, if you want to assign Server1 to Cluster1, you need to create Cluster1 first, unlike in the WebLogic Server Administration Console where you can choose to create Cluster1 during server creation.\n "
},
{
	"uri": "/reference/known_issues/",
	"title": "Known issues",
	"tags": [],
	"description": "Known issues and limitations for the WebLogic Remote Console",
	"content": "This page lists the known issues and workarounds, if available, as well as the limitations of the console in this release.\nLimitations The following features are not available in this release of the Remote Console:\n Manage the security data from WebLogic Server security providers that is external to the WebLogic configuration, such as users, groups, roles, policies, credential maps, and so on. Record WLST scripts while you configure WebLogic Server using the Remote Console. JNDI tree viewer.  Known issues The following list summarizes the known issues at the time of this release.\nLimited support for users in a non-administrative role The Remote Console fully supports only users in the Administrator role. If you are not logged in as an Administrator, unexpected behavior may occur. For example, the Deployer, Monitor and Operator roles are not sufficient for most configuration pages and will result in empty pages and error messages.\nMinimum web browser viewport size Issue The font sizes in the WebLogic Remote Console are governed by the Oracle JET Redwood style. They are larger than the ones used in the WebLogic Server Administration Console, and the entry fields are a bit larger in height and width. As a result, the overall viewing area inside your web browser\u0026rsquo;s viewport (the portion where all the web content appears), needs to be of a minimum size to have an enjoyable experience using the Remote Console.\nWe have determined that the recommended minimum web browser viewport size is 1592 x 900 pixels. If you resize your web browser to be smaller than 1592 x 900 pixels, then scroll bars appear when the mouse hovers over certain areas. However, some form data may still not be visible until the web browser\u0026rsquo;s viewport height is at least 900 pixels.\nWorkaround Ensure that the browser viewport is set to the recommended minimum. If those values are not available, you can also adjust the Zoom setting to 80%.\nLimited MBean property support The Remote Console includes the vast majority of the MBean properties that the WebLogic Server Administration Console supports. However, because of limitations in the WebLogic REST API, some are missing, including some that are deprecated. If you notice that there is an MBean property that you require that is not available in the Remote Console, please let us know.\nUnable to reorder collections such as security providers Issue There are separate lists for each type of security provider (such as authentication providers, role mapping providers, authorization providers, and so on). When you have more than one security provider in a list, WebLogic Server invokes them in the order that they appear in the list. Sometimes the order is important (for example, you want the server to try the local fast authentication provider before the slow remote one).\nCurrently, the Remote Console doesn\u0026rsquo;t explicitly let you reorder the lists.\nWorkaround To reorder providers, you can delete and recreate them. For example, if the list of authentication providers has A then B, and you want to switch it to B then A, delete A and recreate it. New providers are always added to the end of the list.\nCan\u0026rsquo;t uninstall the WebLogic Remote Console on Microsoft Windows Issue When attempting to uninstall the WebLogic Remote Console desktop application on Windows computers, the uninstallation program may complain that the WebLogic Remote Console is running and cannot be uninstalled.\nWorkaround Edit the PATH environment variable to ensure that %SystemRoot%\\system32 is the first entry that contains the find command, then retry the uninstallation.\n"
},
{
	"uri": "/userguide/advanced-settings/",
	"title": "Customize connection settings",
	"tags": [],
	"description": "A description of the various settings you can configure when connecting with the WebLogic Remote Console.",
	"content": "You can customize the default connection settings of the WebLogic Remote Console by modifying its Java system properties.\n Edit Java system properties in the desktop application Edit Java system properties in the browser-based application Java system properties  Some possible customizations:\n Connect to a WebLogic Server domain using SSL/TLS  Specify a listen address for the WebLogic Remote Console host Change the network timeout settings for the server  Disable host name verification in the connections to the WebLogic Server domain  Set the SameSite cookie attribute if required for web browser support  Connect to a WebLogic Server domain running on kubernetes   Edit Java system properties in the desktop application If you installed the WebLogic Remote Console desktop application, you can edit a config.json file with your preferred settings before launching the application.\nThe config.json file is located in:\n Linux: $HOME/.config/weblogic-remote-console/config.json macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/config.json Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\config.json  Any Windows file paths entered in config.json must be properly escaped. For example, enter C:\\Users\\Jane\\myTrust.jks as C:\\\\Users\\\\Jane\\\\myTrust.jks.    You may need to create the config.json file manually.\n For example, to set the WebLogic Remote Console to listen on a host other than localhost (IP address 127.0.0.1):\nIn the config.json file, enter:\n{\u0026quot;server.host\u0026quot;: \u0026quot;0.0.0.0\u0026quot;} Edit Java system properties in the browser-based application If you installed the WebLogic Remote Console browser version, you set the Java system properties at the command line whenever you launch the WebLogic Remote Console.\nFor example, to set the WebLogic Remote Console to listen on a host other than localhost (IP address 127.0.0.1):\nAt the command line, enter:\njava -Dserver.host=0.0.0.0 -jar \u0026lt;console_home\u0026gt;/console.jar Java system properties    Property Default config.json System Property     console.disableHostnameVerification false console.disableHostnameVerification -Dconsole.disableHostnameVerification   console.enableSameSiteCookieValue false console.enableSameSiteCookieValue -Dconsole.enableSameSiteCookieValue   console.valueSameSiteCookie Lax console.valueSameSiteCookie -Dconsole.valueSameSiteCookie   console.readTimeoutMillis 20000 console.readTimeoutMillis -Dconsole.readTimeoutMillis   console.connectTimeoutMillis 10000 console.connectTimeoutMillis -Dconsole.connectTimeoutMillis   server.host 127.0.0.1 server.host -Dserver.host   server.port 8012 server.port -Dserver.port   javax.net.ssl.trustStore \u0026lt;java-home\u0026gt;/lib/security/jssecacerts or \u0026lt;java-home\u0026gt;/lib/security/cacerts javax.net.ssl.trustStore -Djavax.net.ssl.trustStore   javax.net.ssl.trustStoreType jks javax.net.ssl.trustStoreType -Djavax.net.ssl.trustStoreType    Connect to a WebLogic Server domain using SSL/TLS If you specify HTTPS for the domain URL in the Connect to WebLogic Domain window, then the WebLogic Remote Console uses SSL/TLS to communicate with the WebLogic Server domain.\nThe SSL/TLS connection requires trust in the WebLogic Server domain, where the trust configuration is handled by the underlying JDK JSSE support. By default, the JDK uses the cacerts truststore provided with the JDK. If the WebLogic Server domain requires additional trust, separate trust, or is using the WebLogic demo trust (demotrust.jks), then you can use the JDK system properties when starting the Remote Console.\nYou can configure SSL/TLS trust with the JDK using one of these options:\n  Import the required trust certificates into the cacerts truststore supplied with the JDK using the keytool command.\n  Update the JDK Java system properties for JSSE support at the command line (browser only). For example:\njava -Djavax.net.ssl.trustStore=\u0026quot;/home/user/mytrust.jks\u0026quot; -Djavax.net.ssl.trustStoreType=\u0026quot;JKS\u0026quot; -jar \u0026lt;console_home\u0026gt;/console.jar In this command, \u0026lt;console_home\u0026gt; is the directory where you unzipped the installer.\n  Update the JDK Java system properties for JSSE support in a properties file to configure the location and type of truststore (application only).\n Create a file named config.json and save it in the applicable location for your operating system. Add the following properties. { \u0026quot;javax.net.ssl.trustStore\u0026quot;: \u0026quot;/home/user/mytrust.jks\u0026quot;, \u0026quot;javax.net.ssl.trustStoreType\u0026quot;: \u0026quot;JKS\u0026quot; } On Windows the path character \\ must be escaped, for example:\n{ \u0026quot;javax.net.ssl.trustStore\u0026quot;: \u0026quot;C:\\\\Users\\\\user\\\\mytrust.jks\u0026quot;, \u0026quot;javax.net.ssl.trustStoreType\u0026quot;: \u0026quot;JKS\u0026quot; }  Save your changes and open the Remote Console application.    Specify a listen address for the WebLogic Remote Console host To connect to a WebLogic Remote Console that is not running on the same computer as the browser, you can specify non-default values for the Remote Console host and port using Java system properties. The process differs depending on whether you are using the Remote Console through console.zip or the desktop application.\nBrowser (console.zip) To specify a listen address when running console.zip:\n  On the host where the Remote Console is installed, open a command window.\n  On the command line, set these Java system properties when starting the Remote Console:\n    -Dserver.host=\u0026lt;host-address\u0026gt; to have the Remote Console listen on a host other than localhost (IP address 127.0.0.1)\n  -Dserver.port=\u0026lt;port-number\u0026gt; to have the Remote Console bind to a port other than 8012.\nFor example:\njava -Dserver.host=0.0.0.0 -Dserver.port=8092 -jar \u0026lt;console_home\u0026gt;/console.jar In this example, 0.0.0.0 specifies that the host is listening on all IP addresses on that computer and \u0026lt;console_home\u0026gt; represents the directory where you unzipped the installer.\n    On the local computer, open a browser window and enter:\nhttp://hostname:8092 In this example, hostname represents the computer where you started the Remote Console, and can be an IP address or a DNS name (such as myhost.example.com).\nWhen you connect to a Remote Console process running on a different computer, you risk exposing sensitive data over the network.\n   In the Connect to WebLogic Domain window, enter the Administrator user name, password, and the URL of the domain.\nWhen the Remote Console is not running on the same computer as the browser, the WebLogic Server domain URL must be accessible to the computer running the Remote Console process.\n  Desktop application To specify a listen address when running the desktop application:\n  On the host where the Remote Console is installed, create a config.json file in the location applicable to your operating system.\n  In config.json, add the following properties, updating the values to reflect the hostname and port you want.\n{ \u0026quot;server.host\u0026quot;: \u0026quot;0.0.0.0\u0026quot;, \u0026quot;server.port\u0026quot;: \u0026quot;8092\u0026quot; }   On the same computer, open a command window and enter the command applicable to your operating system:\n Linux: weblogic-remote-console --headless macOS: /Applications/WebLogic Remote Console.app/Contents/MacOS/WebLogic Remote Console --headless Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Local\\Programs\\weblogic-remote-console\\WebLogic Remote Console.exe --headless    On your local computer, open a browser window and enter:\nhttp://hostname:8092 In this example, hostname represents the computer where you started the Remote Console, and can be an IP address or a DNS name (such as myhost.example.com).\nWhen you connect to a Remote Console process running on a different computer, you risk exposing sensitive data over the network.\n   In the Connect to WebLogic Domain window, enter the Administrator user name, password, and the URL of the domain.\nWhen the Remote Console is not running on the same computer as the browser, the WebLogic Server domain URL must be accessible to the computer running the Remote Console process.\n  Change the network timeout settings for the server To change the defaults for the connection and read timeout settings used with a WebLogic Server domain from the Remote Console, change the following Java system properties:\n Set console.readTimeoutMillis=\u0026lt;millis\u0026gt; for the timeout when waiting on a response, Default: 20 seconds Set console.connectTimeoutMillis=\u0026lt;millis\u0026gt; for the timeout when waiting to connect, Default: 10 seconds  For example:\njava -Dconsole.readTimeoutMillis=60000 -Dconsole.connectTimeoutMillis=30000 -jar \u0026lt;console_home\u0026gt;/console.jar In this example, \u0026lt;console_home\u0026gt; represents the directory where you unzipped the installer, and will result in the console waiting 60 seconds before giving up on a response from the WebLogic Server domain.\nor in config.json, add:\n{ \u0026quot;console.readTimeoutMillis\u0026quot;: \u0026quot;60000\u0026quot;, \u0026quot;console.connectTimeoutMillis\u0026quot;: \u0026quot;30000\u0026quot; } When changing network timeout settings, the primary impact will be the response time for Console threads, while the browser will show no data when a timeout occurs. Examples of where timeouts may happen include requests where WebLogic experiences longer initialization or execution times such as for runtime monitoring actions of servers.\nDisable host name verification in the connections to the WebLogic Server domain When using WebLogic demo trust to connect to the WebLogic Server domain, you may need to disable host name verification. Disabling host name verification causes the Remote Console to skip the verification check of ensuring that the host name in the URL to which a connection is made matches the host name in the digital certificate that the server sends back as part of the SSL connection.\nWe do not recommend using the demo certificates or turning off host name verification in production environments.\n To disable host name verification, set the console.disableHostnameVerification property to true when required. The default is false.\nFor example, to connect to the domain using SSL/TLS with host name verification disabled:\njava -Dconsole.disableHostnameVerification=true -Djavax.net.ssl.trustStore=\u0026quot;/\u0026lt;path-to-wl-home\u0026gt;/server/lib/DemoTrust.jks\u0026quot; -Djavax.net.ssl.trustStoreType=\u0026quot;JKS\u0026quot; -jar \u0026lt;console_home\u0026gt;/console.jar or in the config.json file, add\n { \u0026quot;console.disableHostnameVerification\u0026quot;: \u0026quot;true\u0026quot;, \u0026quot;javax.net.ssl.trustStore\u0026quot;: \u0026quot;/\u0026lt;path-to-wl-home\u0026gt;/server/lib/DemoTrust.jks\u0026quot;, \u0026quot;javax.net.ssl.trustStoreType\u0026quot;: \u0026quot;JKS\u0026quot; } On Windows, the path character \\ must be escaped, for example:\n { \u0026quot;console.disableHostnameVerification\u0026quot;: \u0026quot;true\u0026quot;, \u0026quot;javax.net.ssl.trustStore\u0026quot;: \u0026quot;C:\\\\\u0026lt;path-to-wl-home\u0026gt;\\\\server\\\\lib\\\\DemoTrust.jks\u0026quot;, \u0026quot;javax.net.ssl.trustStoreType\u0026quot;: \u0026quot;JKS\u0026quot; } Set the SameSite cookie attribute if required for web browser support When the WebLogic Remote Console establishes a connection with the WebLogic Domain, a HTTP Cookie is established with the Web Browser session.\nFor security reasons, the SameSite attribute of the HTTP Cookie may need to be set for the Web Browser to accept the HTTP session Cookie. There are two settings that control the Remote Console behavior:\n Set console.enableSameSiteCookieValue=true to include the SameSite attribute in the HTTP Cookie, Default: false Set console.valueSameSiteCookie=\u0026quot;\u0026lt;value\u0026gt;\u0026quot; to specify the value of the SameSite attribute, Default: Lax  For example:\njava -Dconsole.enableSameSiteCookieValue=true -jar \u0026lt;console_home\u0026gt;/console.jar or\n{\u0026quot;console.enableSameSiteCookieValue\u0026quot;: \u0026quot;true\u0026quot;} results in the HTTP session Cookie including the SameSite attribute with a value of Lax.\nConnect to a WebLogic Server domain running on kubernetes One of the benefits of the WebLogic Remote Console is the ability to connect to, and manage, a WebLogic Server domain running on Kubernetes. For details about how to setup access to WebLogic Server domains running on Kubernetes, see Use the Remote Console in the WebLogic Kubernetes Operator User Guide.\n"
},
{
	"uri": "/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Chapter heading for reference material",
	"content": "Reference "
},
{
	"uri": "/reference/troubleshoot/",
	"title": "Troubleshoot issues",
	"tags": [],
	"description": "Common issues with simple troubleshooting steps.",
	"content": "This page provides guidelines to help troubleshoot console issues.\nCheck log files for errors The WebLogic Remote Console provides log files for both front and back end processes. For instructions on how to access these log files, see Check Log Files.\nDiagnose invalid WebLogic configuration issues Administration Server The WebLogic Remote Console catches most validation errors when you click Save, or when you commit the change using the shopping cart. If an error message displays, you need to identify and correct the problem that caused the error before you can activate the changes.\nIf you installed the console extension, you can view the contents of the shopping cart to see all of the pending changes. If you did not install the console extension, you can view the pending changes using the WebLogic Server Administration Console.\n If the cause of the configuration error is not obvious:\n Check the output from the Remote Console and the domain Administration Server. Check the WebLogic Administration Server log.  If you are unable to determine the cause of the error, cancel the edits and make the configuration changes again.\nWDT model files The WebLogic Remote Console does not validate WDT model file settings. As a result, the WebLogic Remote Console may accept changes or values that are invalid and which may present problems when the model file is used to build or update a domain. For example, adding integer values that are invalid or out of range for a specific setting, or removing a server or target but not updating the deployments to select a different server or target can cause issues.\nFor more information on acceptable values, refer to the WebLogic Deploy Tooling documentation.\nUnresponsive WebLogic Remote Console browser window If the WebLogic Remote Console running in the browser becomes unresponsive, verify that the Administration Server to which you are connected is still running. If the server is down, restart it, then refresh the browser window.\nError: Failure reading auto prefs If the WebLogic Remote Console desktop application shuts down unexpectedly with this error: Failure reading auto prefs, the auto-prefs.json file may be corrupted. auto-prefs.json saves state information about the WebLogic Remote Console and should not be modified by users unless it is corrupted.\nIf the file is corrupted, you can reset it but you will lose all data regarding your projects.\nTo reset the file, delete the auto-prefs.json file, then relaunch WebLogic Remote Console.\nauto-prefs.json is located in:\n Linux: $HOME/.config/weblogic-remote-console/auto-prefs.json macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/auto-prefs.json Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\auto-prefs.json  "
},
{
	"uri": "/develop/alternative-logging/",
	"title": "Use an alternative logging configuration file",
	"tags": [],
	"description": "Instructions if you want to use an alternative logging.properties file",
	"content": "By default, the WebLogic Remote Console uses the logging.properties file inside the runnable/console-backend-server-{version}.jar file.\nIf the default configuration is sufficient, then you don\u0026rsquo;t need to do anything. However, if you want to tweak the logger configuration without regenerating the runnable/console-backend-server-{version}.jar file, you can pass the -Djava.util.logging.config.file=\u0026lt;path-to-logging.properties\u0026gt; Java system property when starting the console.\nFor example:\n-Djava.util.logging.config.file=runnable/etc/logging.properties If there is a problem using the specified path, then the logging.properties inside the runnable/console-backend-server-{version}.jar file is used. Either way, a log message is written to STDOUT stating which file was used:\nLogging configured using /gitlab-odx/weblogic/console-backend/runnable/etc/logging.properties or\nLogging configured using /logging.properties For examples of entries that can be placed into the custom logging.properties specified above, see the repository source file located at server/src/main/resources/logging.properties.\n"
},
{
	"uri": "/develop/docs-contribute/",
	"title": "Contribute to the documentation",
	"tags": [],
	"description": "How to contribute to the WebLogic Server documentation",
	"content": "The WebLogic Remote Console documentation is produced using the Hugo static site generator. The webpages are created in markdown and hosted within the same repository as the WebLogic Remote Console. This makes it easy to suggest edits and improvements directly to the documentation.\nTo make an update to the documentation:\n  Clone the repository.\n$ git clone https://github.com/oracle/weblogic-remote-console   Create a new branch.\n$ git checkout -b \u0026lt;your-branch\u0026gt;   Make your changes to the documentation. Edit the markdown source files in hugo/staging/content.\n  Build the site locally to view your changes.\ncd hugo/staging hugo server -b http://localhost:1313/weblogic-remote-console View the local site at http://localhost:1313/weblogic-remote-console/.\n  When you are ready to submit your changes, push your branch to origin and submit a pull request. Remember to follow the guidelines in the Contribute to the WebLogic Remote Console document.\nMake sure that you only check in changes from the hugo/staging/content area. Do not build the site and try to commit the static files.\n   "
},
{
	"uri": "/userguide/upgrade/",
	"title": "Upgrade the WebLogic Remote Console",
	"tags": [],
	"description": "Instructions for upgrading the WebLogic Remote Console",
	"content": "We encourage you to stay up to date with the latest version of the WebLogic Remote Console since it is regularly updated to work with the latest versions of WebLogic Server, including patches.\nDesktop application To check for newer versions of the desktop application, go to Help \u0026gt; Check For Updates. If a newer version is available, a dialog box will open where you can choose to go to the GitHub webpage for the latest WebLogic Remote Console release. If you\u0026rsquo;re already on the latest version, no further action is required.\nIf you regularly use config.json to customize the default connection settings of the WebLogic Remote Console, consider backing up config.json in a separate location to easily restore it following the upgrade.\n Download the latest version from https://github.com/oracle/weblogic-remote-console/releases. Stop the WebLogic Remote Console. Uninstall the WebLogic Remote Console application according to the guidelines for your operating system. Follow the installation instructions at Install WebLogic Remote Console.  Browser-based application  Download the latest version from https://github.com/oracle/weblogic-remote-console/releases. Stop the WebLogic Remote Console. Delete the console home directory (where you extracted the files from console.zip). Follow the installation instructions at Install WebLogic Remote Console.  "
},
{
	"uri": "/userguide/logging/",
	"title": "Check Log Files",
	"tags": [],
	"description": "Instructions for the accessing log files for the WebLogic Remote Console",
	"content": "You can inspect log files to ensure that the WebLogic Remote Console is functioning correctly.\nFront end To view the log file for issues related to the front end of the WebLogic Remote Console:\nDesktop application Open View \u0026gt; Toggle Developer Tools and select the Console tab.\nBrowser application In the browser tab with WebLogic Remote Console, open the Developer Tools and select the Console tab.\nBack end To view the log file for issues related to the back end of the WebLogic Remote Console:\nDesktop application Open the out.log file in a text editor. The out.log file is located in:\n Linux: $HOME/.config/weblogic-remote-console/out.log macOS: /Users/\u0026lt;user\u0026gt;/Library/Application Support/weblogic-remote-console/out.log Windows: C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\weblogic-remote-console\\out.log  out.log maintains log entries for the current session of the WebLogic Remote Console. Once you close your current session, those log entries are moved to out-1.log (in the same folder as out.log). out-1.log only keeps a copy of the most recently ended session\u0026rsquo;s log entries, not all previous sessions.\nThis feature is not supported in the browser application.\nIf you want to change the default logging configuration for back end log files, see Use an alternative logging configuration file.\n "
},
{
	"uri": "/setup/admin-console-diff/",
	"title": "Differences With the Administration Console",
	"tags": [],
	"description": "An overview of the differences with the Oracle WebLogic Administration Console.",
	"content": "The WebLogic Remote Console is distinct from the WebLogic Server Administration Console that is deployed as part of your WebLogic Server domain. As you explore the WebLogic Remote Console, you\u0026rsquo;ll notice key differences between the two consoles:\n The user interface has been completely redesigned to conform to the Oracle Redwood theme included with Oracle JET. The configuration and monitoring runtime content is separated into separate pages in the Remote Console. In the WebLogic Server Administration Console, the configuration and runtime information is presented on one page. The Change Center is now expressed as a shopping cart. Instead of logging directly into the Administration Console deployed in a WebLogic Server domain, the Remote Console connects to the Administration Server in a WebLogic Server domain, with the credentials supplied by the user, using WebLogic REST APIs.  For information on the WebLogic Server Administration Console, see the online help for 12.2.1.3, 12.2.1.4, or 14.1.1.0.\n"
},
{
	"uri": "/",
	"title": "WebLogic Remote Console",
	"tags": [],
	"description": "An introduction to the WebLogic Remote Console.",
	"content": "WebLogic Remote Console The WebLogic Remote Console is a lightweight, open source console that you can use to manage domain configurations of WebLogic Server Administration Servers or WebLogic Deploy Tooling (WDT) metadata models.\nThe advantage of the WebLogic Remote Console is that it does not need to be collocated with the WebLogic Server domain. You can install and run the WebLogic Remote Console from one computer and connect to a domain running anywhere: a physical or virtual machine, in a container, Kubernetes, or in the Oracle Cloud. The WebLogic Remote Console connects to your domain using WebLogic REST APIs.\nAs for the WDT metadata models, they are descriptions of a WebLogic Server domain configuration, generally written in YAML but occasionally JSON. These models are not connected to a live domain and you edit them \u0026lsquo;offline\u0026rsquo; before using the WebLogic Deploy Tooling (WDT) to build or modify live domains from the models. See the WebLogic Deploy Tooling documentation for more information.\nSimply launch the desktop application and connect to an Administration Server or WDT model. Or, you can start the console in a browser and then connect to the Administration Server.\nThe WebLogic Remote Console is fully supported with WebLogic Server 12.2.1.3, 12.2.1.4, and 14.1.1.0.\nKey features of the WebLogic Remote Console The WebLogic Remote Console provides an alternative WebLogic Server administration GUI that enables REST-based access to WebLogic management information, in alignment with current cloud-native trends. When connected to a WebLogic domain or model using the WebLogic Remote Console, you can:\n Configure WebLogic Server instances and clusters Create or modify WDT metadata models Configure WebLogic Server services, such as database connectivity (JDBC), and messaging (JMS) Deploy and undeploy applications Start and stop servers and applications Monitor server and application performance  For detailed information on the fields and procedures of the WebLogic Remote Console, you can often reference the online help of the WebLogic Administration Console: 12.2.1.3, 12.2.1.4, or 14.1.1.0.\nHowever, although the WebLogic Remote Console and the WebLogic Administration Console are similar, there are differences between them. See Differences for details on how they differ.\nGet started Whether you choose the desktop application or the browser-based tool, it\u0026rsquo;s simple to install the WebLogic Remote Console and get up and running within moments. See Install WebLogic Remote Console for instructions.\n What\u0026rsquo;s new The current release of the WebLogic Remote Console is 2.0.0. This release was published in November 2021.\nNew features\n WDT model file support - create and update WDT model files Multiple provider support - connect to multiple domains and WDT model files New Configuration View Tree perspective - view currently active configuration settings   Previous Releases Documentation for prior releases of the WebLogic Remote Console: 1.1.0.\nNeed more help? Have a suggestion? Come and say, \u0026ldquo;Hello!\u0026rdquo; We have a public Slack channel where you can get in touch with us to ask questions about using the WebLogic Remote Console or give us feedback or suggestions about what features and improvements you would like to see. We would love to hear from you. To join our channel, please visit this site to get an invitation. The invitation email will include details of how to access our Slack workspace. After you are logged in, please come to #remote-console and say, \u0026ldquo;hello!\u0026rdquo;\nRelated Projects  WebLogic Deploy Tooling  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]