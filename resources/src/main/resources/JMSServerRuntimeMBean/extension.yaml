# Copyright (c) 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

actions:

- name: "pauseProduction"
  type: "void"
  descriptionHTML: >
    <p>Pauses the new message production on all the destinations
    hosted by the JMSServer.</p>
    <p>When the production paused, it would prevent any new produce 
    operations from both new and existing producers attached to 
    the destinations. When the destination is &quot;resumed from 
    production pause&quot;, all the new message production is 
    allowed from both new and existing producers attached to that 
    destination.</p>

- name: "resumeProduction"
  type: "void"
  descriptionHTML: >
    <p>Resumes the new message production operation on all the
    destinations hosted by the JMSServer. The state of the
    JMSServer shall be marked as &quot;production enabled&quot;
    thus allowing all the new &quot;producing&quot; activity to
    continue normally. Invoking this API on a JMSServer that is
    currently not in &quot;production paused&quot; state has no
    effect.</p>

- name: "pauseInsertion"
  type: "void"
  descriptionHTML: >
    <p>Pauses the appearance of any messages on all the
    destinations of the JMSServer, that are result of the
    in-flight work completion on all the destinations hosted by
    this JMSServer.</p>
    <p><b> Definition of In-Flight work</b></p>
    <p> The definitions below are based on the current
    implementation of WebLogic JMS subsystem.</p>
    <ul>
      <li><p>In-flight messages associated with Producers</p>
        <ul>
          <li> UN-BORN MESSAGES
            <p>Messages that are produced by the producer, with
            &quot;birth time&quot; (TimeToDeliver) set in
            future are called un-born messages and are counted
            as &quot;pending&quot; messages in the destination
            statistics and are not available for consumers yet.</p>
          </li>
          <li> UN-COMMITTED MESSAGES
            <p>These are the messages that are produced by the
            producer as part of the transaction (using either
            user transaction or transacted session) and the
            transaction is still not committed or rolled back.
            These messages are also counted as &quot;pending&quot;
            messages in the destination statistics and are not
            available for consumption.</p>
          </li>
          <li> QUOTA BLOCKING SEND
             <p>These are the messages that are produced by the
             producers but are not able reach the destination
             because of (either message or byte or both) quota
             limit on the destination and the producers are
             willing to block for a specific period of time for
             the quota to be available. These messages are
             invisible to the system and are not counted against
             any of the destination statistics.</p>
          </li>
        </ul>
      </li>
      <li><p>In-flight messages associated with Consumers</p>
        <ul>
          <li> UN-ACKNOWLEDGED (CLIENT ACK PENDING) MESSAGES
            <p>These are the messages that are successfully
            consumed by the clients using a &quot;client
            acknowledge&quot; session, and are awaiting
            acknowledgements from the clients. These are
            &quot;pending messages&quot; which will be removed
            from the destination/system when the acknowledgement
            is received.</p>
          </li>
          <li> UN-COMMITTED MESSAGES
            <p>These are the messages that are consumed (received)
            by the clients within a transaction (using either
            user transaction or transacted session) and the
            transaction is still not committed or rolled back.
            When the clients successfully commit the transaction
            the messages get removed from the system.</p>
          </li>
          <li> ROLLED BACK MESSAGES
            <p>These are the messages that are put back on the
            destination because of a successful rollback of
            transactional receive by the consumers. These messages
            might or might not be ready for consumption (re-delivered)
            to the clients immediately, depending on the redelivery
            parameters, RedeliveryDelay and/or RedeliveryDelayOverride
            and RedeliveryLimit configured on the associated 
            JMSConnectionFactory and JMSDestination respectively.</p> 
            <p>If there is a redelivery delay configured, then
            for that &quot;delay&quot; duration, the messages
            are not available for consumption and are counted
            as &quot;pending&quot; in the destination statistics
            and after the &quot;delay&quot; period, if the redelivery
            limit is not exceeded, then they are delivered (made
            available for consumption) on that destination and are
            counted as &quot;current&quot; messages in the
            destination statistics. If the redelivery limit exceeds,
            then those messages will be moved to the ErrorDestination,
            if one configured.</p>
            <p>Another parameter that controls the availability of
            the rolled back messages is RedeliveryLimit.</p>
          </li>
          <li> RECOVERED MESSAGES
            <p>These messages are similar to ROLLED BACK MESSAGES
            except that these messages appear on the 
            queue because of an explicit call to session 
            &quot;recover&quot; by the client.</p>
          </li> 
          <li> REDELIVERED MESSAGES
            <p>These are again similar to ROLLED BACK MESSAGES
            except that these messages may re-appear on the destination
            because of an un-successful delivery attempt to the client
            (consumer crash, close etc.).</p>
          </li>
        </ul>
      </li>
    </ul>

- name: "resumeInsertion"
  type: "void"
  descriptionHTML: >
    <p>Resumes the in-flight message production operation
    on all the destinations hosted by the JMSServer.
    The state of the JMSServer shall be marked as
    &quot;insertion enabled&quot; thus allowing all the
    messages from in-flight work completion are alloed to
    appear on the destinations.</p>
    <p>Invoking this API on a JMSServer that is currently not in 
    &quot;insertion paused&quot; state has no effect.</p>

- name: "pauseConsumption"
  type: "void"
  descriptionHTML: >
    <p>Pauses the consumption operation on all the destinations
    hosted by the JMSServer.</p>
    <p> When the JMSServer is paused for consumption, all of 
    its destination's state is marked as &quot;consumption 
    paused&quot; and all the new synchronous receive operations 
    will block until the destination is resumed and there are 
    messages available for consumption. All the synchronous 
    receive with blocking timeout will block until the timeout 
    happens during the consumption paused state.</p> 
    <p>All the asynchronous consumers attached to that
    destination will not get any messages delivered to them
    while the destination in &quot;consumption paused&quot;
    state.</p> 
    <p> After a successful consumption &quot;pause&quot;
    operation, the user has to explicitly &quot;resume&quot;
    the destination to allow for any further consume operations
    on that destination</p>

- name: "resumeConsumption"
  type: "void"
  descriptionHTML: >
    <p>Resumes the consumption operation on all the
    destinations hosted by the JMSSever.</p>
    <p> The state of the destinations shall be marked as 
    &quot;consumption enabled&quot; thus allowing all the 
    &quot;consuming&quot; activity to continue normally.</p> 
    <p>Invoking this API on a JMSServer that is 
    currently not in "consumption paused" state has no effect.</p>

- name: "forceCommit"
  type: "void" # v.s. Void
  descriptionHTML: >
    <p>Causes the work associated with the specified transaction branch to be committed.</p>
  parameters:
  - name: xid
    type: java.lang.String
    descriptionHTML: "An xid in string representation for a JMS transaction branch."

- name: "forceRollback"
  type: "void" # v.s. Void
  descriptionHTML: >
    <p>Causes the work associated with the specified transaction branch to be rolled back.</p>
  parameters:
  - name: xid
    type: java.lang.String
    descriptionHTML: "An xid in string representation for a JMS transaction branch."
